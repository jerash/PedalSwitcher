gplink-0.13.4 alpha
Copyright (c) 1998-2005 gputils project
Listing File Generated: 2-4-2013  11:12:39
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ; $Id: mios_wrapper.asm 63 2008-01-31 20:44:17Z tk $
                                           ;
                                           ; This is the MIOS wrapper for SDCC (qualified for v2.5.0 and v2.6.0)
                                           ;
                                           ; the upper boundary of the stacks are defined here 
                                           ; customize the values for your needs
                                           #ifndef STACK_HEAD
                                           #define STACK_HEAD 0x37f
                                           #endif
                                           
                                           #ifndef STACK_IRQ_HEAD
                                           #define STACK_IRQ_HEAD 0x33f
                                           #endif
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           ;; ---[ MIOS header file ]---
                                           #include <mios.h>
                                           ; $Id: mios.h 822 2009-09-17 18:39:53Z tk $
                                           ;
                                           ; MIOS Definitions file
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2008 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  Include basic defines which characterize the derivative to
                                           ;;  simplify dependencies within MIOS source code
                                           ;; ==========================================================================
                                           #include <hw_flags.h>
                                           
                                           #ifndef _HW_FLAGS_H
                                           #define _HW_FLAGS_H
                                           
                                           #ifdef __18F452
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		0
                                           #define PIC_DERIVATIVE_CMCON_INIT	0
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4620
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x10000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xf80
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	1
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4682
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x14000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #ifdef __18F4685
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x18000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #endif
                                            
                                           ;; ==========================================================================
                                           ;;  Assembler directives & device specific include file
                                           ;;
                                           ;;  Natively supported devices are listed here.
                                           ;; ==========================================================================
                                           
                                           #ifdef __18F452
                                           	LIST R=DEC
                                           #include <p18f452.inc>
                                                   LIST
                                           ; P18F452.INC  Standard Header File, Version 1.4   Microchip Technology, Inc.
                                                   NOLIST
                                           #endif
                                           
                                           #ifdef __18F4620
                                           	LIST R=DEC
                                           #include <p18f4620.inc>
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           	LIST R=DEC
                                           #include <p18f4520.inc>
                                           #endif
                                           
                                           #ifdef __18F4682
                                           	LIST R=DEC
                                           #include <p18f4682.inc>
                                           #endif
                                           
                                           #ifdef __18F4685
                                           	LIST R=DEC
                                           #include <p18f4685.inc>
                                           #endif
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  General constants
                                           ;; ==========================================================================
                                           
                                           ;; used by MIOS_MIDI_Interface*
                                           MIOS_MIDI_INTERFACE_COMMON	EQU	0x00
                                           MIOS_MIDI_INTERFACE_TO_HOST	EQU	0x01
                                           
                                           ;; used by MIOS_MIDI_Merger*
                                           MIOS_MIDI_MERGER_DISABLED	EQU	0x00
                                           MIOS_MIDI_MERGER_ENABLED	EQU	0x01
                                           MIOS_MIDI_MERGER_MBLINK_EP	EQU	0x02
                                           MIOS_MIDI_MERGER_MBLINK_FP	EQU	0x03
                                           
                                           ;; used by MIOS_ENC_PIN_TABLE
                                           #ifdef MIOS_OLD_ENCODER_MODES
                                           MIOS_ENC_MODE_NON_DETENTED	EQU	0x00
                                           MIOS_ENC_MODE_DETENTED		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED1		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED2		EQU	0x81
                                           MIOS_ENC_MODE_DETENTED3		EQU	0x82
                                           #else
                                           ;; new encoder modes: each bit of MIOS_ENC_MODE_xx tells, if an INC / DEC is 
                                           ;; being triggered on the corresponding edge. 
                                           ;; Bit      7   6   5   4  
                                           ;; DEC     <-  <-  <-  <-
                                           ;; Pin A ___|-------|_______
                                           ;; Pin B _______|-------|___
                                           ;; INC      ->  ->  ->  ->
                                           ;; Bit      0   1   2   3
                                           ;; Ex.:          Bit  76543210
                                           ;;      DETENTED2 = 0b00100010 = 0x22
                                           ;;      -> INC will be triggered on edge 1, DEC on edge 5
                                           MIOS_ENC_MODE_NON_DETENTED	EQU	0xff
                                           MIOS_ENC_MODE_DETENTED		EQU	0xaa
                                           MIOS_ENC_MODE_DETENTED1		EQU	0xaa
                                           MIOS_ENC_MODE_DETENTED2		EQU	0x22
                                           MIOS_ENC_MODE_DETENTED3		EQU	0x88
                                           MIOS_ENC_MODE_DETENTED4		EQU	0xa5
                                           MIOS_ENC_MODE_DETENTED5		EQU	0x5a
                                           #endif
                                           
                                           ;; used by MIOS_ENC_Speed*
                                           MIOS_ENC_SPEED_SLOW		EQU	0
                                           MIOS_ENC_SPEED_NORMAL		EQU	1
                                           MIOS_ENC_SPEED_FAST		EQU	2
                                           
                                           ;; used by MIOS_LCD_Type*
                                           MIOS_LCD_TYPE_CLCD		EQU	0x00
                                           MIOS_LCD_TYPE_GLCD0		EQU	0x01
                                           MIOS_LCD_TYPE_GLCD1		EQU	0x02
                                           MIOS_LCD_TYPE_GLCD2		EQU	0x03
                                           MIOS_LCD_TYPE_GLCD3		EQU	0x04
                                           MIOS_LCD_TYPE_GLCD4		EQU	0x05
                                           MIOS_LCD_TYPE_MLCD		EQU	0x06
                                           MIOS_LCD_TYPE_GLCD_CUSTOM	EQU	0x07
                                           
                                           ;; location of default 5x8 font for graphical displays
                                           MIOS_GLCD_FONT			EQU	0x7cfc
                                           
                                           ;; general config flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_CFG0_LCD_TYPE0		EQU 0	; selects LCD type, bit 0
                                           MIOS_BOX_CFG0_LCD_TYPE1		EQU 1	; selects LCD type, bit 1
                                           MIOS_BOX_CFG0_LCD_TYPE2		EQU 2	; selects LCD type, bit 2
                                           MIOS_BOX_CFG0_USE_GLCD		EQU 3	; if 1, graphical LCD is connected
                                           MIOS_BOX_CFG0_MERGER		EQU 4	; if 1, MIDI merger is enabled
                                           MIOS_BOX_CFG0_MBLINK		EQU 5	; if 1, MIDIbox Link is enabled
                                           MIOS_BOX_CFG0_TO_HOST		EQU 6	; if 1, MIDI interface will run with 38400 baud instead of 31250
                                           MIOS_BOX_CFG0_20MHz		EQU 7	; if 1, it is assumed that box is running with 20 MHz, else with 40 MHz
                                           
                                           MIOS_BOX_CFG1_BS_A0		EQU 0	; A0 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A1		EQU 1	; A1 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A2		EQU 2	; A2 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_DIS_VERIFY	EQU 3	; if 1, writes to the BankStick will not be verified
                                           MIOS_BOX_CFG1_IIC_STRETCH_CLK	EQU 4	; if 1, IIC clock stretching enabled
                                           
                                           ;; general status flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_STAT_BS_AVAILABLE	EQU 0	; if 1, BankStick is available
                                           MIOS_BOX_STAT_MBLINK_TUNNEL_PASS EQU 1  ; if 1, a MBLinked event will be tunnled
                                           MIOS_BOX_STAT_SUSPEND_ALL       EQU 2   ; if 1, all system and user tasks are suspended
                                           MIOS_BOX_STAT_SUSPEND_USER      EQU 3   ; if 1, all user tasks are suspended
                                           MIOS_BOX_STAT_AUTOREPEAT	EQU 4	; if 1, start the auto-repeat handler
                                           MIOS_BOX_STAT_MLCD_TRANSFER	EQU 5	; if 1, a transfer to the MLCD has been started
                                           MIOS_BOX_STAT_FERR		EQU 6	; if 1, a frame error happened during MIDI receive
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS Special Function Registers
                                           ;; ==========================================================================
                                           
                                           MIOS_BOX_CFG0	EQU	0x000
                                           MIOS_BOX_CFG1	EQU	0x001
                                           MIOS_BOX_STAT	EQU	0x002
                                           MIOS_PARAMETER1	EQU	0x003
                                           MIOS_PARAMETER2	EQU	0x004
                                           MIOS_PARAMETER3	EQU	0x005
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for main programs
                                           ;; ==========================================================================
                                           TMP1		EQU	0x006
                                           TMP2		EQU	0x007
                                           TMP3		EQU	0x008
                                           TMP4		EQU	0x009
                                           TMP5		EQU	0x00a
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for IRQs
                                           ;; ==========================================================================
                                           IRQ_TMP1	EQU	0x00b
                                           IRQ_TMP2	EQU	0x00c
                                           IRQ_TMP3	EQU	0x00d
                                           IRQ_TMP4	EQU	0x00e
                                           IRQ_TMP5	EQU	0x00f
                                           
                                           ;; ==========================================================================
                                           ;;  free memory space for user application:
                                           ;; ==========================================================================
                                           	;; 0x010-0x37f
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers -- not defined here -- 
                                           ;;  never use these memory locations!
                                           ;; ==========================================================================
                                           	;; 0x380-0x6ff
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers for custom LCD driver
                                           ;; ==========================================================================
                                           MIOS_GLCD_BUFFER	EQU	0x570	; note: the buffer must be located at ...0-...7
                                           MIOS_LCD_OPTION1	EQU	0x578	; contains the first LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_OPTION2	EQU	0x579	; contains the second LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_CURSOR_POS	EQU	0x57a	; the current cursor pos of characters (GLCD: multiplied by width)
                                           MIOS_GLCD_GCURSOR_X	EQU	0x57b	; for GLCDs: the current X position of graphical cursor
                                           MIOS_GLCD_GCURSOR_Y	EQU	0x57c	; for GLCDs: the current Y position of graphical cursor
                                           MIOS_GLCD_FONT_WIDTH	EQU	0x57d	; for GLCDs: the fontwidth given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_HEIGHT	EQU	0x57e	; for GLCDs: the fontheight given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_X0	EQU	0x57f	; for GLCDs: the first byte within a char entry
                                           MIOS_GLCD_FONT_OFFSET	EQU	0x580	; for GLCDs: the byte offset between the characters
                                           MIOS_GLCD_FONT_PTRL	EQU	0x581	; for GLCDs: pointer to the character table, low-byte
                                           MIOS_GLCD_FONT_PTRH	EQU	0x582	; for GLCDs: pointer to the character table, high-byte
                                           MIOS_LCD_TIMEOUT0	EQU	0x583   ; can be used for timeout loops
                                           MIOS_LCD_TIMEOUT1	EQU	0x584   ; can be used for timeout loops
                                           MIOS_GLCD_TMP1		EQU	0x585   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP2		EQU	0x586   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP3		EQU	0x587   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP4		EQU	0x588   ; can be used as temporary buffer
                                           MIOS_LCD_Y0_OFFSET	EQU	0x589   ; Y0 offset of LCD
                                           MIOS_LCD_Y1_OFFSET	EQU	0x58a   ; Y1 offset of LCD
                                           MIOS_LCD_Y2_OFFSET	EQU	0x58b   ; Y2 offset of LCD
                                           MIOS_LCD_Y3_OFFSET	EQU	0x58c   ; Y3 offset of LCD
                                           MIOS_LCD_CURSOR_POS_REAL EQU	0x58d	; unmapped cursor position which has been set with MIOS_LCD_CursorSet
                                           MIOS_GLCD_FONT_PTRU	EQU	0x58e	; for GLCDs: pointer to the character table, upper-byte (>64k flash derivatives only)
                                           
                                           ;; ---[ vectors to MIOS functions (never change!) ]---
                                           #include <mios_vectors.inc>
                                           ; $Id: mios_vectors.inc 49 2008-01-30 21:47:31Z tk $
                                           
                                           MIOS_MIDI_BeginStream                   EQU	0x2c00
                                           MIOS_MIDI_DeviceIDAutoSet               EQU	0x2c04
                                           MIOS_MIDI_DeviceIDGet                   EQU	0x2c08
                                           MIOS_MIDI_DeviceIDSet                   EQU	0x2c0c
                                           MIOS_MIDI_EndStream                     EQU	0x2c10
                                           MIOS_MIDI_Init                          EQU	0x2c14
                                           MIOS_MIDI_InterfaceAutoSet              EQU	0x2c18
                                           MIOS_MIDI_InterfaceGet                  EQU	0x2c1c
                                           MIOS_MIDI_InterfaceSet                  EQU	0x2c20
                                           MIOS_MIDI_MergerGet                     EQU	0x2c24
                                           MIOS_MIDI_MergerSet                     EQU	0x2c28
                                           MIOS_MIDI_RxBufferFree                  EQU	0x2c2c
                                           MIOS_MIDI_RxBufferGet                   EQU	0x2c30
                                           MIOS_MIDI_RxBufferPut                   EQU	0x2c34
                                           MIOS_MIDI_RxBufferUsed                  EQU	0x2c38
                                           MIOS_MIDI_TxBufferFlush                 EQU	0x2c3c
                                           MIOS_MIDI_TxBufferFree                  EQU	0x2c40
                                           MIOS_MIDI_TxBufferGet                   EQU	0x2c44
                                           MIOS_MIDI_TxBufferPut                   EQU	0x2c48
                                           MIOS_MIDI_TxBufferUsed                  EQU	0x2c4c
                                           MIOS_MPROC_MergerDisable                EQU	0x2c50
                                           MIOS_MPROC_MergerEnable                 EQU	0x2c54
                                           MIOS_MPROC_MergerGet                    EQU	0x2c58
                                           MIOS_AIN_DeadbandGet                    EQU	0x2c5c
                                           MIOS_AIN_DeadbandSet                    EQU	0x2c60
                                           MIOS_AIN_Muxed                          EQU	0x2c64
                                           MIOS_AIN_NumberGet                      EQU	0x2c68
                                           MIOS_AIN_NumberSet                      EQU	0x2c6c
                                           MIOS_AIN_Pin7bitGet                     EQU	0x2c70
                                           MIOS_AIN_PinGet                         EQU	0x2c74
                                           MIOS_AIN_PinLSBGet                      EQU	0x2c78
                                           MIOS_AIN_PinMSBGet                      EQU	0x2c7c
                                           MIOS_AIN_UnMuxed                        EQU	0x2c80
                                           MIOS_MF_PWM_DutyCycleDownGet            EQU	0x2c84
                                           MIOS_MF_PWM_DutyCycleDownSet            EQU	0x2c88
                                           MIOS_MF_PWM_DutyCycleUpGet              EQU	0x2c8c
                                           MIOS_MF_PWM_DutyCycleUpSet              EQU	0x2c90
                                           MIOS_MF_DeadbandGet                     EQU	0x2c94
                                           MIOS_MF_DeadbandSet                     EQU	0x2c98
                                           MIOS_MF_Disable                         EQU	0x2c9c
                                           MIOS_MF_Enable                          EQU	0x2ca0
                                           MIOS_MF_FaderMove                       EQU	0x2ca4
                                           MIOS_MF_SuspendDisable                  EQU	0x2ca8
                                           MIOS_MF_SuspendEnable                   EQU	0x2cac
                                           MIOS_MF_SuspendGet                      EQU	0x2cb0
                                           MIOS_DIN_PinGet                         EQU	0x2cb4
                                           MIOS_DIN_SRGet                          EQU	0x2cb8
                                           MIOS_DOUT_PinGet                        EQU	0x2cbc
                                           MIOS_DOUT_PinSet                        EQU	0x2cc0
                                           MIOS_DOUT_PinSet0                       EQU	0x2cc4
                                           MIOS_DOUT_PinSet1                       EQU	0x2cc8
                                           MIOS_DOUT_SRGet                         EQU	0x2ccc
                                           MIOS_DOUT_SRSet                         EQU	0x2cd0
                                           MIOS_ENC_Abs7bitAdd                     EQU	0x2cd4
                                           MIOS_ENC_Abs7bitGet                     EQU	0x2cd8
                                           MIOS_ENC_Abs7bitSet                     EQU	0x2cdc
                                           MIOS_ENC_NumberGet                      EQU	0x2ce0
                                           MIOS_ENC_SpeedGet                       EQU	0x2ce4
                                           MIOS_ENC_SpeedSet                       EQU	0x2ce8
                                           MIOS_SRIO_NumberGet                     EQU	0x2cec
                                           MIOS_SRIO_NumberSet                     EQU	0x2cf0
                                           MIOS_SRIO_TS_SensitivityGet             EQU	0x2cf4
                                           MIOS_SRIO_TS_SensitivitySet             EQU	0x2cf8
                                           MIOS_SRIO_UpdateFrqGet                  EQU	0x2cfc
                                           MIOS_SRIO_UpdateFrqSet                  EQU	0x2d00
                                           MIOS_LCD_Clear                          EQU	0x2d04
                                           MIOS_LCD_Cmd                            EQU	0x2d08
                                           MIOS_LCD_CursorGet                      EQU	0x2d0c
                                           MIOS_LCD_CursorSet                      EQU	0x2d10
                                           MIOS_LCD_Data                           EQU	0x2d14
                                           MIOS_LCD_Init                           EQU	0x2d18
                                           MIOS_LCD_PrintBCD1	                EQU	0x2d1c
                                           MIOS_LCD_PrintBCD2                      EQU	0x2d20
                                           MIOS_LCD_PrintBCD3                      EQU	0x2d24
                                           MIOS_LCD_PrintChar	                EQU	0x2d28
                                           MIOS_LCD_PrintHex1	                EQU	0x2d2c
                                           MIOS_LCD_PrintHex2                      EQU	0x2d30
                                           MIOS_LCD_PrintMessage                   EQU	0x2d34
                                           MIOS_LCD_PrintPreconfString             EQU	0x2d38
                                           MIOS_LCD_PrintString                    EQU	0x2d3c
                                           MIOS_LCD_TypeAutoSet                    EQU	0x2d40
                                           MIOS_LCD_TypeGet                        EQU	0x2d44
                                           MIOS_LCD_TypeSet                        EQU	0x2d48
                                           MIOS_LCD_YAddressGet                    EQU	0x2d4c
                                           MIOS_LCD_YAddressSet                    EQU	0x2d50
                                           MIOS_GLCD_FontInit                      EQU	0x2d54
                                           MIOS_GLCD_GCursorGet                    EQU	0x2d58
                                           MIOS_GLCD_GCursorSet                    EQU	0x2d5c
                                           MIOS_EEPROM_Read                        EQU	0x2d60
                                           MIOS_EEPROM_Write                       EQU	0x2d64
                                           MIOS_FLASH_Read                         EQU	0x2d68
                                           MIOS_FLASH_Write                        EQU	0x2d6c
                                           MIOS_BANKSTICK_Read                     EQU	0x2d70
                                           MIOS_BANKSTICK_Write                    EQU	0x2d74
                                           MIOS_TIMER_Init                         EQU	0x2d78
                                           MIOS_TIMER_Start                        EQU	0x2d7c
                                           MIOS_TIMER_Stop                         EQU	0x2d80
                                           MIOS_HLP_AddressFromTable               EQU	0x2d84
                                           MIOS_HLP_GetBitANDMask                  EQU	0x2d88
                                           MIOS_HLP_GetBitORMask                   EQU	0x2d8c
                                           MIOS_HLP_GetIndex_2bytes                EQU	0x2d90
                                           MIOS_HLP_GetIndex_4bytes                EQU	0x2d94
                                           MIOS_HLP_IndirectJump                   EQU	0x2d98
                                           MIOS_Delay                              EQU	0x2d9c
                                           MIOS_GPCounterGet                       EQU	0x2da0
                                           MIOS_Reset                              EQU	0x2da4
                                           MIOS_SystemResume                       EQU	0x2da8
                                           MIOS_SystemSuspend                      EQU	0x2dac
                                           MIOS_UserResume                         EQU	0x2db0
                                           MIOS_UserSuspend                        EQU	0x2db4
                                           MIOS_HLP_16bitAddSaturate		EQU	0x2db8
                                           MIOS_DIN_PinAutoRepeatEnable		EQU	0x2dbc
                                           MIOS_DIN_PinAutoRepeatDisable		EQU	0x2dc0
                                           MIOS_DIN_PinAutoRepeatGet		EQU	0x2dc4
                                           MIOS_CLCD_SpecialCharInit		EQU	0x2dc8
                                           MIOS_CLCD_SpecialCharsInit		EQU	0x2dcc
                                           MIOS_AIN_DynamicPrioSet			EQU	0x2dd0
                                           MIOS_AIN_DynamicPrioGet			EQU	0x2dd4
                                           MIOS_AIN_LastPinsGet			EQU	0x2dd8
                                           MIOS_BANKSTICK_CtrlSet			EQU	0x2ddc
                                           MIOS_BANKSTICK_CtrlGet			EQU	0x2de0
                                           MIOS_BANKSTICK_WritePage		EQU	0x2de4
                                           MIOS_HLP_Dec2BCD			EQU	0x2de8
                                           MIOS_LCD_PrintBCD4			EQU	0x2dec
                                           MIOS_LCD_PrintBCD5                      EQU	0x2df0
                                           MIOS_LCD_MessageStart			EQU	0x2df4
                                           MIOS_LCD_MessageStop			EQU	0x2df8
                                           MIOS_MF_PWM_PeriodGet                   EQU	0x2dfc
                                           MIOS_MF_PWM_PeriodSet                   EQU	0x2e00
                                           MIOS_IIC_Start				EQU	0x2e04
                                           MIOS_IIC_Stop				EQU	0x2e08
                                           MIOS_IIC_ByteSend			EQU	0x2e0c
                                           MIOS_IIC_ByteReceive			EQU	0x2e10
                                           MIOS_IIC_AckSend			EQU	0x2e14
                                           MIOS_IIC_NakSend			EQU	0x2e18
                                           MIOS_IIC_CtrlSet			EQU	0x2e1c
                                           MIOS_IIC_CtrlGet			EQU	0x2e20
                                           MIOS_SRIO_DebounceSet			EQU	0x2e24
                                           MIOS_SRIO_DebounceGet			EQU	0x2e28
                                           MIOS_MF_TouchDetectionReset		EQU	0x2e2c
                                           MIOS_BANKSTICK_ReadPage			EQU	0x2e30
                                           MIOS_EEPROM_ReadPage			EQU	0x2e34
                                           MIOS_EEPROM_WritePage			EQU	0x2e38
                                           MIOS_TIMER_ReInit			EQU	0x2e3c
                                           MIOS_RESERVED_144                       EQU	0x2e40
                                           MIOS_RESERVED_145                       EQU	0x2e44
                                           MIOS_RESERVED_146                       EQU	0x2e48
                                           MIOS_RESERVED_147                       EQU	0x2e4c
                                           MIOS_RESERVED_148                       EQU	0x2e50
                                           MIOS_RESERVED_149                       EQU	0x2e54
                                           MIOS_RESERVED_150                       EQU	0x2e58
                                           MIOS_RESERVED_151                       EQU	0x2e5c
                                           MIOS_RESERVED_152                       EQU	0x2e60
                                           MIOS_RESERVED_153                       EQU	0x2e64
                                           MIOS_RESERVED_154                       EQU	0x2e68
                                           MIOS_RESERVED_155                       EQU	0x2e6c
                                           MIOS_RESERVED_156                       EQU	0x2e70
                                           MIOS_RESERVED_157                       EQU	0x2e74
                                           MIOS_RESERVED_158                       EQU	0x2e78
                                           MIOS_RESERVED_159                       EQU	0x2e7c
                                           MIOS_RESERVED_160                       EQU	0x2e80
                                           MIOS_RESERVED_161                       EQU	0x2e84
                                           MIOS_RESERVED_162                       EQU	0x2e88
                                           MIOS_RESERVED_163                       EQU	0x2e8c
                                           MIOS_RESERVED_164                       EQU	0x2e90
                                           MIOS_RESERVED_165                       EQU	0x2e94
                                           MIOS_RESERVED_166                       EQU	0x2e98
                                           MIOS_RESERVED_167                       EQU	0x2e9c
                                           MIOS_RESERVED_168                       EQU	0x2ea0
                                           MIOS_RESERVED_169                       EQU	0x2ea4
                                           MIOS_RESERVED_170                       EQU	0x2ea8
                                           MIOS_RESERVED_171                       EQU	0x2eac
                                           MIOS_RESERVED_172                       EQU	0x2eb0
                                           MIOS_RESERVED_173                       EQU	0x2eb4
                                           MIOS_RESERVED_174                       EQU	0x2eb8
                                           MIOS_RESERVED_175                       EQU	0x2ebc
                                           MIOS_RESERVED_176                       EQU	0x2ec0
                                           MIOS_RESERVED_177                       EQU	0x2ec4
                                           MIOS_RESERVED_178                       EQU	0x2ec8
                                           MIOS_RESERVED_179                       EQU	0x2ecc
                                           MIOS_RESERVED_180                       EQU	0x2ed0
                                           MIOS_RESERVED_181                       EQU	0x2ed4
                                           MIOS_RESERVED_182                       EQU	0x2ed8
                                           MIOS_RESERVED_183                       EQU	0x2edc
                                           MIOS_RESERVED_184                       EQU	0x2ee0
                                           MIOS_RESERVED_185                       EQU	0x2ee4
                                           MIOS_RESERVED_186                       EQU	0x2ee8
                                           MIOS_RESERVED_187                       EQU	0x2eec
                                           MIOS_RESERVED_188                       EQU	0x2ef0
                                           MIOS_RESERVED_189                       EQU	0x2ef4
                                           MIOS_RESERVED_190                       EQU	0x2ef8
                                           MIOS_RESERVED_191                       EQU	0x2efc
                                           MIOS_RESERVED_192                       EQU	0x2f00
                                           MIOS_RESERVED_193                       EQU	0x2f04
                                           MIOS_RESERVED_194                       EQU	0x2f08
                                           MIOS_RESERVED_195                       EQU	0x2f0c
                                           MIOS_RESERVED_196                       EQU	0x2f10
                                           MIOS_RESERVED_197                       EQU	0x2f14
                                           MIOS_RESERVED_198                       EQU	0x2f18
                                           MIOS_RESERVED_199                       EQU	0x2f1c
                                           MIOS_RESERVED_200                       EQU	0x2f20
                                           MIOS_RESERVED_201                       EQU	0x2f24
                                           MIOS_RESERVED_202                       EQU	0x2f28
                                           MIOS_RESERVED_203                       EQU	0x2f2c
                                           MIOS_RESERVED_204                       EQU	0x2f30
                                           MIOS_RESERVED_205                       EQU	0x2f34
                                           MIOS_RESERVED_206                       EQU	0x2f38
                                           MIOS_RESERVED_207                       EQU	0x2f3c
                                           MIOS_RESERVED_208                       EQU	0x2f40
                                           MIOS_RESERVED_209                       EQU	0x2f44
                                           MIOS_RESERVED_210                       EQU	0x2f48
                                           MIOS_RESERVED_211                       EQU	0x2f4c
                                           MIOS_RESERVED_212                       EQU	0x2f50
                                           MIOS_RESERVED_213                       EQU	0x2f54
                                           MIOS_RESERVED_214                       EQU	0x2f58
                                           MIOS_RESERVED_215                       EQU	0x2f5c
                                           MIOS_RESERVED_216                       EQU	0x2f60
                                           MIOS_RESERVED_217                       EQU	0x2f64
                                           MIOS_RESERVED_218                       EQU	0x2f68
                                           MIOS_RESERVED_219                       EQU	0x2f6c
                                           MIOS_RESERVED_220                       EQU	0x2f70
                                           MIOS_RESERVED_221                       EQU	0x2f74
                                           MIOS_RESERVED_222                       EQU	0x2f78
                                           MIOS_RESERVED_223                       EQU	0x2f7c
                                           MIOS_RESERVED_224                       EQU	0x2f80
                                           MIOS_RESERVED_225                       EQU	0x2f84
                                           MIOS_RESERVED_226                       EQU	0x2f88
                                           MIOS_RESERVED_227                       EQU	0x2f8c
                                           MIOS_RESERVED_228                       EQU	0x2f90
                                           MIOS_RESERVED_229                       EQU	0x2f94
                                           MIOS_RESERVED_230                       EQU	0x2f98
                                           MIOS_RESERVED_231                       EQU	0x2f9c
                                           MIOS_RESERVED_232                       EQU	0x2fa0
                                           MIOS_RESERVED_233                       EQU	0x2fa4
                                           MIOS_RESERVED_234                       EQU	0x2fa8
                                           MIOS_RESERVED_235                       EQU	0x2fac
                                           MIOS_RESERVED_236                       EQU	0x2fb0
                                           MIOS_RESERVED_237                       EQU	0x2fb4
                                           MIOS_RESERVED_238                       EQU	0x2fb8
                                           MIOS_RESERVED_239                       EQU	0x2fbc
                                           MIOS_RESERVED_240                       EQU	0x2fc0
                                           MIOS_RESERVED_241                       EQU	0x2fc4
                                           MIOS_RESERVED_242                       EQU	0x2fc8
                                           MIOS_RESERVED_243                       EQU	0x2fcc
                                           MIOS_RESERVED_244                       EQU	0x2fd0
                                           MIOS_RESERVED_245                       EQU	0x2fd4
                                           MIOS_RESERVED_246                       EQU	0x2fd8
                                           MIOS_RESERVED_247                       EQU	0x2fdc
                                           MIOS_RESERVED_248                       EQU	0x2fe0
                                           MIOS_RESERVED_249                       EQU	0x2fe4
                                           MIOS_RESERVED_250                       EQU	0x2fe8
                                           MIOS_RESERVED_251                       EQU	0x2fec
                                           MIOS_RESERVED_252                       EQU	0x2ff0
                                           MIOS_RESERVED_253                       EQU	0x2ff4
                                           MIOS_RESERVED_254                       EQU	0x2ff8
                                           MIOS_RESERVED_255                       EQU	0x2ffc
                                           
                                           ;; ---[ user hooks (never change!) ]---
                                           #include <user_vectors.inc>
                                           ; $Id: user_vectors.inc 49 2008-01-30 21:47:31Z tk $
                                           ;
                                           ; User vectortable - contains user hooks to MIOS
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           	;; never change the origin or the order of entries!
                                           	org	0x3000
                                           _User_Init
003000   ef64     goto	0x58c8              	goto	USER_Init
003002   f02c
                                           _USER_Tick
003004   ef6a     goto	0x58d4              	goto	USER_Tick
003006   f02c
                                           _USER_Timer
003008   ef70     goto	0x58e0              	goto	USER_Timer
00300a   f02c
                                           _USER_MPROC_DebugTrigger
00300c   ef7f     goto	0x58fe              	goto	USER_MPROC_DebugTrigger
00300e   f02c
                                           _USER_DISPLAY_Init
003010   ef80     goto	0x5900              	goto	USER_DISPLAY_Init
003012   f02c
                                           _USER_DISPLAY_Tick
003014   ef86     goto	0x590c              	goto	USER_DISPLAY_Tick
003016   f02c
                                           _USER_SR_Service_Prepare
003018   efc2     goto	0x5984              	goto	USER_SR_Service_Prepare
00301a   f02c
                                           _USER_SR_Service_Finish
00301c   efd1     goto	0x59a2              	goto	USER_SR_Service_Finish
00301e   f02c
                                           _USER_DIN_NotifyToggle
003020   efb2     goto	0x5964              	goto	USER_DIN_NotifyToggle
003022   f02c
                                           _USER_ENC_NotifyChange
003024   efba     goto	0x5974              	goto	USER_ENC_NotifyChange
003026   f02c
                                           _USER_AIN_NotifyChange
003028   efe0     goto	0x59c0              	goto	USER_AIN_NotifyChange
00302a   f02c
                                           _USER_MPROC_NotifyReceivedByte
00302c   efaa     goto	0x5954              	goto	USER_MPROC_NotifyReceivedByte
00302e   f02c
                                           _USER_MPROC_NotifyTimeout
003030   efa4     goto	0x5948              	goto	USER_MPROC_NotifyTimeout
003032   f02c
                                           _USER_MPROC_NotifyReceivedEvent
003034   ef8c     goto	0x5918              	goto	USER_MPROC_NotifyReceivedEvent
003036   f02c
                                           _USER_MPROC_NotifyFoundEvent
003038   ef97     goto	0x592e              	goto	USER_MPROC_NotifyFoundEvent
00303a   f02c
                                           _USER_LCD_Init
00303c   ef36     goto	0x626c              	goto	USER_LCD_Init
00303e   f031
                                           _USER_LCD_Clear
003040   ef37     goto	0x626e              	goto	USER_LCD_Clear
003042   f031
                                           _USER_LCD_CursorSet
003044   ef38     goto	0x6270              	goto	USER_LCD_CursorSet
003046   f031
                                           _USER_LCD_PrintChar
003048   ef39     goto	0x6272              	goto	USER_LCD_PrintChar
00304a   f031
                                           _USER_MIDI_NotifyRx
00304c   efb1     goto	0x5962              	goto	USER_MIDI_NotifyRx
00304e   f02c
                                           _USER_MIDI_NotifyTx
003050   efb0     goto	0x5960              	goto	USER_MIDI_NotifyTx
003052   f02c
                                           _USER_LCD_Data
003054   ef3a     goto	0x6274              	goto	USER_LCD_Data
003056   f031
                                           _USER_LCD_Cmd
003058   ef3b     goto	0x6276              	goto	USER_LCD_Cmd
00305a   f031
                                           _USER_LCD_SpecialCharInit
00305c   ef3c     goto	0x6278              	goto	USER_LCD_SpecialCharInit
00305e   f031
                                           USER_RESERVED_25
003060   0012     return	0                 	return
003062   0000     nop                      	nop
                                           USER_RESERVED_26
003064   0012     return	0                 	return
003066   0000     nop                      	nop
                                           USER_RESERVED_27
003068   0012     return	0                 	return
00306a   0000     nop                      	nop
                                           USER_RESERVED_28
00306c   0012     return	0                 	return
00306e   0000     nop                      	nop
                                           USER_RESERVED_29
003070   0012     return	0                 	return
003072   0000     nop                      	nop
                                           USER_RESERVED_30
003074   0012     return	0                 	return
003076   0000     nop                      	nop
                                           USER_RESERVED_31
003078   0012     return	0                 	return
00307a   0000     nop                      	nop
                                           USER_RESERVED_32
00307c   0012     return	0                 	return
00307e   0000     nop                      	nop
                                           
                                           ;; ==========================================================================
                                           ;;  General Application Settings
                                           ;; ==========================================================================
                                           
                                           ;; ---[ configuration table for MIDI processor ]---
                                           #ifndef DONT_INCLUDE_MIOS_MT_TABLE
                                           ;; dummy table located in $MIOS_PATH/include/asm
                                           ;; If the application should use MT entries,
                                           ;; just add "-DDONT_INCLUDE_MIOS_MT_TABLE" to MIOS_WRAPPER_DEFINES
                                           ;; and build the table within the C program with:
                                           ;; 
                                           ;; MIOS_MT_TABLE {
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x10), // CC#16
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x11), // CC#17
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x12), // CC#18
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x13), // CC#19
                                           ;;   MIOS_MT_EOT
                                           ;; };
                                           ;; 
                                           ;; The MIOS_MT_* macros are defined in $MIOS_PATH/include/c/cmios.h
                                           ;; 
                                           ;; Note that due to the inflexibility of the MT Table concept, it isn't
                                           ;; recommented for new designs
                                           #include <mios_mt_table.inc>
                                           ; $Id: mios_mt_table.inc 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; "Dummy" MIDI Trigger Configuaration Table
                                           ; 
                                           ; Should be included by the application, if the MIDI processor feature
                                           ; is not used in order to pre-initialize the table area with EOT's
                                           ;
                                           ; Note: due to the inflexible concept (e.g. handling of Note On/Off events),
                                           ; the usage of this function is not recommented for new designs - please parse 
                                           ; MIDI events locally within the application.
                                           ;
                                           ;
                                           	org	0x3080		; never change the origin!
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; The MIDI Trigger table maps incoming MIDI events to control elements
                                           ;; (pots/faders, encoders, buttons, LEDs, ...)
                                           ;; 
                                           ;; After the MIOS MIDI processor (MPROC) has received a complete event, it
                                           ;; searches in this table for a matching entry and calls USER_MPROC_NotifyFoundEvent
                                           ;; with the table index in WREG and the MIDI event in MIOS_PARAMETER[123]
                                           ;; 
                                           ;; Note also that the MIDI processor stops scanning the table after
                                           ;; the first MT_EOT entry
                                           ;; 
                                           ;; Note2: never change the origin (memory location) of this table!
                                           ;; 
                                           ;; Optionally this table can also be used to define events, which should be
                                           ;; transmitted (Example: see example_ain64_din128_dout128), so that incoming
                                           ;; and outgoing events are located at one place
                                           ;; 
                                           ;; The table *must* contain 256 entries. Unused entries should be filled with
                                           ;; MT_EOT.
                                           ;; --------------------------------------------------------------------------
                                           
                                           	;; MIDI Trigger entry structure
                                           MT_ENTRY MACRO event_0, event_1
                                           	dw	(event_1 << 8) | event_0
                                           	ENDM
                                           
                                           MT_EOT	MACRO
003080   ffff     dw	0xffff  ;unknown opcode 	dw	0xffff
003082   ffff     dw	0xffff  ;unknown opcode 
003084   ffff     dw	0xffff  ;unknown opcode 
003086   ffff     dw	0xffff  ;unknown opcode 
003088   ffff     dw	0xffff  ;unknown opcode 
00308a   ffff     dw	0xffff  ;unknown opcode 
00308c   ffff     dw	0xffff  ;unknown opcode 
00308e   ffff     dw	0xffff  ;unknown opcode 
003090   ffff     dw	0xffff  ;unknown opcode 
003092   ffff     dw	0xffff  ;unknown opcode 
003094   ffff     dw	0xffff  ;unknown opcode 
003096   ffff     dw	0xffff  ;unknown opcode 
003098   ffff     dw	0xffff  ;unknown opcode 
00309a   ffff     dw	0xffff  ;unknown opcode 
00309c   ffff     dw	0xffff  ;unknown opcode 
00309e   ffff     dw	0xffff  ;unknown opcode 
0030a0   ffff     dw	0xffff  ;unknown opcode 
0030a2   ffff     dw	0xffff  ;unknown opcode 
0030a4   ffff     dw	0xffff  ;unknown opcode 
0030a6   ffff     dw	0xffff  ;unknown opcode 
0030a8   ffff     dw	0xffff  ;unknown opcode 
0030aa   ffff     dw	0xffff  ;unknown opcode 
0030ac   ffff     dw	0xffff  ;unknown opcode 
0030ae   ffff     dw	0xffff  ;unknown opcode 
0030b0   ffff     dw	0xffff  ;unknown opcode 
0030b2   ffff     dw	0xffff  ;unknown opcode 
0030b4   ffff     dw	0xffff  ;unknown opcode 
0030b6   ffff     dw	0xffff  ;unknown opcode 
0030b8   ffff     dw	0xffff  ;unknown opcode 
0030ba   ffff     dw	0xffff  ;unknown opcode 
0030bc   ffff     dw	0xffff  ;unknown opcode 
0030be   ffff     dw	0xffff  ;unknown opcode 
0030c0   ffff     dw	0xffff  ;unknown opcode 
0030c2   ffff     dw	0xffff  ;unknown opcode 
0030c4   ffff     dw	0xffff  ;unknown opcode 
0030c6   ffff     dw	0xffff  ;unknown opcode 
0030c8   ffff     dw	0xffff  ;unknown opcode 
0030ca   ffff     dw	0xffff  ;unknown opcode 
0030cc   ffff     dw	0xffff  ;unknown opcode 
0030ce   ffff     dw	0xffff  ;unknown opcode 
0030d0   ffff     dw	0xffff  ;unknown opcode 
0030d2   ffff     dw	0xffff  ;unknown opcode 
0030d4   ffff     dw	0xffff  ;unknown opcode 
0030d6   ffff     dw	0xffff  ;unknown opcode 
0030d8   ffff     dw	0xffff  ;unknown opcode 
0030da   ffff     dw	0xffff  ;unknown opcode 
0030dc   ffff     dw	0xffff  ;unknown opcode 
0030de   ffff     dw	0xffff  ;unknown opcode 
0030e0   ffff     dw	0xffff  ;unknown opcode 
0030e2   ffff     dw	0xffff  ;unknown opcode 
0030e4   ffff     dw	0xffff  ;unknown opcode 
0030e6   ffff     dw	0xffff  ;unknown opcode 
0030e8   ffff     dw	0xffff  ;unknown opcode 
0030ea   ffff     dw	0xffff  ;unknown opcode 
0030ec   ffff     dw	0xffff  ;unknown opcode 
0030ee   ffff     dw	0xffff  ;unknown opcode 
0030f0   ffff     dw	0xffff  ;unknown opcode 
0030f2   ffff     dw	0xffff  ;unknown opcode 
0030f4   ffff     dw	0xffff  ;unknown opcode 
0030f6   ffff     dw	0xffff  ;unknown opcode 
0030f8   ffff     dw	0xffff  ;unknown opcode 
0030fa   ffff     dw	0xffff  ;unknown opcode 
0030fc   ffff     dw	0xffff  ;unknown opcode 
0030fe   ffff     dw	0xffff  ;unknown opcode 
003100   ffff     dw	0xffff  ;unknown opcode 
003102   ffff     dw	0xffff  ;unknown opcode 
003104   ffff     dw	0xffff  ;unknown opcode 
003106   ffff     dw	0xffff  ;unknown opcode 
003108   ffff     dw	0xffff  ;unknown opcode 
00310a   ffff     dw	0xffff  ;unknown opcode 
00310c   ffff     dw	0xffff  ;unknown opcode 
00310e   ffff     dw	0xffff  ;unknown opcode 
003110   ffff     dw	0xffff  ;unknown opcode 
003112   ffff     dw	0xffff  ;unknown opcode 
003114   ffff     dw	0xffff  ;unknown opcode 
003116   ffff     dw	0xffff  ;unknown opcode 
003118   ffff     dw	0xffff  ;unknown opcode 
00311a   ffff     dw	0xffff  ;unknown opcode 
00311c   ffff     dw	0xffff  ;unknown opcode 
00311e   ffff     dw	0xffff  ;unknown opcode 
003120   ffff     dw	0xffff  ;unknown opcode 
003122   ffff     dw	0xffff  ;unknown opcode 
003124   ffff     dw	0xffff  ;unknown opcode 
003126   ffff     dw	0xffff  ;unknown opcode 
003128   ffff     dw	0xffff  ;unknown opcode 
00312a   ffff     dw	0xffff  ;unknown opcode 
00312c   ffff     dw	0xffff  ;unknown opcode 
00312e   ffff     dw	0xffff  ;unknown opcode 
003130   ffff     dw	0xffff  ;unknown opcode 
003132   ffff     dw	0xffff  ;unknown opcode 
003134   ffff     dw	0xffff  ;unknown opcode 
003136   ffff     dw	0xffff  ;unknown opcode 
003138   ffff     dw	0xffff  ;unknown opcode 
00313a   ffff     dw	0xffff  ;unknown opcode 
00313c   ffff     dw	0xffff  ;unknown opcode 
00313e   ffff     dw	0xffff  ;unknown opcode 
003140   ffff     dw	0xffff  ;unknown opcode 
003142   ffff     dw	0xffff  ;unknown opcode 
003144   ffff     dw	0xffff  ;unknown opcode 
003146   ffff     dw	0xffff  ;unknown opcode 
003148   ffff     dw	0xffff  ;unknown opcode 
00314a   ffff     dw	0xffff  ;unknown opcode 
00314c   ffff     dw	0xffff  ;unknown opcode 
00314e   ffff     dw	0xffff  ;unknown opcode 
003150   ffff     dw	0xffff  ;unknown opcode 
003152   ffff     dw	0xffff  ;unknown opcode 
003154   ffff     dw	0xffff  ;unknown opcode 
003156   ffff     dw	0xffff  ;unknown opcode 
003158   ffff     dw	0xffff  ;unknown opcode 
00315a   ffff     dw	0xffff  ;unknown opcode 
00315c   ffff     dw	0xffff  ;unknown opcode 
00315e   ffff     dw	0xffff  ;unknown opcode 
003160   ffff     dw	0xffff  ;unknown opcode 
003162   ffff     dw	0xffff  ;unknown opcode 
003164   ffff     dw	0xffff  ;unknown opcode 
003166   ffff     dw	0xffff  ;unknown opcode 
003168   ffff     dw	0xffff  ;unknown opcode 
00316a   ffff     dw	0xffff  ;unknown opcode 
00316c   ffff     dw	0xffff  ;unknown opcode 
00316e   ffff     dw	0xffff  ;unknown opcode 
003170   ffff     dw	0xffff  ;unknown opcode 
003172   ffff     dw	0xffff  ;unknown opcode 
003174   ffff     dw	0xffff  ;unknown opcode 
003176   ffff     dw	0xffff  ;unknown opcode 
003178   ffff     dw	0xffff  ;unknown opcode 
00317a   ffff     dw	0xffff  ;unknown opcode 
00317c   ffff     dw	0xffff  ;unknown opcode 
00317e   ffff     dw	0xffff  ;unknown opcode 
003180   ffff     dw	0xffff  ;unknown opcode 
003182   ffff     dw	0xffff  ;unknown opcode 
003184   ffff     dw	0xffff  ;unknown opcode 
003186   ffff     dw	0xffff  ;unknown opcode 
003188   ffff     dw	0xffff  ;unknown opcode 
00318a   ffff     dw	0xffff  ;unknown opcode 
00318c   ffff     dw	0xffff  ;unknown opcode 
00318e   ffff     dw	0xffff  ;unknown opcode 
003190   ffff     dw	0xffff  ;unknown opcode 
003192   ffff     dw	0xffff  ;unknown opcode 
003194   ffff     dw	0xffff  ;unknown opcode 
003196   ffff     dw	0xffff  ;unknown opcode 
003198   ffff     dw	0xffff  ;unknown opcode 
00319a   ffff     dw	0xffff  ;unknown opcode 
00319c   ffff     dw	0xffff  ;unknown opcode 
00319e   ffff     dw	0xffff  ;unknown opcode 
0031a0   ffff     dw	0xffff  ;unknown opcode 
0031a2   ffff     dw	0xffff  ;unknown opcode 
0031a4   ffff     dw	0xffff  ;unknown opcode 
0031a6   ffff     dw	0xffff  ;unknown opcode 
0031a8   ffff     dw	0xffff  ;unknown opcode 
0031aa   ffff     dw	0xffff  ;unknown opcode 
0031ac   ffff     dw	0xffff  ;unknown opcode 
0031ae   ffff     dw	0xffff  ;unknown opcode 
0031b0   ffff     dw	0xffff  ;unknown opcode 
0031b2   ffff     dw	0xffff  ;unknown opcode 
0031b4   ffff     dw	0xffff  ;unknown opcode 
0031b6   ffff     dw	0xffff  ;unknown opcode 
0031b8   ffff     dw	0xffff  ;unknown opcode 
0031ba   ffff     dw	0xffff  ;unknown opcode 
0031bc   ffff     dw	0xffff  ;unknown opcode 
0031be   ffff     dw	0xffff  ;unknown opcode 
0031c0   ffff     dw	0xffff  ;unknown opcode 
0031c2   ffff     dw	0xffff  ;unknown opcode 
0031c4   ffff     dw	0xffff  ;unknown opcode 
0031c6   ffff     dw	0xffff  ;unknown opcode 
0031c8   ffff     dw	0xffff  ;unknown opcode 
0031ca   ffff     dw	0xffff  ;unknown opcode 
0031cc   ffff     dw	0xffff  ;unknown opcode 
0031ce   ffff     dw	0xffff  ;unknown opcode 
0031d0   ffff     dw	0xffff  ;unknown opcode 
0031d2   ffff     dw	0xffff  ;unknown opcode 
0031d4   ffff     dw	0xffff  ;unknown opcode 
0031d6   ffff     dw	0xffff  ;unknown opcode 
0031d8   ffff     dw	0xffff  ;unknown opcode 
0031da   ffff     dw	0xffff  ;unknown opcode 
0031dc   ffff     dw	0xffff  ;unknown opcode 
0031de   ffff     dw	0xffff  ;unknown opcode 
0031e0   ffff     dw	0xffff  ;unknown opcode 
0031e2   ffff     dw	0xffff  ;unknown opcode 
0031e4   ffff     dw	0xffff  ;unknown opcode 
0031e6   ffff     dw	0xffff  ;unknown opcode 
0031e8   ffff     dw	0xffff  ;unknown opcode 
0031ea   ffff     dw	0xffff  ;unknown opcode 
0031ec   ffff     dw	0xffff  ;unknown opcode 
0031ee   ffff     dw	0xffff  ;unknown opcode 
0031f0   ffff     dw	0xffff  ;unknown opcode 
0031f2   ffff     dw	0xffff  ;unknown opcode 
0031f4   ffff     dw	0xffff  ;unknown opcode 
0031f6   ffff     dw	0xffff  ;unknown opcode 
0031f8   ffff     dw	0xffff  ;unknown opcode 
0031fa   ffff     dw	0xffff  ;unknown opcode 
0031fc   ffff     dw	0xffff  ;unknown opcode 
0031fe   ffff     dw	0xffff  ;unknown opcode 
003200   ffff     dw	0xffff  ;unknown opcode 
003202   ffff     dw	0xffff  ;unknown opcode 
003204   ffff     dw	0xffff  ;unknown opcode 
003206   ffff     dw	0xffff  ;unknown opcode 
003208   ffff     dw	0xffff  ;unknown opcode 
00320a   ffff     dw	0xffff  ;unknown opcode 
00320c   ffff     dw	0xffff  ;unknown opcode 
00320e   ffff     dw	0xffff  ;unknown opcode 
003210   ffff     dw	0xffff  ;unknown opcode 
003212   ffff     dw	0xffff  ;unknown opcode 
003214   ffff     dw	0xffff  ;unknown opcode 
003216   ffff     dw	0xffff  ;unknown opcode 
003218   ffff     dw	0xffff  ;unknown opcode 
00321a   ffff     dw	0xffff  ;unknown opcode 
00321c   ffff     dw	0xffff  ;unknown opcode 
00321e   ffff     dw	0xffff  ;unknown opcode 
003220   ffff     dw	0xffff  ;unknown opcode 
003222   ffff     dw	0xffff  ;unknown opcode 
003224   ffff     dw	0xffff  ;unknown opcode 
003226   ffff     dw	0xffff  ;unknown opcode 
003228   ffff     dw	0xffff  ;unknown opcode 
00322a   ffff     dw	0xffff  ;unknown opcode 
00322c   ffff     dw	0xffff  ;unknown opcode 
00322e   ffff     dw	0xffff  ;unknown opcode 
003230   ffff     dw	0xffff  ;unknown opcode 
003232   ffff     dw	0xffff  ;unknown opcode 
003234   ffff     dw	0xffff  ;unknown opcode 
003236   ffff     dw	0xffff  ;unknown opcode 
003238   ffff     dw	0xffff  ;unknown opcode 
00323a   ffff     dw	0xffff  ;unknown opcode 
00323c   ffff     dw	0xffff  ;unknown opcode 
00323e   ffff     dw	0xffff  ;unknown opcode 
003240   ffff     dw	0xffff  ;unknown opcode 
003242   ffff     dw	0xffff  ;unknown opcode 
003244   ffff     dw	0xffff  ;unknown opcode 
003246   ffff     dw	0xffff  ;unknown opcode 
003248   ffff     dw	0xffff  ;unknown opcode 
00324a   ffff     dw	0xffff  ;unknown opcode 
00324c   ffff     dw	0xffff  ;unknown opcode 
00324e   ffff     dw	0xffff  ;unknown opcode 
003250   ffff     dw	0xffff  ;unknown opcode 
003252   ffff     dw	0xffff  ;unknown opcode 
003254   ffff     dw	0xffff  ;unknown opcode 
003256   ffff     dw	0xffff  ;unknown opcode 
003258   ffff     dw	0xffff  ;unknown opcode 
00325a   ffff     dw	0xffff  ;unknown opcode 
00325c   ffff     dw	0xffff  ;unknown opcode 
00325e   ffff     dw	0xffff  ;unknown opcode 
003260   ffff     dw	0xffff  ;unknown opcode 
003262   ffff     dw	0xffff  ;unknown opcode 
003264   ffff     dw	0xffff  ;unknown opcode 
003266   ffff     dw	0xffff  ;unknown opcode 
003268   ffff     dw	0xffff  ;unknown opcode 
00326a   ffff     dw	0xffff  ;unknown opcode 
00326c   ffff     dw	0xffff  ;unknown opcode 
00326e   ffff     dw	0xffff  ;unknown opcode 
003270   ffff     dw	0xffff  ;unknown opcode 
003272   ffff     dw	0xffff  ;unknown opcode 
003274   ffff     dw	0xffff  ;unknown opcode 
003276   ffff     dw	0xffff  ;unknown opcode 
003278   ffff     dw	0xffff  ;unknown opcode 
00327a   ffff     dw	0xffff  ;unknown opcode 
00327c   ffff     dw	0xffff  ;unknown opcode 
00327e   ffff     dw	0xffff  ;unknown opcode 
                                           	ENDM
                                           
                                           
                                           _MIOS_MPROC_EVENT_TABLE
                                           MIOS_MPROC_EVENT_TABLE
                                           	;; entry 0x00-0x0f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x10-0x1f	
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x20-0x2f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	
                                           	;; entry 0x30-0x3f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	
                                           	;; entry 0x40-0x4f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	
                                           	;; entry 0x50-0x5f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           		
                                           	;; entry 0x60-0x6f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x70-0x7f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x80-0x8f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x90-0x9f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xa0-0xaf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xb1-0xbf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xc0-0xcf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xd0-0xdf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xe0-0xef
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xf0-0xff
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           #endif
                                           
                                           ;; ---[ configuration table for rotary encoders ]---
                                           #ifndef DONT_INCLUDE_MIOS_ENC_TABLE
                                           ;; dummy table located in $MIOS_PATH/include/asm
                                           ;; If the application should use ENC entries,
                                           ;; just add "-DDONT_INCLUDE_MIOS_ENC_TABLE" to MIOS_WRAPPER_DEFINES
                                           ;; and build the table within the C program with:
                                           ;; 
                                           ;; MIOS_ENC_TABLE {
                                           ;;              // sr pin mode
                                           ;;   MIOS_ENC_ENTRY(1, 0, MIOS_ENC_MODE_DETENTED), // VPot #1
                                           ;;   MIOS_ENC_ENTRY(1, 2, MIOS_ENC_MODE_DETENTED), // VPot #2
                                           ;;   MIOS_ENC_ENTRY(1, 4, MIOS_ENC_MODE_DETENTED), // VPot #3
                                           ;;   MIOS_ENC_EOT
                                           ;; };
                                           ;; 
                                           ;; The MIOS_MT_* macros are defined in $MIOS_PATH/include/c/cmios.h
                                           #include <mios_enc_table.inc>
                                           ; $Id: mios_enc_table.inc 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; "Dummy" Configuration Table for Rotary Encoders
                                           ; 
                                           ; Should be included by the application, if no rotary encoders are connected
                                           ; in order to pre-initialize the table area with EOT's
                                           ; 
                                           ; ==========================================================================
                                           
                                           	org	0x3280		; never change the origin!
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; In this table DIN pins have to be assigned to rotary encoders for the
                                           ;; MIOS_ENC driver 
                                           ;; 
                                           ;; up to 64 entries are provided
                                           ;; 
                                           ;; The table must be terminated with an ENC_EOT entry. Unused entries should
                                           ;; be filled with ENC_EOT
                                           ;; 
                                           ;; ENC_ENTRY provides following parameters
                                           ;;    o first parameter: number of shift register - 1, 2, 3, ... 16
                                           ;;    o second parameter: number of pin; since two pins are necessary
                                           ;;      for each encoder, an even number is expected: 0, 2, 4 or 6
                                           ;;    o the third parameter contains the encoder mode:
                                           ;;      either MIOS_ENC_MODE_NON_DETENTED
                                           ;;          or MIOS_ENC_MODE_DETENTED
                                           ;;          or MIOS_ENC_MODE_DETENTED2
                                           ;;          or MIOS_ENC_MODE_DETENTED3
                                           ;;
                                           ;; Configuration Examples:
                                           ;;    ENC_ENTRY  1,  0,  MIOS_ENC_MODE_NON_DETENTED    ; non-detented encoder at pin 0 and 1 of SR 1
                                           ;;    ENC_ENTRY  1,  2,  MIOS_ENC_MODE_DETENTED        ; detented encoder at pin 2 and 3 of SR 1
                                           ;;    ENC_ENTRY  9,  6,  MIOS_ENC_MODE_NON_DETENTED    ; non-detented encoder at pin 6 and 7 of SR 9
                                           ;; --------------------------------------------------------------------------
                                           
                                           	;; encoder entry structure
                                           ENC_ENTRY MACRO sr, din_0, mode
                                           	dw	(mode << 8) | (din_0 + 8*(sr-1))
                                           	ENDM	
                                           ENC_EOT	MACRO
003280   ffff     dw	0xffff  ;unknown opcode 	dw	0xffff
003282   ffff     dw	0xffff  ;unknown opcode 
003284   ffff     dw	0xffff  ;unknown opcode 
003286   ffff     dw	0xffff  ;unknown opcode 
003288   ffff     dw	0xffff  ;unknown opcode 
00328a   ffff     dw	0xffff  ;unknown opcode 
00328c   ffff     dw	0xffff  ;unknown opcode 
00328e   ffff     dw	0xffff  ;unknown opcode 
003290   ffff     dw	0xffff  ;unknown opcode 
003292   ffff     dw	0xffff  ;unknown opcode 
003294   ffff     dw	0xffff  ;unknown opcode 
003296   ffff     dw	0xffff  ;unknown opcode 
003298   ffff     dw	0xffff  ;unknown opcode 
00329a   ffff     dw	0xffff  ;unknown opcode 
00329c   ffff     dw	0xffff  ;unknown opcode 
00329e   ffff     dw	0xffff  ;unknown opcode 
0032a0   ffff     dw	0xffff  ;unknown opcode 
0032a2   ffff     dw	0xffff  ;unknown opcode 
0032a4   ffff     dw	0xffff  ;unknown opcode 
0032a6   ffff     dw	0xffff  ;unknown opcode 
0032a8   ffff     dw	0xffff  ;unknown opcode 
0032aa   ffff     dw	0xffff  ;unknown opcode 
0032ac   ffff     dw	0xffff  ;unknown opcode 
0032ae   ffff     dw	0xffff  ;unknown opcode 
0032b0   ffff     dw	0xffff  ;unknown opcode 
0032b2   ffff     dw	0xffff  ;unknown opcode 
0032b4   ffff     dw	0xffff  ;unknown opcode 
0032b6   ffff     dw	0xffff  ;unknown opcode 
0032b8   ffff     dw	0xffff  ;unknown opcode 
0032ba   ffff     dw	0xffff  ;unknown opcode 
0032bc   ffff     dw	0xffff  ;unknown opcode 
0032be   ffff     dw	0xffff  ;unknown opcode 
0032c0   ffff     dw	0xffff  ;unknown opcode 
0032c2   ffff     dw	0xffff  ;unknown opcode 
0032c4   ffff     dw	0xffff  ;unknown opcode 
0032c6   ffff     dw	0xffff  ;unknown opcode 
0032c8   ffff     dw	0xffff  ;unknown opcode 
0032ca   ffff     dw	0xffff  ;unknown opcode 
0032cc   ffff     dw	0xffff  ;unknown opcode 
0032ce   ffff     dw	0xffff  ;unknown opcode 
0032d0   ffff     dw	0xffff  ;unknown opcode 
0032d2   ffff     dw	0xffff  ;unknown opcode 
0032d4   ffff     dw	0xffff  ;unknown opcode 
0032d6   ffff     dw	0xffff  ;unknown opcode 
0032d8   ffff     dw	0xffff  ;unknown opcode 
0032da   ffff     dw	0xffff  ;unknown opcode 
0032dc   ffff     dw	0xffff  ;unknown opcode 
0032de   ffff     dw	0xffff  ;unknown opcode 
0032e0   ffff     dw	0xffff  ;unknown opcode 
0032e2   ffff     dw	0xffff  ;unknown opcode 
0032e4   ffff     dw	0xffff  ;unknown opcode 
0032e6   ffff     dw	0xffff  ;unknown opcode 
0032e8   ffff     dw	0xffff  ;unknown opcode 
0032ea   ffff     dw	0xffff  ;unknown opcode 
0032ec   ffff     dw	0xffff  ;unknown opcode 
0032ee   ffff     dw	0xffff  ;unknown opcode 
0032f0   ffff     dw	0xffff  ;unknown opcode 
0032f2   ffff     dw	0xffff  ;unknown opcode 
0032f4   ffff     dw	0xffff  ;unknown opcode 
0032f6   ffff     dw	0xffff  ;unknown opcode 
0032f8   ffff     dw	0xffff  ;unknown opcode 
0032fa   ffff     dw	0xffff  ;unknown opcode 
0032fc   ffff     dw	0xffff  ;unknown opcode 
0032fe   ffff     dw	0xffff  ;unknown opcode 
                                           	ENDM
                                           
                                           _MIOS_ENC_PIN_TABLE
                                           MIOS_ENC_PIN_TABLE
                                           	;; encoders 1-16
                                           	;;        SR  Pin  Mode
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           	;; encoders 17-32
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           	;; encoders 33-48
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           	;; encoders 49-64
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           #endif
                                           
                                           	org	0x3300		; never change the origin!
                                           
                                           ; Don't enable this --- its only used by a special testcase which checks 
                                           ; parameter passing on functions which are difficult to verify with
                                           ; directed tests
                                           #ifndef PARAMETER_PASSING_TEST
                                           #define PARAMETER_PASSING_TEST 0
                                           #endif
                                           
                                           ;; ==========================================================================
                                           ;;  Export MIOS variables
                                           ;; ==========================================================================
                                           	global	_MIOS_BOX_CFG0
                                           	global	_MIOS_BOX_CFG1
                                           	global	_MIOS_BOX_STAT
                                           	global	_MIOS_PARAMETER1
                                           	global	_MIOS_PARAMETER2
                                           	global	_MIOS_PARAMETER3
                                           
                                           MIOS_VARIABLES		udata	0x0000
                                           _MIOS_BOX_CFG0		res	1
                                           _MIOS_BOX_CFG1		res	1
                                           _MIOS_BOX_STAT		res	1
                                           _MIOS_PARAMETER1	res	1
                                           _MIOS_PARAMETER2	res	1
                                           _MIOS_PARAMETER3	res	1
                                           _TMP1			res	1
                                           _TMP2			res	1
                                           _TMP3			res	1
                                           _TMP4			res	1
                                           _TMP5			res	1
                                           _IRQ_TMP1		res	1
                                           _IRQ_TMP2		res	1
                                           _IRQ_TMP3		res	1
                                           _IRQ_TMP4		res	1
                                           _IRQ_TMP5		res	1
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  USER_LCD_* vectors defined externally in $MIOS_PATH/modules/app_lcd/*/*.asm
                                           ;; ==========================================================================
                                           	extern	USER_LCD_Init
                                           	extern	USER_LCD_Data
                                           	extern	USER_LCD_Cmd
                                           	extern	USER_LCD_Clear
                                           	extern	USER_LCD_CursorSet
                                           	extern	USER_LCD_PrintChar
                                           	extern	USER_LCD_SpecialCharInit
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  All MIOS hooks in one file
                                           ;; ==========================================================================
                                           
                                           MIOS_WRAPPER_CODE	code
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS after startup to initialize the 
                                           ;;  application
                                           ;; --------------------------------------------------------------------------
                                           USER_Init
                                           	extern	_Init
                                           
0058c8   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
0058ca   f07f
0058cc   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
0058ce   f07f
0058d0   ef55     goto	0x5eaa              	goto	_Init	
0058d2   f02f
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS in the mainloop when nothing else is to do
                                           ;; --------------------------------------------------------------------------
                                           USER_Tick
                                           	extern	_Tick
                                           
0058d4   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
0058d6   f07f
0058d8   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
0058da   f07f
0058dc   ef80     goto	0x3300              	goto	_Tick
0058de   f019
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is periodically called by MIOS. The frequency has to be
                                           ;;  initialized with MIOS_Timer_Set
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible!
                                           ;; --------------------------------------------------------------------------
                                           USER_Timer
                                           	extern	_Timer
                                           
0058e0   ee23     lfsr	0x2, 0x33f          	lfsr	FSR2, STACK_IRQ_HEAD	; initialize IRQ stack
0058e2   f03f
0058e4   cfe9     movff	0xfe9, 0xfdd       	movff	FSR0L, POSTDEC2		; save FSR0[LH] on IRQ stack
0058e6   ffdd
0058e8   cfea     movff	0xfea, 0xfdd       	movff	FSR0H, POSTDEC2
0058ea   ffdd
0058ec   ee03     lfsr	0, 0x33d            	lfsr	FSR0, STACK_IRQ_HEAD-2	; write stack pointer also to FSR0
0058ee   f03d
0058f0   eca2     call	0x6344, 0           	call	_Timer			; call C hook
0058f2   f031
0058f4   c33f     movff	0x33f, 0xfe9       	movff	STACK_IRQ_HEAD-0, FSR0L	; restore FSR0[LH] directly from memory (more fail save)
0058f6   ffe9
0058f8   c33e     movff	0x33e, 0xfea       	movff	STACK_IRQ_HEAD-1, FSR0H	; restore FSR0[LH] directly from memory (more fail save)
0058fa   ffea
0058fc   0012     return	0                 	return
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a debug command has been received
                                           ;;  via SysEx
                                           ;;  Input:
                                           ;;     o WREG, MIOS_PARAMETER1, MIOS_PARAMETER2, MIOS_PARAMETER3 like
                                           ;;       specified in the debug command
                                           ;;  Output:
                                           ;;     o return values WREG, MIOS_PARAMETER1, MIOS_PARAMETER2, MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_DebugTrigger
                                           	;; not really required for C programs
0058fe   0012     return	0                 	return
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the display content should be 
                                           ;;  initialized. Thats the case during startup and after a temporary message
                                           ;;  has been printed on the screen
                                           ;; --------------------------------------------------------------------------
                                           USER_DISPLAY_Init
                                           	extern	_DISPLAY_Init
                                           
005900   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
005902   f07f
005904   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
005906   f07f
005908   efbb     goto	0x5f76              	goto	_DISPLAY_Init
00590a   f02f
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called in the mainloop when no temporary message is shown
                                           ;;  on screen. Print the realtime messages here
                                           ;; --------------------------------------------------------------------------
                                           USER_DISPLAY_Tick
                                           	extern	_DISPLAY_Tick
                                           
00590c   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
00590e   f07f
005910   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
005912   f07f
005914   ef6c     goto	0x60d8              	goto	_DISPLAY_Tick
005916   f030
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a complete MIDI event has been received
                                           ;;  Input:
                                           ;;     o first  MIDI event byte in MIOS_PARAMETER1
                                           ;;     o second MIDI event byte in MIOS_PARAMETER2
                                           ;;     o third  MIDI event byte in MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyReceivedEvent
                                           	extern	_MPROC_NotifyReceivedEvnt
                                           
005918   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
00591a   f07f
00591c   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
00591e   f07f
                                           
005920   c005     movff	0x5, 0xfed         	movff	MIOS_PARAMETER3, POSTDEC0
005922   ffed
005924   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
005926   ffed
005928   5003     movf	0x3, 0, 0           	movf	MIOS_PARAMETER1, W
00592a   efe6     goto	0x4bcc              	goto	_MPROC_NotifyReceivedEvnt
00592c   f025
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI event has been received
                                           ;;  which has been specified in the CONFIG_MIDI_IN table
                                           ;;  Input:
                                           ;;     o number of entry in WREG
                                           ;;     o first  MIDI event byte in MIOS_PARAMETER1
                                           ;;     o second MIDI event byte in MIOS_PARAMETER2
                                           ;;     o third  MIDI event byte in MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyFoundEvent
                                           	extern	_MPROC_NotifyFoundEvent
                                           
00592e   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
005930   f07f
005932   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
005934   f07f
                                           
005936   c005     movff	0x5, 0xfed         	movff	MIOS_PARAMETER3, POSTDEC0
005938   ffed
00593a   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
00593c   ffed
00593e   c003     movff	0x3, 0xfed         	movff	MIOS_PARAMETER1, POSTDEC0
005940   ffed
005942   6eed     movwf	0xed, 0            	movwf	POSTDEC0		; TK: required for SDCC 2.5.0, don't know why...
                                           	;; entry number still in wreg
005944   ef52     goto	0x62a4              	goto	_MPROC_NotifyFoundEvent
005946   f031
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI event has not been completly
                                           ;;  received within 2 seconds
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyTimeout
                                           	extern	_MPROC_NotifyTimeout
                                           
005948   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
00594a   f07f
00594c   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
00594e   f07f
005950   efa1     goto	0x6342              	goto	_MPROC_NotifyTimeout
005952   f031
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI byte has been received
                                           ;;  Input:
                                           ;;     o received MIDI byte in WREG and MIOS_PARAMETER1
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyReceivedByte
                                           	extern	_MPROC_NotifyReceivedByte
                                           
005954   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
005956   f07f
005958   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
00595a   f07f
                                           
                                           	;; MIDI byte still in WREG
00595c   ef4b     goto	0x6296              	goto	_MPROC_NotifyReceivedByte
00595e   f031
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS before the transfer of a MIDI byte. 
                                           ;;  It can be used to monitor the Tx activity or to do any other actions
                                           ;;  (e.g. to switch a pin for multiplexed MIDI Outs) before the byte will 
                                           ;;  be sent.
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible!
                                           ;;  Input:
                                           ;;     o transmitted byte in WREG
                                           ;; --------------------------------------------------------------------------
                                           USER_MIDI_NotifyTx
                                           	;; too time consuming for C programs --- should be handled so fast as
                                           	;; possible and therefore serviced in assembler
                                           
                                           	;; disabled by default
                                           	;; enable it if external function is available
                                           #ifdef ENABLE_MIDI_NOTIFY_TX
                                           	extern	_MIDI_NotifyTx
                                           	goto	_MIDI_NotifyTx
                                           #else
005960   0012     return	0                 	return
                                           #endif
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI byte has been received.
                                           ;;  It can be used to monitor the Rx activity or to do any action - e.g.
                                           ;;  to react on realtime events like MIDI clock (0xf8) with a minimum latency
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible!
                                           ;;  Input:
                                           ;;     o received byte in WREG
                                           ;; --------------------------------------------------------------------------
                                           USER_MIDI_NotifyRx
                                           	;; too time consuming for C programs --- should be handled so fast as
                                           	;; possible and therefore serviced in assembler
                                           
                                           	;; disabled by default
                                           	;; enable it if external function is available
                                           #ifdef ENABLE_MIDI_NOTIFY_RX
                                           	extern	_MIDI_NotifyRx
                                           	goto	_MIDI_NotifyRx
                                           #else
005962   0012     return	0                 	return
                                           #endif
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when an button has been toggled
                                           ;;  Input:
                                           ;;     o Button number in WREG and MIOS_PARAMETER1
                                           ;;     o Button value MIOS_PARAMETER2:
                                           ;;       - 1 if button has been released (=5V)
                                           ;;       - 0 if button has been pressed (=0V)
                                           ;; --------------------------------------------------------------------------
                                           USER_DIN_NotifyToggle
                                           	extern	_DIN_NotifyToggle
                                           
005964   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
005966   f07f
005968   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
00596a   f07f
                                           
00596c   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
00596e   ffed
                                           	;; button number still in WREG
005970   ef13     goto	0x5226              	goto	_DIN_NotifyToggle
005972   f029
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when an encoder has been moved
                                           ;;  Input:
                                           ;;     o Encoder number in WREG and MIOS_PARAMETER1
                                           ;;     o signed incrementer value in MIOS_PARAMETER2:
                                           ;;       - is positive when encoder has been turned clockwise
                                           ;;       - is negative when encoder has been turned counter clockwise
                                           ;; --------------------------------------------------------------------------
                                           USER_ENC_NotifyChange
                                           	extern	_ENC_NotifyChange
                                           
005974   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
005976   f07f
005978   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
00597a   f07f
                                           
00597c   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
00597e   ffed
                                           	;; encoder number still in WREG
005980   ef44     goto	0x6288              	goto	_ENC_NotifyChange
005982   f031
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS before the shift register are loaded
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible
                                           ;; --------------------------------------------------------------------------
                                           USER_SR_Service_Prepare
                                           	extern	_SR_Service_Prepare
                                           
005984   ee23     lfsr	0x2, 0x33f          	lfsr	FSR2, STACK_IRQ_HEAD	; initialize IRQ stack
005986   f03f
005988   cfe9     movff	0xfe9, 0xfdd       	movff	FSR0L, POSTDEC2		; save FSR0[LH] on IRQ stack
00598a   ffdd
00598c   cfea     movff	0xfea, 0xfdd       	movff	FSR0H, POSTDEC2
00598e   ffdd
005990   ee03     lfsr	0, 0x33d            	lfsr	FSR0, STACK_IRQ_HEAD-2	; write stack pointer also to FSR0
005992   f03d
005994   eca0     call	0x6340, 0           	call	_SR_Service_Prepare	; call C hook
005996   f031
005998   c33f     movff	0x33f, 0xfe9       	movff	STACK_IRQ_HEAD-0, FSR0L	; restore FSR0[LH] directly from memory (more fail save)
00599a   ffe9
00599c   c33e     movff	0x33e, 0xfea       	movff	STACK_IRQ_HEAD-1, FSR0H	; restore FSR0[LH] directly from memory (more fail save)
00599e   ffea
0059a0   0012     return	0                 	return
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS after the shift register have been loaded
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible
                                           ;; --------------------------------------------------------------------------
                                           USER_SR_Service_Finish
                                           	extern	_SR_Service_Finish
                                           
0059a2   ee23     lfsr	0x2, 0x33f          	lfsr	FSR2, STACK_IRQ_HEAD	; initialize IRQ stack
0059a4   f03f
0059a6   cfe9     movff	0xfe9, 0xfdd       	movff	FSR0L, POSTDEC2		; save FSR0[LH] on IRQ stack
0059a8   ffdd
0059aa   cfea     movff	0xfea, 0xfdd       	movff	FSR0H, POSTDEC2
0059ac   ffdd
0059ae   ee03     lfsr	0, 0x33d            	lfsr	FSR0, STACK_IRQ_HEAD-2	; write stack pointer also to FSR0
0059b0   f03d
0059b2   ec9f     call	0x633e, 0           	call	_SR_Service_Finish	; call C hook
0059b4   f031
0059b6   c33f     movff	0x33f, 0xfe9       	movff	STACK_IRQ_HEAD-0, FSR0L	; restore FSR0[LH] directly from memory (more fail save)
0059b8   ffe9
0059ba   c33e     movff	0x33e, 0xfea       	movff	STACK_IRQ_HEAD-1, FSR0H	; restore FSR0[LH] directly from memory (more fail save)
0059bc   ffea
0059be   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a pot has been moved
                                           ;;  Input:
                                           ;;     o Pot number in WREG and MIOS_PARAMETER1
                                           ;;     o LSB value in MIOS_PARAMETER2
                                           ;;     o MSB value in MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_AIN_NotifyChange
                                           	extern	_AIN_NotifyChange
                                           
0059c0   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
0059c2   f07f
0059c4   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
0059c6   f07f
                                           
0059c8   c005     movff	0x5, 0xfed         	movff	MIOS_PARAMETER3, POSTDEC0
0059ca   ffed
0059cc   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
0059ce   ffed
                                           	;; pot number still in WREG
0059d0   ef3d     goto	0x627a              	goto	_AIN_NotifyChange
0059d2   f031
                                           
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; ==========================================================================
                                           ;;  LINKS TO THE MIOS FUNCTIONS
                                           ;; ==========================================================================
                                           ;; --------------------------------------------------------------------------
                                           
                                           .MIOS_MIDI_BeginStream code MIOS_MIDI_BeginStream
                                           _MIOS_MIDI_BeginStream
                                           	global	_MIOS_MIDI_BeginStream
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_DeviceIDAutoSet code MIOS_MIDI_DeviceIDAutoSet
                                           _MIOS_MIDI_DeviceIDAutoSet
                                           	global	_MIOS_MIDI_DeviceIDAutoSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_DeviceIDGet code MIOS_MIDI_DeviceIDGet
                                           _MIOS_MIDI_DeviceIDGet
                                           	global	_MIOS_MIDI_DeviceIDGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_DeviceIDSet code MIOS_MIDI_DeviceIDSet
                                           _MIOS_MIDI_DeviceIDSet
                                           	global	_MIOS_MIDI_DeviceIDSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_EndStream code MIOS_MIDI_EndStream
                                           _MIOS_MIDI_EndStream
                                           	global	_MIOS_MIDI_EndStream
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_Init code MIOS_MIDI_Init
                                           _MIOS_MIDI_Init
                                           	global	_MIOS_MIDI_Init
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_InterfaceAutoSet code MIOS_MIDI_InterfaceAutoSet
                                           _MIOS_MIDI_InterfaceAutoSet
                                           	global	_MIOS_MIDI_InterfaceAutoSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_InterfaceGet code MIOS_MIDI_InterfaceGet
                                           _MIOS_MIDI_InterfaceGet
                                           	global	_MIOS_MIDI_InterfaceGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_InterfaceSet code MIOS_MIDI_InterfaceSet
                                           _MIOS_MIDI_InterfaceSet
                                           	global	_MIOS_MIDI_InterfaceSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_MergerGet code MIOS_MIDI_MergerGet
                                           _MIOS_MIDI_MergerGet
                                           	global	_MIOS_MIDI_MergerGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_MergerSet code MIOS_MIDI_MergerSet
                                           _MIOS_MIDI_MergerSet
                                           	global	_MIOS_MIDI_MergerSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferFree code MIOS_MIDI_RxBufferFree
                                           _MIOS_MIDI_RxBufferFree
                                           	global	_MIOS_MIDI_RxBufferFree
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferGet code MIOS_MIDI_RxBufferGet
                                           _MIOS_MIDI_RxBufferGet
                                           	global	_MIOS_MIDI_RxBufferGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferPut code MIOS_MIDI_RxBufferPut
                                           _MIOS_MIDI_RxBufferPut
                                           	global	_MIOS_MIDI_RxBufferPut
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferUsed code MIOS_MIDI_RxBufferUsed
                                           _MIOS_MIDI_RxBufferUsed
                                           	global	_MIOS_MIDI_RxBufferUsed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferFlush code MIOS_MIDI_TxBufferFlush
                                           _MIOS_MIDI_TxBufferFlush
                                           	global	_MIOS_MIDI_TxBufferFlush
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferFree code MIOS_MIDI_TxBufferFree
                                           _MIOS_MIDI_TxBufferFree
                                           	global	_MIOS_MIDI_TxBufferFree
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferGet code MIOS_MIDI_TxBufferGet
                                           _MIOS_MIDI_TxBufferGet
                                           	global	_MIOS_MIDI_TxBufferGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferPut code MIOS_MIDI_TxBufferPut
                                           _MIOS_MIDI_TxBufferPut
                                           	global	_MIOS_MIDI_TxBufferPut
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferUsed code MIOS_MIDI_TxBufferUsed
                                           _MIOS_MIDI_TxBufferUsed
                                           	global	_MIOS_MIDI_TxBufferUsed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MPROC_MergerDisable code MIOS_MPROC_MergerDisable
                                           _MIOS_MPROC_MergerDisable
                                           	global	_MIOS_MPROC_MergerDisable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MPROC_MergerEnable code MIOS_MPROC_MergerEnable
                                           _MIOS_MPROC_MergerEnable
                                           	global	_MIOS_MPROC_MergerEnable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MPROC_MergerGet code MIOS_MPROC_MergerGet
                                           _MIOS_MPROC_MergerGet
                                           	global	_MIOS_MPROC_MergerGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DeadbandGet code MIOS_AIN_DeadbandGet
                                           _MIOS_AIN_DeadbandGet
                                           	global	_MIOS_AIN_DeadbandGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DeadbandSet code MIOS_AIN_DeadbandSet
                                           _MIOS_AIN_DeadbandSet
                                           	global	_MIOS_AIN_DeadbandSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_Muxed code MIOS_AIN_Muxed
                                           _MIOS_AIN_Muxed
                                           	global	_MIOS_AIN_Muxed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_NumberGet code MIOS_AIN_NumberGet
                                           _MIOS_AIN_NumberGet
                                           	global	_MIOS_AIN_NumberGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_NumberSet code MIOS_AIN_NumberSet
                                           _MIOS_AIN_NumberSet
                                           	global	_MIOS_AIN_NumberSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_Pin7bitGet code MIOS_AIN_Pin7bitGet
                                           _MIOS_AIN_Pin7bitGet
                                           	global	_MIOS_AIN_Pin7bitGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_PinGet code
                                           _MIOS_AIN_PinGet
                                           	global	_MIOS_AIN_PinGet
                                           
00632a   ec3a     call	0x2c74, 0           	call	MIOS_AIN_PinGet
00632c   f016
00632e   c004     movff	0x4, 0xff3         	movff	MIOS_PARAMETER2, PRODL	; high byte -> PRODL
006330   fff3
006332   0012     return	0                 	return				; low byte already in WREG
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_PinLSBGet code MIOS_AIN_PinLSBGet
                                           _MIOS_AIN_PinLSBGet
                                           	global	_MIOS_AIN_PinLSBGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_PinMSBGet code MIOS_AIN_PinMSBGet
                                           _MIOS_AIN_PinMSBGet
                                           	global	_MIOS_AIN_PinMSBGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_UnMuxed code MIOS_AIN_UnMuxed
                                           _MIOS_AIN_UnMuxed
                                           	global	_MIOS_AIN_UnMuxed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleDownGet code MIOS_MF_PWM_DutyCycleDownGet
                                           _MIOS_MF_PWM_DutyCycleDownGet
                                           	global	_MIOS_MF_PWM_DutyCycleDownGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleDownSet code MIOS_MF_PWM_DutyCycleDownSet
                                           _MIOS_MF_PWM_DutyCycleDownSet
                                           	global	_MIOS_MF_PWM_DutyCycleDownSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleUpGet code MIOS_MF_PWM_DutyCycleUpGet
                                           _MIOS_MF_PWM_DutyCycleUpGet
                                           	global	_MIOS_MF_PWM_DutyCycleUpGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleUpSet code MIOS_MF_PWM_DutyCycleUpSet
                                           _MIOS_MF_PWM_DutyCycleUpSet
                                           	global	_MIOS_MF_PWM_DutyCycleUpSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_DeadbandGet code MIOS_MF_DeadbandGet
                                           _MIOS_MF_DeadbandGet
                                           	global	_MIOS_MF_DeadbandGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_DeadbandSet code MIOS_MF_DeadbandSet
                                           _MIOS_MF_DeadbandSet
                                           	global	_MIOS_MF_DeadbandSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_Disable code MIOS_MF_Disable
                                           _MIOS_MF_Disable
                                           	global	_MIOS_MF_Disable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_Enable code MIOS_MF_Enable
                                           _MIOS_MF_Enable
                                           	global	_MIOS_MF_Enable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_FaderMove code
                                           _MIOS_MF_FaderMove
                                           	global	_MIOS_MF_FaderMove
                                           
0061fe   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
006200   ffd9
006202   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
006204   f003
006206   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
006208   f004
00620a   ef52     goto	0x2ca4              	goto	MIOS_MF_FaderMove
00620c   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_SuspendDisable code MIOS_MF_SuspendDisable
                                           _MIOS_MF_SuspendDisable
                                           	global	_MIOS_MF_SuspendDisable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_SuspendEnable code MIOS_MF_SuspendEnable
                                           _MIOS_MF_SuspendEnable
                                           	global	_MIOS_MF_SuspendEnable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_SuspendGet code MIOS_MF_SuspendGet
                                           _MIOS_MF_SuspendGet
                                           	global	_MIOS_MF_SuspendGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_PeriodGet code MIOS_MF_PWM_PeriodGet
                                           _MIOS_MF_PWM_PeriodGet
                                           	global	_MIOS_MF_PWM_PeriodGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_PeriodSet code MIOS_MF_PWM_PeriodSet
                                           _MIOS_MF_PWM_PeriodSet
                                           	global	_MIOS_MF_PWM_PeriodSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_TouchDetectionReset code MIOS_MF_TouchDetectionReset
                                           _MIOS_MF_TouchDetectionReset
                                           	global	_MIOS_MF_TouchDetectionReset
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinGet code MIOS_DIN_PinGet
                                           _MIOS_DIN_PinGet
                                           	global	_MIOS_DIN_PinGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_SRGet code MIOS_DIN_SRGet
                                           _MIOS_DIN_SRGet
                                           	global	_MIOS_DIN_SRGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinGet code MIOS_DOUT_PinGet
                                           _MIOS_DOUT_PinGet
                                           	global	_MIOS_DOUT_PinGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinSet code
                                           _MIOS_DOUT_PinSet
                                           	global	_MIOS_DOUT_PinSet
                                           
0062b2   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0062b4   ffd9
0062b6   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
0062b8   f003
0062ba   ef60     goto	0x2cc0              	goto	MIOS_DOUT_PinSet
0062bc   f016
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinSet0 code MIOS_DOUT_PinSet0
                                           _MIOS_DOUT_PinSet0
                                           	global	_MIOS_DOUT_PinSet0
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinSet1 code MIOS_DOUT_PinSet1
                                           _MIOS_DOUT_PinSet1
                                           	global	_MIOS_DOUT_PinSet1
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_SRGet code MIOS_DOUT_SRGet
                                           _MIOS_DOUT_SRGet
                                           	global	_MIOS_DOUT_SRGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_SRSet code
                                           _MIOS_DOUT_SRSet
                                           	global	_MIOS_DOUT_SRSet
                                           	
0062be   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0062c0   ffd9
0062c2   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
0062c4   f003
0062c6   ef68     goto	0x2cd0              	goto	MIOS_DOUT_SRSet
0062c8   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_Abs7bitAdd code
                                           _MIOS_ENC_Abs7bitAdd
                                           	global	_MIOS_ENC_Abs7bitAdd
                                           	
0062ca   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0062cc   ffd9
0062ce   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
0062d0   f003
0062d2   ef6a     goto	0x2cd4              	goto	MIOS_ENC_Abs7bitAdd
0062d4   f016
                                           	
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_Abs7bitGet code MIOS_ENC_Abs7bitGet
                                           _MIOS_ENC_Abs7bitGet
                                           	global	_MIOS_ENC_Abs7bitGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_Abs7bitSet code
                                           _MIOS_ENC_Abs7bitSet
                                           	global	_MIOS_ENC_Abs7bitSet
                                           
0062d6   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0062d8   ffd9
0062da   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
0062dc   f003
0062de   ef6e     goto	0x2cdc              	goto	MIOS_ENC_Abs7bitSet
0062e0   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_NumberGet code MIOS_ENC_NumberGet
                                           _MIOS_ENC_NumberGet
                                           	global	_MIOS_ENC_NumberGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_SpeedGet code
                                           _MIOS_ENC_SpeedGet
                                           	global	_MIOS_ENC_SpeedGet
                                           
0062e2   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0062e4   ffd9
0062e6   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
0062e8   f003
0062ea   ef72     goto	0x2ce4              	goto	MIOS_ENC_SpeedGet
0062ec   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_SpeedSet code
                                           _MIOS_ENC_SpeedSet
                                           	global	_MIOS_ENC_SpeedSet
                                           
00620e   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
006210   ffd9
006212   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
006214   f003
006216   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
006218   f004
00621a   ef74     goto	0x2ce8              	goto	MIOS_ENC_SpeedSet
00621c   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_NumberGet code MIOS_SRIO_NumberGet
                                           _MIOS_SRIO_NumberGet
                                           	global	_MIOS_SRIO_NumberGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_NumberSet code MIOS_SRIO_NumberSet
                                           _MIOS_SRIO_NumberSet
                                           	global	_MIOS_SRIO_NumberSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_TS_SensitivityGet code MIOS_SRIO_TS_SensitivityGet
                                           _MIOS_SRIO_TS_SensitivityGet
                                           	global	_MIOS_SRIO_TS_SensitivityGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_TS_SensitivitySet code MIOS_SRIO_TS_SensitivitySet
                                           _MIOS_SRIO_TS_SensitivitySet
                                           	global	_MIOS_SRIO_TS_SensitivitySet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_UpdateFrqGet code MIOS_SRIO_UpdateFrqGet
                                           _MIOS_SRIO_UpdateFrqGet
                                           	global	_MIOS_SRIO_UpdateFrqGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_UpdateFrqSet code MIOS_SRIO_UpdateFrqSet
                                           _MIOS_SRIO_UpdateFrqSet
                                           	global	_MIOS_SRIO_UpdateFrqSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_DebounceGet code MIOS_SRIO_DebounceGet
                                           _MIOS_SRIO_DebounceGet
                                           	global	_MIOS_SRIO_DebounceGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_DebounceSet code MIOS_SRIO_DebounceSet
                                           _MIOS_SRIO_DebounceSet
                                           	global	_MIOS_SRIO_DebounceSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Clear code MIOS_LCD_Clear
                                           _MIOS_LCD_Clear
                                           	global	_MIOS_LCD_Clear
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Cmd code MIOS_LCD_Cmd
                                           _MIOS_LCD_Cmd
                                           	global	_MIOS_LCD_Cmd
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_CursorGet code MIOS_LCD_CursorGet
                                           _MIOS_LCD_CursorGet
                                           	global	_MIOS_LCD_CursorGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_CursorSet code MIOS_LCD_CursorSet
                                           _MIOS_LCD_CursorSet
                                           	global	_MIOS_LCD_CursorSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Data code MIOS_LCD_Data
                                           _MIOS_LCD_Data
                                           	global	_MIOS_LCD_Data
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Init code MIOS_LCD_Init
                                           _MIOS_LCD_Init
                                           	global	_MIOS_LCD_Init
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD1 code MIOS_LCD_PrintBCD1
                                           _MIOS_LCD_PrintBCD1
                                           	global	_MIOS_LCD_PrintBCD1
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD2 code MIOS_LCD_PrintBCD2
                                           _MIOS_LCD_PrintBCD2
                                           	global	_MIOS_LCD_PrintBCD2
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD3 code MIOS_LCD_PrintBCD3
                                           _MIOS_LCD_PrintBCD3
                                           	global	_MIOS_LCD_PrintBCD3
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD4 code
                                           _MIOS_LCD_PrintBCD4
                                           	global	_MIOS_LCD_PrintBCD4
                                           
0062ee   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0062f0   ffd9
0062f2   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
0062f4   f003
0062f6   eff6     goto	0x2dec              	goto	MIOS_LCD_PrintBCD4
0062f8   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD5 code
                                           _MIOS_LCD_PrintBCD5
                                           	global	_MIOS_LCD_PrintBCD5
                                           
0062fa   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0062fc   ffd9
0062fe   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
006300   f003
006302   eff8     goto	0x2df0              	goto	MIOS_LCD_PrintBCD5
006304   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintChar code MIOS_LCD_PrintChar
                                           _MIOS_LCD_PrintChar
                                           	global	_MIOS_LCD_PrintChar
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintHex1 code MIOS_LCD_PrintHex1
                                           _MIOS_LCD_PrintHex1
                                           	global	_MIOS_LCD_PrintHex1
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintHex2 code MIOS_LCD_PrintHex2
                                           _MIOS_LCD_PrintHex2
                                           	global	_MIOS_LCD_PrintHex2
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintMessage code
                                           _MIOS_LCD_PrintMessage
                                           	global	_MIOS_LCD_PrintMessage
                                           
006192   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
006194   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
006196   ffd9
006198   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
00619a   fff7
00619c   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
00619e   fff8
0061a0   ef9a     goto	0x2d34              	goto	MIOS_LCD_PrintMessage
0061a2   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintPreconfString code
                                           _MIOS_LCD_PrintPreconfString
                                           	global	_MIOS_LCD_PrintPreconfString
                                           
006156   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
006158   ffd9
00615a   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
00615c   fff8
00615e   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
006160   fff7
006162   cfdc     movff	0xfdc, 0xff6       	movff	PREINC2, TBLPTRL
006164   fff6
006166   ef9c     goto	0x2d38              	goto	MIOS_LCD_PrintPreconfString
006168   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintString code
                                           _MIOS_LCD_PrintString
                                           	global	_MIOS_LCD_PrintString
                                           
0061a4   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
0061a6   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0061a8   ffd9
0061aa   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
0061ac   fff7
0061ae   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
0061b0   fff8
0061b2   ef9e     goto	0x2d3c              	goto	MIOS_LCD_PrintString
0061b4   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_TypeAutoSet code MIOS_LCD_TypeAutoSet
                                           _MIOS_LCD_TypeAutoSet
                                           	global	_MIOS_LCD_TypeAutoSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_TypeGet code MIOS_LCD_TypeGet
                                           _MIOS_LCD_TypeGet
                                           	global	_MIOS_LCD_TypeGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_TypeSet code
                                           _MIOS_LCD_TypeSet
                                           	global	_MIOS_LCD_TypeSet
                                           
00621e   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
006220   ffd9
006222   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
006224   f003
006226   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
006228   f004
00622a   efa4     goto	0x2d48              	goto	MIOS_LCD_TypeSet
00622c   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_YAddressGet code
                                           _MIOS_LCD_YAddressGet
                                           	global	_MIOS_LCD_YAddressGet
00633a   efa6     goto	0x2d4c              	goto	MIOS_LCD_YAddressGet
00633c   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_YAddressSet code
                                           _MIOS_LCD_YAddressSet
                                           	global	_MIOS_LCD_YAddressSet
                                           
00616a   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00616c   ffd9
00616e   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
006170   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
006172   f004
006174   cfdc     movff	0xfdc, 0x5          	movff	PREINC2, MIOS_PARAMETER3
006176   f005
006178   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
00617a   efa8     goto	0x2d50              	goto	MIOS_LCD_YAddressSet
00617c   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_MessageStart code MIOS_LCD_MessageStart
                                           _MIOS_LCD_MessageStart
                                           	global	_MIOS_LCD_MessageStart
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_MessageStop code MIOS_LCD_MessageStop
                                           _MIOS_LCD_MessageStop
                                           	global	_MIOS_LCD_MessageStop
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_CLCD_SpecialCharInit code
                                           _MIOS_CLCD_SpecialCharInit
                                           	global	_MIOS_CLCD_SpecialCharInit
                                           
00617e   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
006180   ffd9
006182   cfdc     movff	0xfdc, 0xff6       	movff	PREINC2, TBLPTRL
006184   fff6
006186   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
006188   fff7
00618a   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
00618c   fff8
00618e   efe4     goto	0x2dc8              	goto	MIOS_CLCD_SpecialCharInit
006190   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_CLCD_SpecialCharsInit code
                                           _MIOS_CLCD_SpecialCharsInit
                                           	global	_MIOS_CLCD_SpecialCharsInit
                                           
0061b6   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
0061b8   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0061ba   ffd9
0061bc   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
0061be   fff7
0061c0   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
0061c2   fff8
0061c4   efe6     goto	0x2dcc              	goto	MIOS_CLCD_SpecialCharsInit
0061c6   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GLCD_FontInit code
                                           _MIOS_GLCD_FontInit
                                           	global	_MIOS_GLCD_FontInit
                                           
0061c8   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
0061ca   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0061cc   ffd9
0061ce   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
0061d0   fff7
0061d2   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
0061d4   fff8
0061d6   efaa     goto	0x2d54              	goto	MIOS_GLCD_FontInit
0061d8   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GLCD_GCursorGet code MIOS_GLCD_GCursorGet
                                           _MIOS_GLCD_GCursorGet
                                           	global	_MIOS_GLCD_GCursorGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GLCD_GCursorSet code
                                           _MIOS_GLCD_GCursorSet
                                           	global	_MIOS_GLCD_GCursorSet
                                           
006306   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
006308   ffd9
00630a   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
00630c   f003
00630e   efae     goto	0x2d5c              	goto	MIOS_GLCD_GCursorSet
006310   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_Read code
                                           _MIOS_EEPROM_Read
                                           	global	_MIOS_EEPROM_Read
                                           
006334   6ea9     movwf	0xa9, 0            	movwf	EEADR
006336   efb0     goto	0x2d60              	goto	MIOS_EEPROM_Read
006338   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_Write code
                                           _MIOS_EEPROM_Write
                                           	global	_MIOS_EEPROM_Write
                                           
006312   6ea9     movwf	0xa9, 0            	movwf	EEADR
006314   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
006316   ffd9
006318   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
00631a   efb2     goto	0x2d64              	goto	MIOS_EEPROM_Write
00631c   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_ReadPage code
                                           _MIOS_EEPROM_ReadPage
                                           	global	_MIOS_EEPROM_ReadPage
                                           
0061da   6ea9     movwf	0xa9, 0            	movwf	EEADR
0061dc   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0061de   ffd9
0061e0   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
0061e2   ffe1
0061e4   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
0061e6   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	EEADR, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
0061e8   ef1a     goto	0x2e34              	goto	MIOS_EEPROM_ReadPage
0061ea   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_WritePage code
                                           _MIOS_EEPROM_WritePage
                                           	global	_MIOS_EEPROM_WritePage
                                           
0061ec   6ea9     movwf	0xa9, 0            	movwf	EEADR
0061ee   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0061f0   ffd9
0061f2   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
0061f4   ffe1
0061f6   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
0061f8   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	EEADR, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
0061fa   ef1c     goto	0x2e38              	goto	MIOS_EEPROM_WritePage
0061fc   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_FLASH_Read code
                                           _MIOS_FLASH_Read
                                           	global	_MIOS_FLASH_Read
                                           
0060f6   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
0060f8   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0060fa   ffd9
0060fc   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
0060fe   fff7
006100   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
006102   fff8
006104   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
006106   ffe1
006108   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
00610a   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	TBLPTRL, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	TBLPTRH, ACCESS
                                           	return
                                           
                                           	movlw	0x00
                                           	cpfseq	TBLPTRU, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
00610c   efb4     goto	0x2d68              	goto	MIOS_FLASH_Read
00610e   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_FLASH_Write code
                                           _MIOS_FLASH_Write
                                           	global	_MIOS_FLASH_Write
                                           
006110   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
006112   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
006114   ffd9
006116   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
006118   fff7
00611a   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
00611c   fff8
00611e   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
006120   ffe1
006122   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
006124   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	TBLPTRL, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	TBLPTRH, ACCESS
                                           	return
                                           
                                           	movlw	0x00
                                           	cpfseq	TBLPTRU, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
006126   efb6     goto	0x2d6c              	goto	MIOS_FLASH_Write
006128   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_Read code
                                           _MIOS_BANKSTICK_Read
                                           	global	_MIOS_BANKSTICK_Read
                                           
00625e   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
006260   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
006262   ffd9
006264   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
006266   f004
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
006268   efb8     goto	0x2d70              	goto	MIOS_BANKSTICK_Read
00626a   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_Write code
                                           _MIOS_BANKSTICK_Write
                                           	global	_MIOS_BANKSTICK_Write
                                           
00622e   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
006230   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
006232   ffd9
006234   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
006236   f004
006238   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movwf	TMP1
                                           	movlw	0x56
                                           	cpfseq	TMP1, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
00623a   efba     goto	0x2d74              	goto	MIOS_BANKSTICK_Write
00623c   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_CtrlSet code MIOS_BANKSTICK_CtrlSet
                                           _MIOS_BANKSTICK_CtrlSet
                                           	global	_MIOS_BANKSTICK_CtrlSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_CtrlGet code MIOS_BANKSTICK_CtrlGet
                                           _MIOS_BANKSTICK_CtrlGet
                                           	global	_MIOS_BANKSTICK_CtrlGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_WritePage code
                                           _MIOS_BANKSTICK_WritePage
                                           	global	_MIOS_BANKSTICK_WritePage
                                           
00612a   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
00612c   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00612e   ffd9
006130   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
006132   f004
006134   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
006136   ffe1
006138   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
00613a   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
00613c   eff2     goto	0x2de4              	goto	MIOS_BANKSTICK_WritePage
00613e   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_ReadPage code
                                           _MIOS_BANKSTICK_ReadPage
                                           	global	_MIOS_BANKSTICK_ReadPage
                                           	
006140   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
006142   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
006144   ffd9
006146   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
006148   f004
00614a   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
00614c   ffe1
00614e   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
006150   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
006152   ef18     goto	0x2e30              	goto	MIOS_BANKSTICK_ReadPage
006154   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_Init code
                                           _MIOS_TIMER_Init
                                           	global	_MIOS_TIMER_Init
                                           
00623e   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
006240   ffd9
006242   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
006244   f003
006246   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
006248   f004
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movwf	TMP1
                                           	movlw	0x56
                                           	cpfseq	TMP1, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
00624a   efbc     goto	0x2d78              	goto	MIOS_TIMER_Init
00624c   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_Start code MIOS_TIMER_Start
                                           _MIOS_TIMER_Start
                                           	global	_MIOS_TIMER_Start
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_Stop code MIOS_TIMER_Stop
                                           _MIOS_TIMER_Stop
                                           	global	_MIOS_TIMER_Stop
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_ReInit code
                                           _MIOS_TIMER_ReInit
                                           	global	_MIOS_TIMER_ReInit
                                           
00624e   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
006250   ffd9
006252   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
006254   f003
006256   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
006258   f004
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movwf	TMP1
                                           	movlw	0x56
                                           	cpfseq	TMP1, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
00625a   ef1e     goto	0x2e3c              	goto	MIOS_TIMER_ReInit
00625c   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_GetBitANDMask code MIOS_HLP_GetBitANDMask
                                           _MIOS_HLP_GetBitANDMask
                                           	global	_MIOS_HLP_GetBitANDMask
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_GetBitORMask code MIOS_HLP_GetBitORMask
                                           _MIOS_HLP_GetBitORMask
                                           	global	_MIOS_HLP_GetBitORMask
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_16bitAddSaturate code
                                           _MIOS_HLP_16bitAddSaturate
                                           	global	_MIOS_HLP_16bitAddSaturate
                                           
006058   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00605a   ffd9
00605c   6e0a     movwf	0xa, 0             	movwf	TMP5
                                           
00605e   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
006060   ffe1
006062   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
006064   ffe2
006066   52dc     movf	0xdc, 0x1, 0        	movf	PREINC2, F
006068   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
00606a   f003
00606c   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
00606e   f004
                                           
006070   cfe6     movff	0xfe6, 0x6         	movff	POSTINC1, TMP1	; due to requirement that FSR1 is aligned to 16bit address
006072   f006
006074   cfe6     movff	0xfe6, 0x7         	movff	POSTINC1, TMP2
006076   f007
006078   ee10     lfsr	0x1, 0x6            	lfsr	FSR1, TMP1
00607a   f006
                                           
00607c   500a     movf	0xa, 0, 0           	movf	TMP5, W
00607e   ecdc     call	0x2db8, 0           	call	MIOS_HLP_16bitAddSaturate
006080   f016
006082   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
006084   ffd9
006086   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
006088   ffe1
00608a   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
00608c   ffe2
00608e   c006     movff	0x6, 0xfe6         	movff	TMP1, POSTINC1
006090   ffe6
006092   c007     movff	0x7, 0xfe6         	movff	TMP2, POSTINC1
006094   ffe6
006096   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_Dec2BCD code
                                           _MIOS_HLP_Dec2BCD
                                           	global	_MIOS_HLP_Dec2BCD
                                           
00631e   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
006320   ffd9
006322   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
006324   f003
006326   eff4     goto	0x2de8              	goto	MIOS_HLP_Dec2BCD
006328   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_Delay code MIOS_Delay
                                           _MIOS_Delay
                                           	global	_MIOS_Delay
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GPCounterGet code MIOS_GPCounterGet
                                           _MIOS_GPCounterGet
                                           	global	_MIOS_GPCounterGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_Reset code MIOS_Reset
                                           _MIOS_Reset
                                           	global	_MIOS_Reset
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SystemResume code MIOS_SystemResume
                                           _MIOS_SystemResume
                                           	global	_MIOS_SystemResume
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SystemSuspend code MIOS_SystemSuspend
                                           _MIOS_SystemSuspend
                                           	global	_MIOS_SystemSuspend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_UserResume code MIOS_UserResume
                                           _MIOS_UserResume
                                           	global	_MIOS_UserResume
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_UserSuspend code MIOS_UserSuspend
                                           _MIOS_UserSuspend
                                           	global	_MIOS_UserSuspend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinAutoRepeatEnable code MIOS_DIN_PinAutoRepeatEnable
                                           _MIOS_DIN_PinAutoRepeatEnable
                                           	global	_MIOS_DIN_PinAutoRepeatEnable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinAutoRepeatDisable code MIOS_DIN_PinAutoRepeatDisable
                                           _MIOS_DIN_PinAutoRepeatDisable
                                           	global	_MIOS_DIN_PinAutoRepeatDisable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinAutoRepeatGet code MIOS_DIN_PinAutoRepeatGet
                                           _MIOS_DIN_PinAutoRepeatGet
                                           	global	_MIOS_DIN_PinAutoRepeatGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DynamicPrioSet code MIOS_AIN_DynamicPrioSet
                                           _MIOS_AIN_DynamicPrioSet
                                           	global	_MIOS_AIN_DynamicPrioSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DynamicPrioGet code MIOS_AIN_DynamicPrioGet
                                           _MIOS_AIN_DynamicPrioGet
                                           	global	_MIOS_AIN_DynamicPrioGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_LastPinsGet code MIOS_AIN_LastPinsGet
                                           _MIOS_AIN_LastPinsGet
                                           	global	_MIOS_AIN_LastPinsGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_Start code MIOS_IIC_Start
                                           _MIOS_IIC_Start
                                           	global	_MIOS_IIC_Start
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_Stop code MIOS_IIC_Stop
                                           _MIOS_IIC_Stop
                                           	global	_MIOS_IIC_Stop
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_ByteSend code MIOS_IIC_ByteSend
                                           _MIOS_IIC_ByteSend
                                           	global	_MIOS_IIC_ByteSend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_ByteReceive code MIOS_IIC_ByteReceive
                                           _MIOS_IIC_ByteReceive
                                           	global	_MIOS_IIC_ByteReceive
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_AckSend code MIOS_IIC_AckSend
                                           _MIOS_IIC_AckSend
                                           	global	_MIOS_IIC_AckSend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_NakSend code MIOS_IIC_NakSend
                                           _MIOS_IIC_NakSend
                                           	global	_MIOS_IIC_NakSend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_CtrlSet code MIOS_IIC_CtrlSet
                                           _MIOS_IIC_CtrlSet
                                           	global	_MIOS_IIC_CtrlSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_CtrlGet code MIOS_IIC_CtrlGet
                                           _MIOS_IIC_CtrlGet
                                           	global	_MIOS_IIC_CtrlGet
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; ==========================================================================
                                           ;;  Special functions supported by the wrapper
                                           ;; ==========================================================================
                                           ;; --------------------------------------------------------------------------
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintCString code
                                           _MIOS_LCD_PrintCString
                                           	global	_MIOS_LCD_PrintCString
                                           
005fd2   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
005fd4   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005fd6   ffd9
005fd8   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
005fda   fff7
005fdc   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
                                           
                                           	;; SDCC passes a 24bit pointer, the MSB (now in WREG) bit 6 and 7 tells us, where the data is located:
                                           	;; 00 -> code
                                           	;; 01 -> EEPROM (not supported by MIOS_LCD_PrintCString yet)
                                           	;; 10 -> data
                                           	;; 11 -> unimplemented
                                           
005fde   bee8     btfsc	0xe8, 0x7, 0       	btfsc	WREG, 7
005fe0   d008     bra	0x5ff2               	bra	_MIOS_LCD_PrintCString_RAM
                                           _MIOS_LCD_PrintCString_Code
005fe2   6ef8     movwf	0xf8, 0            	movwf	TBLPTRU
                                           _MIOS_LCD_PrintCStringLoop_Code
005fe4   0009     tblrd	*+                 	tblrd*+
005fe6   50f5     movf	0xf5, 0, 0          	movf	TABLAT, W
005fe8   e003     bz	0x5ff0                	bz	_MIOS_LCD_PrintCString_Code_End
005fea   ec94     call	0x2d28, 0           	call	MIOS_LCD_PrintChar
005fec   f016
005fee   d7fa     bra	0x5fe4               	bra	_MIOS_LCD_PrintCStringLoop_Code
                                           _MIOS_LCD_PrintCString_Code_End
005ff0   0012     return	0                 	return
                                           
                                           _MIOS_LCD_PrintCString_RAM
                                           	;; using FSR2 as temporary pointer - store current FSR2 into TMP[12]
005ff2   cfd9     movff	0xfd9, 0x6         	movff	FSR2L, TMP1
005ff4   f006
005ff6   cfda     movff	0xfda, 0x7         	movff	FSR2H, TMP2
005ff8   f007
005ffa   cff6     movff	0xff6, 0xfd9       	movff	TBLPTRL, FSR2L
005ffc   ffd9
005ffe   cff7     movff	0xff7, 0xfda       	movff	TBLPTRH, FSR2H
006000   ffda
                                           _MIOS_LCD_PrintCStringLoop_RAM
006002   50de     movf	0xde, 0, 0          	movf	POSTINC2, W
006004   e003     bz	0x600c                	bz	_MIOS_LCD_PrintCString_RAM_End
006006   ec94     call	0x2d28, 0           	call	MIOS_LCD_PrintChar
006008   f016
00600a   d7fb     bra	0x6002               	bra	_MIOS_LCD_PrintCStringLoop_RAM
                                           _MIOS_LCD_PrintCString_RAM_End
                                           	;; restore FSR2
00600c   c006     movff	0x6, 0xfd9         	movff	TMP1, FSR2L
00600e   ffd9
006010   c007     movff	0x7, 0xfda         	movff	TMP2, FSR2H
006012   ffda
006014   0012     return	0                 	return
                                           
                                           	END
                                           ; $Id: app_lcd.asm 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; Wrapper for app_lcd.inc
                                           ; To be used for relocatable programs
                                           ;
                                           ; ==========================================================================
                                           
                                           	radix	dec
                                           
                                           #include <mios.h>
                                           ; $Id: mios.h 822 2009-09-17 18:39:53Z tk $
                                           ;
                                           ; MIOS Definitions file
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2008 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  Include basic defines which characterize the derivative to
                                           ;;  simplify dependencies within MIOS source code
                                           ;; ==========================================================================
                                           #include <hw_flags.h>
                                           
                                           #ifndef _HW_FLAGS_H
                                           #define _HW_FLAGS_H
                                           
                                           #ifdef __18F452
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		0
                                           #define PIC_DERIVATIVE_CMCON_INIT	0
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4620
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x10000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xf80
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	1
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4682
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x14000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #ifdef __18F4685
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x18000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #endif
                                            
                                           ;; ==========================================================================
                                           ;;  Assembler directives & device specific include file
                                           ;;
                                           ;;  Natively supported devices are listed here.
                                           ;; ==========================================================================
                                           
                                           #ifdef __18F452
                                           	LIST R=DEC
                                           #include <p18f452.inc>
                                                   LIST
                                           ; P18F452.INC  Standard Header File, Version 1.4   Microchip Technology, Inc.
                                                   NOLIST
                                           #endif
                                           
                                           #ifdef __18F4620
                                           	LIST R=DEC
                                           #include <p18f4620.inc>
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           	LIST R=DEC
                                           #include <p18f4520.inc>
                                           #endif
                                           
                                           #ifdef __18F4682
                                           	LIST R=DEC
                                           #include <p18f4682.inc>
                                           #endif
                                           
                                           #ifdef __18F4685
                                           	LIST R=DEC
                                           #include <p18f4685.inc>
                                           #endif
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  General constants
                                           ;; ==========================================================================
                                           
                                           ;; used by MIOS_MIDI_Interface*
                                           MIOS_MIDI_INTERFACE_COMMON	EQU	0x00
                                           MIOS_MIDI_INTERFACE_TO_HOST	EQU	0x01
                                           
                                           ;; used by MIOS_MIDI_Merger*
                                           MIOS_MIDI_MERGER_DISABLED	EQU	0x00
                                           MIOS_MIDI_MERGER_ENABLED	EQU	0x01
                                           MIOS_MIDI_MERGER_MBLINK_EP	EQU	0x02
                                           MIOS_MIDI_MERGER_MBLINK_FP	EQU	0x03
                                           
                                           ;; used by MIOS_ENC_PIN_TABLE
                                           #ifdef MIOS_OLD_ENCODER_MODES
                                           MIOS_ENC_MODE_NON_DETENTED	EQU	0x00
                                           MIOS_ENC_MODE_DETENTED		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED1		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED2		EQU	0x81
                                           MIOS_ENC_MODE_DETENTED3		EQU	0x82
                                           #else
                                           ;; new encoder modes: each bit of MIOS_ENC_MODE_xx tells, if an INC / DEC is 
                                           ;; being triggered on the corresponding edge. 
                                           ;; Bit      7   6   5   4  
                                           ;; DEC     <-  <-  <-  <-
                                           ;; Pin A ___|-------|_______
                                           ;; Pin B _______|-------|___
                                           ;; INC      ->  ->  ->  ->
                                           ;; Bit      0   1   2   3
                                           ;; Ex.:          Bit  76543210
                                           ;;      DETENTED2 = 0b00100010 = 0x22
                                           ;;      -> INC will be triggered on edge 1, DEC on edge 5
                                           MIOS_ENC_MODE_NON_DETENTED	EQU	0xff
                                           MIOS_ENC_MODE_DETENTED		EQU	0xaa
                                           MIOS_ENC_MODE_DETENTED1		EQU	0xaa
                                           MIOS_ENC_MODE_DETENTED2		EQU	0x22
                                           MIOS_ENC_MODE_DETENTED3		EQU	0x88
                                           MIOS_ENC_MODE_DETENTED4		EQU	0xa5
                                           MIOS_ENC_MODE_DETENTED5		EQU	0x5a
                                           #endif
                                           
                                           ;; used by MIOS_ENC_Speed*
                                           MIOS_ENC_SPEED_SLOW		EQU	0
                                           MIOS_ENC_SPEED_NORMAL		EQU	1
                                           MIOS_ENC_SPEED_FAST		EQU	2
                                           
                                           ;; used by MIOS_LCD_Type*
                                           MIOS_LCD_TYPE_CLCD		EQU	0x00
                                           MIOS_LCD_TYPE_GLCD0		EQU	0x01
                                           MIOS_LCD_TYPE_GLCD1		EQU	0x02
                                           MIOS_LCD_TYPE_GLCD2		EQU	0x03
                                           MIOS_LCD_TYPE_GLCD3		EQU	0x04
                                           MIOS_LCD_TYPE_GLCD4		EQU	0x05
                                           MIOS_LCD_TYPE_MLCD		EQU	0x06
                                           MIOS_LCD_TYPE_GLCD_CUSTOM	EQU	0x07
                                           
                                           ;; location of default 5x8 font for graphical displays
                                           MIOS_GLCD_FONT			EQU	0x7cfc
                                           
                                           ;; general config flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_CFG0_LCD_TYPE0		EQU 0	; selects LCD type, bit 0
                                           MIOS_BOX_CFG0_LCD_TYPE1		EQU 1	; selects LCD type, bit 1
                                           MIOS_BOX_CFG0_LCD_TYPE2		EQU 2	; selects LCD type, bit 2
                                           MIOS_BOX_CFG0_USE_GLCD		EQU 3	; if 1, graphical LCD is connected
                                           MIOS_BOX_CFG0_MERGER		EQU 4	; if 1, MIDI merger is enabled
                                           MIOS_BOX_CFG0_MBLINK		EQU 5	; if 1, MIDIbox Link is enabled
                                           MIOS_BOX_CFG0_TO_HOST		EQU 6	; if 1, MIDI interface will run with 38400 baud instead of 31250
                                           MIOS_BOX_CFG0_20MHz		EQU 7	; if 1, it is assumed that box is running with 20 MHz, else with 40 MHz
                                           
                                           MIOS_BOX_CFG1_BS_A0		EQU 0	; A0 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A1		EQU 1	; A1 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A2		EQU 2	; A2 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_DIS_VERIFY	EQU 3	; if 1, writes to the BankStick will not be verified
                                           MIOS_BOX_CFG1_IIC_STRETCH_CLK	EQU 4	; if 1, IIC clock stretching enabled
                                           
                                           ;; general status flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_STAT_BS_AVAILABLE	EQU 0	; if 1, BankStick is available
                                           MIOS_BOX_STAT_MBLINK_TUNNEL_PASS EQU 1  ; if 1, a MBLinked event will be tunnled
                                           MIOS_BOX_STAT_SUSPEND_ALL       EQU 2   ; if 1, all system and user tasks are suspended
                                           MIOS_BOX_STAT_SUSPEND_USER      EQU 3   ; if 1, all user tasks are suspended
                                           MIOS_BOX_STAT_AUTOREPEAT	EQU 4	; if 1, start the auto-repeat handler
                                           MIOS_BOX_STAT_MLCD_TRANSFER	EQU 5	; if 1, a transfer to the MLCD has been started
                                           MIOS_BOX_STAT_FERR		EQU 6	; if 1, a frame error happened during MIDI receive
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS Special Function Registers
                                           ;; ==========================================================================
                                           
                                           MIOS_BOX_CFG0	EQU	0x000
                                           MIOS_BOX_CFG1	EQU	0x001
                                           MIOS_BOX_STAT	EQU	0x002
                                           MIOS_PARAMETER1	EQU	0x003
                                           MIOS_PARAMETER2	EQU	0x004
                                           MIOS_PARAMETER3	EQU	0x005
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for main programs
                                           ;; ==========================================================================
                                           TMP1		EQU	0x006
                                           TMP2		EQU	0x007
                                           TMP3		EQU	0x008
                                           TMP4		EQU	0x009
                                           TMP5		EQU	0x00a
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for IRQs
                                           ;; ==========================================================================
                                           IRQ_TMP1	EQU	0x00b
                                           IRQ_TMP2	EQU	0x00c
                                           IRQ_TMP3	EQU	0x00d
                                           IRQ_TMP4	EQU	0x00e
                                           IRQ_TMP5	EQU	0x00f
                                           
                                           ;; ==========================================================================
                                           ;;  free memory space for user application:
                                           ;; ==========================================================================
                                           	;; 0x010-0x37f
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers -- not defined here -- 
                                           ;;  never use these memory locations!
                                           ;; ==========================================================================
                                           	;; 0x380-0x6ff
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers for custom LCD driver
                                           ;; ==========================================================================
                                           MIOS_GLCD_BUFFER	EQU	0x570	; note: the buffer must be located at ...0-...7
                                           MIOS_LCD_OPTION1	EQU	0x578	; contains the first LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_OPTION2	EQU	0x579	; contains the second LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_CURSOR_POS	EQU	0x57a	; the current cursor pos of characters (GLCD: multiplied by width)
                                           MIOS_GLCD_GCURSOR_X	EQU	0x57b	; for GLCDs: the current X position of graphical cursor
                                           MIOS_GLCD_GCURSOR_Y	EQU	0x57c	; for GLCDs: the current Y position of graphical cursor
                                           MIOS_GLCD_FONT_WIDTH	EQU	0x57d	; for GLCDs: the fontwidth given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_HEIGHT	EQU	0x57e	; for GLCDs: the fontheight given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_X0	EQU	0x57f	; for GLCDs: the first byte within a char entry
                                           MIOS_GLCD_FONT_OFFSET	EQU	0x580	; for GLCDs: the byte offset between the characters
                                           MIOS_GLCD_FONT_PTRL	EQU	0x581	; for GLCDs: pointer to the character table, low-byte
                                           MIOS_GLCD_FONT_PTRH	EQU	0x582	; for GLCDs: pointer to the character table, high-byte
                                           MIOS_LCD_TIMEOUT0	EQU	0x583   ; can be used for timeout loops
                                           MIOS_LCD_TIMEOUT1	EQU	0x584   ; can be used for timeout loops
                                           MIOS_GLCD_TMP1		EQU	0x585   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP2		EQU	0x586   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP3		EQU	0x587   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP4		EQU	0x588   ; can be used as temporary buffer
                                           MIOS_LCD_Y0_OFFSET	EQU	0x589   ; Y0 offset of LCD
                                           MIOS_LCD_Y1_OFFSET	EQU	0x58a   ; Y1 offset of LCD
                                           MIOS_LCD_Y2_OFFSET	EQU	0x58b   ; Y2 offset of LCD
                                           MIOS_LCD_Y3_OFFSET	EQU	0x58c   ; Y3 offset of LCD
                                           MIOS_LCD_CURSOR_POS_REAL EQU	0x58d	; unmapped cursor position which has been set with MIOS_LCD_CursorSet
                                           MIOS_GLCD_FONT_PTRU	EQU	0x58e	; for GLCDs: pointer to the character table, upper-byte (>64k flash derivatives only)
                                           #include <mios_vectors.inc>
                                           ; $Id: mios_vectors.inc 49 2008-01-30 21:47:31Z tk $
                                           
                                           MIOS_MIDI_BeginStream                   EQU	0x2c00
                                           MIOS_MIDI_DeviceIDAutoSet               EQU	0x2c04
                                           MIOS_MIDI_DeviceIDGet                   EQU	0x2c08
                                           MIOS_MIDI_DeviceIDSet                   EQU	0x2c0c
                                           MIOS_MIDI_EndStream                     EQU	0x2c10
                                           MIOS_MIDI_Init                          EQU	0x2c14
                                           MIOS_MIDI_InterfaceAutoSet              EQU	0x2c18
                                           MIOS_MIDI_InterfaceGet                  EQU	0x2c1c
                                           MIOS_MIDI_InterfaceSet                  EQU	0x2c20
                                           MIOS_MIDI_MergerGet                     EQU	0x2c24
                                           MIOS_MIDI_MergerSet                     EQU	0x2c28
                                           MIOS_MIDI_RxBufferFree                  EQU	0x2c2c
                                           MIOS_MIDI_RxBufferGet                   EQU	0x2c30
                                           MIOS_MIDI_RxBufferPut                   EQU	0x2c34
                                           MIOS_MIDI_RxBufferUsed                  EQU	0x2c38
                                           MIOS_MIDI_TxBufferFlush                 EQU	0x2c3c
                                           MIOS_MIDI_TxBufferFree                  EQU	0x2c40
                                           MIOS_MIDI_TxBufferGet                   EQU	0x2c44
                                           MIOS_MIDI_TxBufferPut                   EQU	0x2c48
                                           MIOS_MIDI_TxBufferUsed                  EQU	0x2c4c
                                           MIOS_MPROC_MergerDisable                EQU	0x2c50
                                           MIOS_MPROC_MergerEnable                 EQU	0x2c54
                                           MIOS_MPROC_MergerGet                    EQU	0x2c58
                                           MIOS_AIN_DeadbandGet                    EQU	0x2c5c
                                           MIOS_AIN_DeadbandSet                    EQU	0x2c60
                                           MIOS_AIN_Muxed                          EQU	0x2c64
                                           MIOS_AIN_NumberGet                      EQU	0x2c68
                                           MIOS_AIN_NumberSet                      EQU	0x2c6c
                                           MIOS_AIN_Pin7bitGet                     EQU	0x2c70
                                           MIOS_AIN_PinGet                         EQU	0x2c74
                                           MIOS_AIN_PinLSBGet                      EQU	0x2c78
                                           MIOS_AIN_PinMSBGet                      EQU	0x2c7c
                                           MIOS_AIN_UnMuxed                        EQU	0x2c80
                                           MIOS_MF_PWM_DutyCycleDownGet            EQU	0x2c84
                                           MIOS_MF_PWM_DutyCycleDownSet            EQU	0x2c88
                                           MIOS_MF_PWM_DutyCycleUpGet              EQU	0x2c8c
                                           MIOS_MF_PWM_DutyCycleUpSet              EQU	0x2c90
                                           MIOS_MF_DeadbandGet                     EQU	0x2c94
                                           MIOS_MF_DeadbandSet                     EQU	0x2c98
                                           MIOS_MF_Disable                         EQU	0x2c9c
                                           MIOS_MF_Enable                          EQU	0x2ca0
                                           MIOS_MF_FaderMove                       EQU	0x2ca4
                                           MIOS_MF_SuspendDisable                  EQU	0x2ca8
                                           MIOS_MF_SuspendEnable                   EQU	0x2cac
                                           MIOS_MF_SuspendGet                      EQU	0x2cb0
                                           MIOS_DIN_PinGet                         EQU	0x2cb4
                                           MIOS_DIN_SRGet                          EQU	0x2cb8
                                           MIOS_DOUT_PinGet                        EQU	0x2cbc
                                           MIOS_DOUT_PinSet                        EQU	0x2cc0
                                           MIOS_DOUT_PinSet0                       EQU	0x2cc4
                                           MIOS_DOUT_PinSet1                       EQU	0x2cc8
                                           MIOS_DOUT_SRGet                         EQU	0x2ccc
                                           MIOS_DOUT_SRSet                         EQU	0x2cd0
                                           MIOS_ENC_Abs7bitAdd                     EQU	0x2cd4
                                           MIOS_ENC_Abs7bitGet                     EQU	0x2cd8
                                           MIOS_ENC_Abs7bitSet                     EQU	0x2cdc
                                           MIOS_ENC_NumberGet                      EQU	0x2ce0
                                           MIOS_ENC_SpeedGet                       EQU	0x2ce4
                                           MIOS_ENC_SpeedSet                       EQU	0x2ce8
                                           MIOS_SRIO_NumberGet                     EQU	0x2cec
                                           MIOS_SRIO_NumberSet                     EQU	0x2cf0
                                           MIOS_SRIO_TS_SensitivityGet             EQU	0x2cf4
                                           MIOS_SRIO_TS_SensitivitySet             EQU	0x2cf8
                                           MIOS_SRIO_UpdateFrqGet                  EQU	0x2cfc
                                           MIOS_SRIO_UpdateFrqSet                  EQU	0x2d00
                                           MIOS_LCD_Clear                          EQU	0x2d04
                                           MIOS_LCD_Cmd                            EQU	0x2d08
                                           MIOS_LCD_CursorGet                      EQU	0x2d0c
                                           MIOS_LCD_CursorSet                      EQU	0x2d10
                                           MIOS_LCD_Data                           EQU	0x2d14
                                           MIOS_LCD_Init                           EQU	0x2d18
                                           MIOS_LCD_PrintBCD1	                EQU	0x2d1c
                                           MIOS_LCD_PrintBCD2                      EQU	0x2d20
                                           MIOS_LCD_PrintBCD3                      EQU	0x2d24
                                           MIOS_LCD_PrintChar	                EQU	0x2d28
                                           MIOS_LCD_PrintHex1	                EQU	0x2d2c
                                           MIOS_LCD_PrintHex2                      EQU	0x2d30
                                           MIOS_LCD_PrintMessage                   EQU	0x2d34
                                           MIOS_LCD_PrintPreconfString             EQU	0x2d38
                                           MIOS_LCD_PrintString                    EQU	0x2d3c
                                           MIOS_LCD_TypeAutoSet                    EQU	0x2d40
                                           MIOS_LCD_TypeGet                        EQU	0x2d44
                                           MIOS_LCD_TypeSet                        EQU	0x2d48
                                           MIOS_LCD_YAddressGet                    EQU	0x2d4c
                                           MIOS_LCD_YAddressSet                    EQU	0x2d50
                                           MIOS_GLCD_FontInit                      EQU	0x2d54
                                           MIOS_GLCD_GCursorGet                    EQU	0x2d58
                                           MIOS_GLCD_GCursorSet                    EQU	0x2d5c
                                           MIOS_EEPROM_Read                        EQU	0x2d60
                                           MIOS_EEPROM_Write                       EQU	0x2d64
                                           MIOS_FLASH_Read                         EQU	0x2d68
                                           MIOS_FLASH_Write                        EQU	0x2d6c
                                           MIOS_BANKSTICK_Read                     EQU	0x2d70
                                           MIOS_BANKSTICK_Write                    EQU	0x2d74
                                           MIOS_TIMER_Init                         EQU	0x2d78
                                           MIOS_TIMER_Start                        EQU	0x2d7c
                                           MIOS_TIMER_Stop                         EQU	0x2d80
                                           MIOS_HLP_AddressFromTable               EQU	0x2d84
                                           MIOS_HLP_GetBitANDMask                  EQU	0x2d88
                                           MIOS_HLP_GetBitORMask                   EQU	0x2d8c
                                           MIOS_HLP_GetIndex_2bytes                EQU	0x2d90
                                           MIOS_HLP_GetIndex_4bytes                EQU	0x2d94
                                           MIOS_HLP_IndirectJump                   EQU	0x2d98
                                           MIOS_Delay                              EQU	0x2d9c
                                           MIOS_GPCounterGet                       EQU	0x2da0
                                           MIOS_Reset                              EQU	0x2da4
                                           MIOS_SystemResume                       EQU	0x2da8
                                           MIOS_SystemSuspend                      EQU	0x2dac
                                           MIOS_UserResume                         EQU	0x2db0
                                           MIOS_UserSuspend                        EQU	0x2db4
                                           MIOS_HLP_16bitAddSaturate		EQU	0x2db8
                                           MIOS_DIN_PinAutoRepeatEnable		EQU	0x2dbc
                                           MIOS_DIN_PinAutoRepeatDisable		EQU	0x2dc0
                                           MIOS_DIN_PinAutoRepeatGet		EQU	0x2dc4
                                           MIOS_CLCD_SpecialCharInit		EQU	0x2dc8
                                           MIOS_CLCD_SpecialCharsInit		EQU	0x2dcc
                                           MIOS_AIN_DynamicPrioSet			EQU	0x2dd0
                                           MIOS_AIN_DynamicPrioGet			EQU	0x2dd4
                                           MIOS_AIN_LastPinsGet			EQU	0x2dd8
                                           MIOS_BANKSTICK_CtrlSet			EQU	0x2ddc
                                           MIOS_BANKSTICK_CtrlGet			EQU	0x2de0
                                           MIOS_BANKSTICK_WritePage		EQU	0x2de4
                                           MIOS_HLP_Dec2BCD			EQU	0x2de8
                                           MIOS_LCD_PrintBCD4			EQU	0x2dec
                                           MIOS_LCD_PrintBCD5                      EQU	0x2df0
                                           MIOS_LCD_MessageStart			EQU	0x2df4
                                           MIOS_LCD_MessageStop			EQU	0x2df8
                                           MIOS_MF_PWM_PeriodGet                   EQU	0x2dfc
                                           MIOS_MF_PWM_PeriodSet                   EQU	0x2e00
                                           MIOS_IIC_Start				EQU	0x2e04
                                           MIOS_IIC_Stop				EQU	0x2e08
                                           MIOS_IIC_ByteSend			EQU	0x2e0c
                                           MIOS_IIC_ByteReceive			EQU	0x2e10
                                           MIOS_IIC_AckSend			EQU	0x2e14
                                           MIOS_IIC_NakSend			EQU	0x2e18
                                           MIOS_IIC_CtrlSet			EQU	0x2e1c
                                           MIOS_IIC_CtrlGet			EQU	0x2e20
                                           MIOS_SRIO_DebounceSet			EQU	0x2e24
                                           MIOS_SRIO_DebounceGet			EQU	0x2e28
                                           MIOS_MF_TouchDetectionReset		EQU	0x2e2c
                                           MIOS_BANKSTICK_ReadPage			EQU	0x2e30
                                           MIOS_EEPROM_ReadPage			EQU	0x2e34
                                           MIOS_EEPROM_WritePage			EQU	0x2e38
                                           MIOS_TIMER_ReInit			EQU	0x2e3c
                                           MIOS_RESERVED_144                       EQU	0x2e40
                                           MIOS_RESERVED_145                       EQU	0x2e44
                                           MIOS_RESERVED_146                       EQU	0x2e48
                                           MIOS_RESERVED_147                       EQU	0x2e4c
                                           MIOS_RESERVED_148                       EQU	0x2e50
                                           MIOS_RESERVED_149                       EQU	0x2e54
                                           MIOS_RESERVED_150                       EQU	0x2e58
                                           MIOS_RESERVED_151                       EQU	0x2e5c
                                           MIOS_RESERVED_152                       EQU	0x2e60
                                           MIOS_RESERVED_153                       EQU	0x2e64
                                           MIOS_RESERVED_154                       EQU	0x2e68
                                           MIOS_RESERVED_155                       EQU	0x2e6c
                                           MIOS_RESERVED_156                       EQU	0x2e70
                                           MIOS_RESERVED_157                       EQU	0x2e74
                                           MIOS_RESERVED_158                       EQU	0x2e78
                                           MIOS_RESERVED_159                       EQU	0x2e7c
                                           MIOS_RESERVED_160                       EQU	0x2e80
                                           MIOS_RESERVED_161                       EQU	0x2e84
                                           MIOS_RESERVED_162                       EQU	0x2e88
                                           MIOS_RESERVED_163                       EQU	0x2e8c
                                           MIOS_RESERVED_164                       EQU	0x2e90
                                           MIOS_RESERVED_165                       EQU	0x2e94
                                           MIOS_RESERVED_166                       EQU	0x2e98
                                           MIOS_RESERVED_167                       EQU	0x2e9c
                                           MIOS_RESERVED_168                       EQU	0x2ea0
                                           MIOS_RESERVED_169                       EQU	0x2ea4
                                           MIOS_RESERVED_170                       EQU	0x2ea8
                                           MIOS_RESERVED_171                       EQU	0x2eac
                                           MIOS_RESERVED_172                       EQU	0x2eb0
                                           MIOS_RESERVED_173                       EQU	0x2eb4
                                           MIOS_RESERVED_174                       EQU	0x2eb8
                                           MIOS_RESERVED_175                       EQU	0x2ebc
                                           MIOS_RESERVED_176                       EQU	0x2ec0
                                           MIOS_RESERVED_177                       EQU	0x2ec4
                                           MIOS_RESERVED_178                       EQU	0x2ec8
                                           MIOS_RESERVED_179                       EQU	0x2ecc
                                           MIOS_RESERVED_180                       EQU	0x2ed0
                                           MIOS_RESERVED_181                       EQU	0x2ed4
                                           MIOS_RESERVED_182                       EQU	0x2ed8
                                           MIOS_RESERVED_183                       EQU	0x2edc
                                           MIOS_RESERVED_184                       EQU	0x2ee0
                                           MIOS_RESERVED_185                       EQU	0x2ee4
                                           MIOS_RESERVED_186                       EQU	0x2ee8
                                           MIOS_RESERVED_187                       EQU	0x2eec
                                           MIOS_RESERVED_188                       EQU	0x2ef0
                                           MIOS_RESERVED_189                       EQU	0x2ef4
                                           MIOS_RESERVED_190                       EQU	0x2ef8
                                           MIOS_RESERVED_191                       EQU	0x2efc
                                           MIOS_RESERVED_192                       EQU	0x2f00
                                           MIOS_RESERVED_193                       EQU	0x2f04
                                           MIOS_RESERVED_194                       EQU	0x2f08
                                           MIOS_RESERVED_195                       EQU	0x2f0c
                                           MIOS_RESERVED_196                       EQU	0x2f10
                                           MIOS_RESERVED_197                       EQU	0x2f14
                                           MIOS_RESERVED_198                       EQU	0x2f18
                                           MIOS_RESERVED_199                       EQU	0x2f1c
                                           MIOS_RESERVED_200                       EQU	0x2f20
                                           MIOS_RESERVED_201                       EQU	0x2f24
                                           MIOS_RESERVED_202                       EQU	0x2f28
                                           MIOS_RESERVED_203                       EQU	0x2f2c
                                           MIOS_RESERVED_204                       EQU	0x2f30
                                           MIOS_RESERVED_205                       EQU	0x2f34
                                           MIOS_RESERVED_206                       EQU	0x2f38
                                           MIOS_RESERVED_207                       EQU	0x2f3c
                                           MIOS_RESERVED_208                       EQU	0x2f40
                                           MIOS_RESERVED_209                       EQU	0x2f44
                                           MIOS_RESERVED_210                       EQU	0x2f48
                                           MIOS_RESERVED_211                       EQU	0x2f4c
                                           MIOS_RESERVED_212                       EQU	0x2f50
                                           MIOS_RESERVED_213                       EQU	0x2f54
                                           MIOS_RESERVED_214                       EQU	0x2f58
                                           MIOS_RESERVED_215                       EQU	0x2f5c
                                           MIOS_RESERVED_216                       EQU	0x2f60
                                           MIOS_RESERVED_217                       EQU	0x2f64
                                           MIOS_RESERVED_218                       EQU	0x2f68
                                           MIOS_RESERVED_219                       EQU	0x2f6c
                                           MIOS_RESERVED_220                       EQU	0x2f70
                                           MIOS_RESERVED_221                       EQU	0x2f74
                                           MIOS_RESERVED_222                       EQU	0x2f78
                                           MIOS_RESERVED_223                       EQU	0x2f7c
                                           MIOS_RESERVED_224                       EQU	0x2f80
                                           MIOS_RESERVED_225                       EQU	0x2f84
                                           MIOS_RESERVED_226                       EQU	0x2f88
                                           MIOS_RESERVED_227                       EQU	0x2f8c
                                           MIOS_RESERVED_228                       EQU	0x2f90
                                           MIOS_RESERVED_229                       EQU	0x2f94
                                           MIOS_RESERVED_230                       EQU	0x2f98
                                           MIOS_RESERVED_231                       EQU	0x2f9c
                                           MIOS_RESERVED_232                       EQU	0x2fa0
                                           MIOS_RESERVED_233                       EQU	0x2fa4
                                           MIOS_RESERVED_234                       EQU	0x2fa8
                                           MIOS_RESERVED_235                       EQU	0x2fac
                                           MIOS_RESERVED_236                       EQU	0x2fb0
                                           MIOS_RESERVED_237                       EQU	0x2fb4
                                           MIOS_RESERVED_238                       EQU	0x2fb8
                                           MIOS_RESERVED_239                       EQU	0x2fbc
                                           MIOS_RESERVED_240                       EQU	0x2fc0
                                           MIOS_RESERVED_241                       EQU	0x2fc4
                                           MIOS_RESERVED_242                       EQU	0x2fc8
                                           MIOS_RESERVED_243                       EQU	0x2fcc
                                           MIOS_RESERVED_244                       EQU	0x2fd0
                                           MIOS_RESERVED_245                       EQU	0x2fd4
                                           MIOS_RESERVED_246                       EQU	0x2fd8
                                           MIOS_RESERVED_247                       EQU	0x2fdc
                                           MIOS_RESERVED_248                       EQU	0x2fe0
                                           MIOS_RESERVED_249                       EQU	0x2fe4
                                           MIOS_RESERVED_250                       EQU	0x2fe8
                                           MIOS_RESERVED_251                       EQU	0x2fec
                                           MIOS_RESERVED_252                       EQU	0x2ff0
                                           MIOS_RESERVED_253                       EQU	0x2ff4
                                           MIOS_RESERVED_254                       EQU	0x2ff8
                                           MIOS_RESERVED_255                       EQU	0x2ffc
                                           #include <macros.h>
                                           ; $Id: macros.h 49 2008-01-30 21:47:31Z tk $
                                           ;
                                           ; Macro Definitions
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           BRA_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	bra	label
                                           	ENDM
                                           
                                           
                                           BRA_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	bra	label
                                           	ENDM
                                           
                                           GOTO_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	goto	label
                                           	ENDM
                                           
                                           
                                           GOTO_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	goto	label
                                           	ENDM
                                           
                                           CALL_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	call	label
                                           	ENDM
                                           
                                           
                                           CALL_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	call	label
                                           	ENDM
                                           
                                           RCALL_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	rcall	label
                                           	ENDM
                                           
                                           
                                           RCALL_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	rcall	label
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           IRQ_DISABLE MACRO
                                                   bcf     INTCON, GIE
                                                   ENDM
                                           
                                           IRQ_ENABLE MACRO
                                                   bsf     INTCON, GIE
                                                   ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           TABLE_ADDR_FULL MACRO addr
                                           	movlw   LOW(addr)		; store Lo Byte
                                                   movwf   TBLPTRL
                                                   movlw   HIGH(addr)		; store Hi Byte
                                                   movwf   TBLPTRH
                                                   movlw   UPPER(addr)		; store upper Byte
                                                   movwf   TBLPTRU
                                                   ENDM
                                                   
                                           TABLE_ADDR MACRO addr
                                                   movlw   LOW(addr)		; store Lo Byte
                                                   movwf   TBLPTRL
                                                   movlw   HIGH(addr)		; store Hi Byte
                                                   movwf   TBLPTRH
                                           #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                                                   movlw   UPPER(addr)		; store Upper Byte
                                                   movwf   TBLPTRU
                                           #endif
                                                   ENDM
                                                   
                                           TABLE_H MACRO   addr
                                                   movlw   HIGH(addr)		; store Hi Byte
                                                   movwf   TBLPTRH
                                                   ENDM
                                           
                                           TABLE_L MACRO   addr
                                                   movlw   LOW(addr)		; store Lo Byte
                                                   movwf   TBLPTRL
                                                   ENDM
                                           
                                           TABLE_ADD_W MACRO
                                           	addwf	TBLPTRL, F
                                           	movlw	0x00
                                           	addwfc	TBLPTRH, F
                                           #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                                           	movlw	0x00
                                           	addwfc	TBLPTRU, F
                                           #endif
                                                   ENDM
                                           
                                           TABLE_ADDR_MUL_W MACRO addr, multiplicator
                                           	mullw	multiplicator
                                           	movlw	LOW(addr)
                                           	addwf	PRODL, W
                                           	movwf	TBLPTRL
                                           	movlw	HIGH(addr)
                                           	addwfc	PRODH, W
                                           	movwf	TBLPTRH
                                           #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                                           	clrf    TBLPTRU
                                                   movlw   UPPER(addr)
                                           	addwfc	TBLPTRU, F
                                           #endif
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           JUMPTABLE_2BYTES MACRO max_value
                                           	addlw	-(max_value)	; ensure that jump index is not greater than (max_value-1)
                                           	skpnc
                                           	movlw	-(max_value)
                                           	addlw	max_value
                                           	call	MIOS_HLP_GetIndex_2bytes
                                           	ENDM
                                           
                                           JUMPTABLE_2BYTES_UNSECURE MACRO
                                           	call	MIOS_HLP_GetIndex_2bytes
                                           	ENDM
                                           
                                           JUMPTABLE_4BYTES MACRO max_value
                                           	addlw	-(max_value)	; ensure that jump index is not greater than (max_value-1)
                                           	skpnc
                                           	return
                                           	addlw	(max_value)
                                           	call	MIOS_HLP_GetIndex_4bytes
                                           	ENDM
                                           
                                           JUMPTABLE_4BYTES_UNSECURE MACRO
                                           	call	MIOS_HLP_GetIndex_4bytes
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           TWOBYTE_ENTRY MACRO low_byte, high_byte
                                                   dw      (high_byte << 8) | (low_byte)
                                                   ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           #define skpnz	btfsc	STATUS, Z 
                                           #define skpz	btfss	STATUS, Z 
                                           #define skpndc	btfsc	STATUS, DC 
                                           #define skpdc	btfss	STATUS, DC
                                           #define skpnc	btfsc	STATUS, C
                                           #define skpc	btfss	STATUS, C
                                           #define clrc	bcf	STATUS, C
                                           #define setc	bsf	STATUS, C
                                           #define clrz	bcf	STATUS, Z
                                           #define setz	bsf	STATUS, Z
                                           #define rrf	rrcf	
                                           #define rlf	rlcf
                                           
                                           rgoto   MACRO   label
                                                   bra     label
                                                   ENDM
                                           
                                           SET_BSR MACRO   reg
                                                   movlb   HIGH(reg)
                                                   ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           FONT_ENTRY MACRO width, height, x0, char_offset
                                           	dw	((height) << 8) | (width), ((char_offset) << 8) | (x0)
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           STRING MACRO length, pos, str
                                           	da	((length) << 8) | (pos), str
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           ; ==========================================================================
                                           ; Import/Export Labels
                                           ; ==========================================================================
                                           	global	USER_LCD_Init
                                           	global	USER_LCD_Data
                                           	global	USER_LCD_Cmd
                                           	global	USER_LCD_Clear
                                           	global	USER_LCD_CursorSet
                                           	global	USER_LCD_PrintChar
                                           	global	USER_LCD_SpecialCharInit
                                           
                                           ; ==========================================================================
                                           ; Start code section and include driver code
                                           ; ==========================================================================
                                           APP_LCD CODE
                                           #include "app_lcd.inc"
                                           ; $Id: app_lcd.inc 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; MIOS Custom LCD Driver Skeleton
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  Following system variables are given by MIOS and can be directly 
                                           ;;  accessed by the driver. The addresses are defined in mios.h and
                                           ;;  should not be changed
                                           ;; 
                                           ;;  MIOS_GLCD_BUFFER	     a 8 byte buffer for data transfers
                                           ;;  MIOS_LCD_OPTION1	     contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;  MIOS_LCD_OPTION2	     contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;  MIOS_LCD_CURSOR_POS	     the current cursor pos of characters (GLCD: multiplied by width)
                                           ;;  MIOS_GLCD_GCURSOR_X	     for GLCDs: the current X position of graphical cursor
                                           ;;  MIOS_GLCD_GCURSOR_Y	     for GLCDs: the current Y position of graphical cursor
                                           ;;  MIOS_GLCD_FONT_WIDTH     for GLCDs: the fontwidth given by MIOS_GLCD_FontInit
                                           ;;  MIOS_GLCD_FONT_HEIGHT    for GLCDs: the fontheight given by MIOS_GLCD_FontInit
                                           ;;  MIOS_GLCD_FONT_X0        for GLCDs: the first byte within a char entry
                                           ;;  MIOS_GLCD_FONT_OFFSET    for GLCDs: the byte offset between the characters
                                           ;;  MIOS_GLCD_FONT_PTRL      for GLCDs: pointer to the character table, low-byte
                                           ;;  MIOS_GLCD_FONT_PTRH      for GLCDs: pointer to the character table, high-byte
                                           ;;  MIOS_LCD_TIMEOUT0        can be used for timeout loops
                                           ;;  MIOS_LCD_TIMEOUT1        can be used for timeout loops
                                           ;;  MIOS_GLCD_TMP1           can be used as temporary buffer
                                           ;;  MIOS_GLCD_TMP2           can be used as temporary buffer
                                           ;;  MIOS_GLCD_TMP3           can be used as temporary buffer
                                           ;;  MIOS_GLCD_TMP4           can be used as temporary buffer
                                           ;;  MIOS_LCD_Y0_OFFSET       Y0 offset of LCD
                                           ;;  MIOS_LCD_Y1_OFFSET       Y1 offset of LCD
                                           ;;  MIOS_LCD_Y2_OFFSET       Y2 offset of LCD
                                           ;;  MIOS_LCD_Y3_OFFSET       Y3 offset of LCD
                                           ;;  MIOS_LCD_CURSOR_POS_REAL unmapped cursor position which has been set with MIOS_LCD_CursorSet
                                           ;; 
                                           ;;  Note: the addresses are located in an upper bank and therefore have to
                                           ;;        be accessed with the BANKED flag. Also the BSR has to be justified
                                           ;;        before using the registers
                                           ;;  Example:
                                           ;;	SET_BSR MIOS_LCD_OPTION1	; sets BSR to the bank where MIOS_LCD_*
                                           ;;					; has been located. You don't need to
                                           ;;					; change the BSR for the other LCD registers
                                           ;;      movf    MIOS_LCD_OPTION1, W, BANKED	; get LCD option #1
                                           ;; 
                                           ;;  Important: to allow a proper interaction with MIOS applications, you are
                                           ;;  only allowed to modify MIOS_PARAMETER[123], the mutliplication registers
                                           ;;  and FSR1. You are not allowed to change TMP[1-5] or FSR0
                                           ;;  if you need some temporary registers, use the given addresses above or
                                           ;;  locate them to addresses which are not used by the application
                                           ;; --------------------------------------------------------------------------
                                           	
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the custom LCD should be initialized
                                           ;;  In:  MIOS_LCD_OPTION1 - contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_LCD_OPTION2 - contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;  Out: -
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Init
00626c   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the custom LCD should be cleared
                                           ;;  In:  MIOS_LCD_OPTION1 - contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_LCD_OPTION2 - contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;  Out: -
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Clear
00626e   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the cursor should be changed
                                           ;;  In:  MIOS_LCD_OPTION1 - contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_LCD_OPTION2 - contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_GLCD_CURSOR_X - horizontal cursor position (for GLCDs)
                                           ;;       MIOS_GLCD_CURSOR_X - vertical cursor position   (for GLCDs)
                                           ;;       MIOS_LCD_CURSOR    - character cursor position  (for CLCDs)
                                           ;;  Out: -
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_CursorSet
006270   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a character should be print
                                           ;;  In:  WREG - character
                                           ;;       all other MIOS_*LCD_* registers
                                           ;;  Out: GLCDs should justify the X/Y cursor position
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_PrintChar
006272   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: USER_LCD_Data
                                           ;;  DESCRIPTION: sends a data value to the LCD display.<BR>
                                           ;;  On CLCDs: branch directly to USER_LCD_PrintChar<BR>
                                           ;;  On GLCDs: ignore this function!
                                           ;;  IN:  data which should be sent
                                           ;;  OUT: -
                                           ;;  NOTE: see the custom_lcd_example for further details
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Data
006274   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: USER_LCD_Cmd
                                           ;;  DESCRIPTION: sends a command to the LCD display.<BR>
                                           ;;  On CLCDs: use this function to decode the HD44780 commands if required<BR>
                                           ;;  On GLCDs: ignore this function!
                                           ;;  IN:  command which should be sent
                                           ;;  OUT: -
                                           ;;  NOTE: see the custom_lcd_example for further details
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Cmd
006276   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: USER_LCD_SpecialCharInit
                                           ;;  DESCRIPTION: see MIOS_CLCD_SpecialCharInit
                                           ;;  IN:  number of special character (0-7) in WREG
                                           ;;       pointer to special char pattern in TBLPTR (consists of 8
                                           ;;          entries for every character-line)
                                           ;;  OUT: TBLPTR has to be set to next table entry (TBLPTR+=8)
                                           ;;  NOTE: see the custom_lcd_example for further details
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_SpecialCharInit
006278   0012     return	0                 	return
                                           	END
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.8.0 #5117 (Mar 23 2008) (Mac OS X i386)
                                           ; This file was generated Mon Feb  4 11:12:39 2013
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f452
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _MidiChannel
                                           	global _CurrentPreset
                                           	global _SendMidiOnButtonChange
                                           	global _ReloadActivePreset
                                           	global _ForceStartupPreset
                                           	global _ThisStartupPreset
                                           	global _RelayType
                                           	global _RelayMode
                                           	global _FootPreset
                                           	global _RelayState
                                           	global _LastButton
                                           	global _MenuPos
                                           	global _TargetPreset
                                           	global _MidiIn
                                           	global _toggle_dout
                                           	global _DoRelay
                                           	global _FootButton
                                           	global _RelayButton
                                           	global _MenuButton
                                           	global _LoadTestPreset
                                           	global _LoadGlobalOptions
                                           	global _SaveGlobalOptions
                                           	global _SetActivePreset
                                           	global _FootLedsOff
                                           	global _SetFootLed
                                           	global _LoadPreset
                                           	global _SavePreset
                                           	global _Preset_Up
                                           	global _Preset_Down
                                           	global _FactoryReset
                                           	global _StartupPreset
                                           	global _Init
                                           	global _Tick
                                           	global _Timer
                                           	global _DISPLAY_Init
                                           	global _DISPLAY_Tick
                                           	global _MPROC_NotifyReceivedEvnt
                                           	global _MPROC_NotifyFoundEvent
                                           	global _MPROC_NotifyTimeout
                                           	global _MPROC_NotifyReceivedByte
                                           	global _SR_Service_Prepare
                                           	global _SR_Service_Finish
                                           	global _DIN_NotifyToggle
                                           	global _ENC_NotifyChange
                                           	global _AIN_NotifyChange
                                           	global _RelayLedPin
                                           	global _RelayPin
                                           	global _FootLedPin
                                           	global _ButtonPin
                                           	global _MenuButtonPin
                                           	global _FootButtonPin
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _MIOS_BOX_CFG0
                                           	extern _MIOS_BOX_CFG1
                                           	extern _MIOS_BOX_STAT
                                           	extern _MIOS_PARAMETER1
                                           	extern _MIOS_PARAMETER2
                                           	extern _MIOS_PARAMETER3
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _MIOS_MIDI_BeginStream
                                           	extern _MIOS_MIDI_EndStream
                                           	extern _MIOS_MIDI_TxBufferPut
                                           	extern _MIOS_DOUT_PinSet
                                           	extern _MIOS_DOUT_PinSet0
                                           	extern _MIOS_DOUT_PinSet1
                                           	extern _MIOS_SRIO_NumberSet
                                           	extern _MIOS_SRIO_UpdateFrqSet
                                           	extern _MIOS_SRIO_DebounceSet
                                           	extern _MIOS_LCD_Clear
                                           	extern _MIOS_LCD_CursorSet
                                           	extern _MIOS_LCD_PrintBCD1
                                           	extern _MIOS_LCD_PrintBCD2
                                           	extern _MIOS_LCD_PrintBCD3
                                           	extern _MIOS_LCD_PrintChar
                                           	extern _MIOS_LCD_MessageStart
                                           	extern _MIOS_LCD_PrintCString
                                           	extern _MIOS_EEPROM_Read
                                           	extern _MIOS_EEPROM_Write
                                           	extern _MIOS_Delay
                                           	extern _DEBUG_MSG_SendHeader
                                           	extern _DEBUG_MSG_SendFooter
                                           	extern _DEBUG_MSG_SendChar
                                           	extern _DEBUG_MSG_SendCString
                                           	extern _DEBUG_MSG_SendBCD1
                                           	extern _DEBUG_MSG_SendBCD3
                                           	extern _mios_enc_pin_table
                                           	extern _mios_mproc_event_table
                                           	extern _MIOS_MPROC_EVENT_TABLE
                                           	extern _MIOS_ENC_PIN_TABLE
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L equ 0xfe1 ;; normaly 0xfe9, changed by mios-gpasm
                                           FSR0H equ 0xfe2 ;; normaly 0xfea, changed by mios-gpasm
                                           FSR1L equ 0xfe9 ;; normaly 0xfe1, changed by mios-gpasm
                                           FSR2L	equ	0xfd9
                                           INDF0 equ 0xfe7 ;; normaly 0xfef, changed by mios-gpasm
                                           POSTDEC1 equ 0xfed ;; normaly 0xfe5, changed by mios-gpasm
                                           PREINC1 equ 0xfec ;; normaly 0xfe4, changed by mios-gpasm
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers udata_ovr 0x0010 ;; normaly 0x0000, changed by mios-gpasm
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           
                                           udata_main_0	udata
                                           _RelayType	res	8
                                           
                                           udata_main_1	udata
                                           _RelayState	res	8
                                           
                                           udata_main_2	udata
                                           _RelayMode	res	8
                                           
                                           udata_main_3	udata
                                           _MidiChannel	res	1
                                           
                                           udata_main_4	udata
                                           _CurrentPreset	res	1
                                           
                                           udata_main_5	udata
                                           _SendMidiOnButtonChange	res	1
                                           
                                           udata_main_6	udata
                                           _ReloadActivePreset	res	1
                                           
                                           udata_main_7	udata
                                           _ForceStartupPreset	res	1
                                           
                                           udata_main_8	udata
                                           _ThisStartupPreset	res	1
                                           
                                           udata_main_9	udata
                                           _FootPreset	res	4
                                           
                                           udata_main_10	udata
                                           _LoadPreset_TargetRelayState_1_1	res	8
                                           
                                           udata_main_11	udata
                                           _LastButton	res	1
                                           
                                           udata_main_12	udata
                                           _MenuPos	res	1
                                           
                                           udata_main_13	udata
                                           _MidiIn	res	1
                                           
                                           udata_main_14	udata
                                           _TargetPreset	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__AIN_NotifyChange	code
                                           _AIN_NotifyChange:
                                           ;	.line	1581; main.c	void AIN_NotifyChange(unsigned char pin, unsigned int pin_value) __wparam
00627a   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
00627c   ffed
00627e   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
006280   ffd9
                                           ;	.line	1583; main.c	}
006282   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
006284   ffd9
006286   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ENC_NotifyChange	code
                                           _ENC_NotifyChange:
                                           ;	.line	1574; main.c	void ENC_NotifyChange(unsigned char encoder, char incrementer) __wparam
006288   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
00628a   ffed
00628c   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
00628e   ffd9
                                           ;	.line	1576; main.c	}
006290   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
006292   ffd9
006294   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__DIN_NotifyToggle	code
                                           _DIN_NotifyToggle:
                                           ;	.line	1511; main.c	void DIN_NotifyToggle(unsigned char pin, unsigned char pin_value) __wparam
005226   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
005228   ffed
00522a   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
00522c   ffd9
00522e   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
005230   ffed
005232   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
005234   ffed
005236   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
005238   ffed
00523a   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
00523c   ffed
00523e   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
005240   ffed
005242   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
005244   ffed
005246   6e10     movwf	0x10, 0            	MOVWF	r0x00
005248   0e02     movlw	0x2                	MOVLW	0x02
00524a   cfdb     movff	0xfdb, 0x11        	MOVFF	PLUSW2, r0x01
00524c   f011
                                           ;	.line	1516; main.c	number = FootButton(pin);
00524e   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
005250   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005252   ec6d     call	0x5cda, 0           	CALL	_FootButton
005254   f02e
005256   6e12     movwf	0x12, 0            	MOVWF	r0x02
005258   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1517; main.c	if ( number > 0)
00525a   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
00525c   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00525e   d03e     bra	0x52dc               	BRA	_00726_DS_
                                           ;	.line	1520; main.c	DEBUG_MSG_SendHeader();
005260   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
005262   f02b
                                           ;	.line	1521; main.c	DEBUG_MSG_SendCString("Footswitch: ");
005264   0e00     movlw	0                  	MOVLW	UPPER(__str_71)
005266   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005268   0e44     movlw	0x44               	MOVLW	HIGH(__str_71)
00526a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00526c   0e32     movlw	0x32               	MOVLW	LOW(__str_71)
00526e   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
005270   f02b
005272   0e02     movlw	0x2                	MOVLW	0x02
005274   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1522; main.c	DEBUG_MSG_SendBCD3(pin);
005276   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
005278   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
00527a   f02b
                                           ;	.line	1523; main.c	DEBUG_MSG_SendChar(' ');
00527c   0e20     movlw	0x20               	MOVLW	0x20
00527e   ec5a     call	0x56b4, 0           	CALL	_DEBUG_MSG_SendChar
005280   f02b
                                           ;	.line	1524; main.c	DEBUG_MSG_SendCString(pin_value ? "depressed" : "pressed");
005282   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
005284   e007     bz	0x5294                	BZ	_00738_DS_
005286   0e40     movlw	0x40               	MOVLW	LOW(__str_72)
005288   6e13     movwf	0x13, 0            	MOVWF	r0x03
00528a   0e44     movlw	0x44               	MOVLW	HIGH(__str_72)
00528c   6e14     movwf	0x14, 0            	MOVWF	r0x04
00528e   0e00     movlw	0                  	MOVLW	UPPER(__str_72)
005290   6e15     movwf	0x15, 0            	MOVWF	r0x05
005292   d006     bra	0x52a0               	BRA	_00739_DS_
                                           _00738_DS_:
005294   0e4a     movlw	0x4a               	MOVLW	LOW(__str_73)
005296   6e13     movwf	0x13, 0            	MOVWF	r0x03
005298   0e44     movlw	0x44               	MOVLW	HIGH(__str_73)
00529a   6e14     movwf	0x14, 0            	MOVWF	r0x04
00529c   0e00     movlw	0                  	MOVLW	UPPER(__str_73)
00529e   6e15     movwf	0x15, 0            	MOVWF	r0x05
                                           _00739_DS_:
0052a0   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
0052a2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0052a4   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
0052a6   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0052a8   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0052aa   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
0052ac   f02b
0052ae   0e02     movlw	0x2                	MOVLW	0x02
0052b0   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1525; main.c	DEBUG_MSG_SendFooter();
0052b2   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
0052b4   f02b
                                           ;	.line	1528; main.c	LoadPreset( FootPreset[number-1] );
0052b6   0412     decf	0x12, 0, 0          	DECF	r0x02, W
0052b8   6e13     movwf	0x13, 0            	MOVWF	r0x03
0052ba   6a14     clrf	0x14, 0             	CLRF	r0x04
0052bc   0ea0     movlw	0xa0               	MOVLW	LOW(_FootPreset)
0052be   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
0052c0   0e00     movlw	0                  	MOVLW	HIGH(_FootPreset)
0052c2   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
0052c4   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
0052c6   ffe1
0052c8   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
0052ca   ffe2
0052cc   cfe7     movff	0xfe7, 0x13        	MOVFF	INDF0, r0x03
0052ce   f013
0052d0   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0052d2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0052d4   ec3c     call	0x4478, 0           	CALL	_LoadPreset
0052d6   f022
0052d8   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1529; main.c	return;
0052da   d060     bra	0x539c               	BRA	_00736_DS_
                                           _00726_DS_:
                                           ;	.line	1533; main.c	if( pin_value == 0 ) 
0052dc   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0052de   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
0052e0   d05d     bra	0x539c               	BRA	_00736_DS_
                                           ;	.line	1536; main.c	DEBUG_MSG_SendHeader();
0052e2   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
0052e4   f02b
                                           ;	.line	1537; main.c	DEBUG_MSG_SendCString("Button: ");
0052e6   0e00     movlw	0                  	MOVLW	UPPER(__str_74)
0052e8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0052ea   0e44     movlw	0x44               	MOVLW	HIGH(__str_74)
0052ec   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0052ee   0e52     movlw	0x52               	MOVLW	LOW(__str_74)
0052f0   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
0052f2   f02b
0052f4   0e02     movlw	0x2                	MOVLW	0x02
0052f6   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1538; main.c	DEBUG_MSG_SendBCD3(pin);
0052f8   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0052fa   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
0052fc   f02b
                                           ;	.line	1539; main.c	DEBUG_MSG_SendChar(' ');
0052fe   0e20     movlw	0x20               	MOVLW	0x20
005300   ec5a     call	0x56b4, 0           	CALL	_DEBUG_MSG_SendChar
005302   f02b
                                           ;	.line	1540; main.c	DEBUG_MSG_SendCString(pin_value ? "depressed" : "pressed");
005304   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
005306   e007     bz	0x5316                	BZ	_00740_DS_
005308   0e40     movlw	0x40               	MOVLW	LOW(__str_72)
00530a   6e11     movwf	0x11, 0            	MOVWF	r0x01
00530c   0e44     movlw	0x44               	MOVLW	HIGH(__str_72)
00530e   6e13     movwf	0x13, 0            	MOVWF	r0x03
005310   0e00     movlw	0                  	MOVLW	UPPER(__str_72)
005312   6e14     movwf	0x14, 0            	MOVWF	r0x04
005314   d006     bra	0x5322               	BRA	_00741_DS_
                                           _00740_DS_:
005316   0e4a     movlw	0x4a               	MOVLW	LOW(__str_73)
005318   6e11     movwf	0x11, 0            	MOVWF	r0x01
00531a   0e44     movlw	0x44               	MOVLW	HIGH(__str_73)
00531c   6e13     movwf	0x13, 0            	MOVWF	r0x03
00531e   0e00     movlw	0                  	MOVLW	UPPER(__str_73)
005320   6e14     movwf	0x14, 0            	MOVWF	r0x04
                                           _00741_DS_:
005322   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
005324   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005326   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
005328   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00532a   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00532c   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
00532e   f02b
005330   0e02     movlw	0x2                	MOVLW	0x02
005332   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1541; main.c	DEBUG_MSG_SendFooter();
005334   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
005336   f02b
                                           ;	.line	1544; main.c	number = RelayButton(pin);
005338   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00533a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00533c   ec16     call	0x5c2c, 0           	CALL	_RelayButton
00533e   f02e
005340   6e12     movwf	0x12, 0            	MOVWF	r0x02
005342   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1545; main.c	if ( number )
005344   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
005346   e008     bz	0x5358                	BZ	_00728_DS_
                                           ;	.line	1548; main.c	DoRelay(number-1);
005348   0412     decf	0x12, 0, 0          	DECF	r0x02, W
00534a   6e11     movwf	0x11, 0            	MOVWF	r0x01
00534c   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00534e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005350   ec41     call	0x4e82, 0           	CALL	_DoRelay
005352   f027
005354   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1549; main.c	return;
005356   d022     bra	0x539c               	BRA	_00736_DS_
                                           _00728_DS_:
                                           ;	.line	1552; main.c	number = MenuButton(pin);
005358   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00535a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00535c   ecbf     call	0x5b7e, 0           	CALL	_MenuButton
00535e   f02d
005360   6e12     movwf	0x12, 0            	MOVWF	r0x02
005362   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1553; main.c	if(( number == MENU_BUTTON_1 ) || ( number == MENU_BUTTON_2 ) ||
005364   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
005366   0a01     xorlw	0x1                	XORLW	0x01
005368   e009     bz	0x537c                	BZ	_00729_DS_
00536a   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
00536c   0a02     xorlw	0x2                	XORLW	0x02
00536e   e006     bz	0x537c                	BZ	_00729_DS_
                                           ;	.line	1554; main.c	( number == MENU_BUTTON_3 ) || ( number == MENU_BUTTON_4 ))
005370   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
005372   0a03     xorlw	0x3                	XORLW	0x03
005374   e003     bz	0x537c                	BZ	_00729_DS_
005376   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
005378   0a04     xorlw	0x4                	XORLW	0x04
00537a   e103     bnz	0x5382               	BNZ	_00730_DS_
                                           _00729_DS_:
                                           ;	.line	1556; main.c	LastButton = number;
00537c   c012     movff	0x12, 0xaa         	MOVFF	r0x02, _LastButton
00537e   f0aa
                                           ;	.line	1557; main.c	return;
005380   d00d     bra	0x539c               	BRA	_00736_DS_
                                           _00730_DS_:
                                           ;	.line	1561; main.c	DEBUG_MSG_SendHeader();
005382   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
005384   f02b
                                           ;	.line	1562; main.c	DEBUG_MSG_SendCString("NOTHING TO DO IN DIN NOTIFY");
005386   0e00     movlw	0                  	MOVLW	UPPER(__str_75)
005388   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00538a   0e44     movlw	0x44               	MOVLW	HIGH(__str_75)
00538c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00538e   0e5c     movlw	0x5c               	MOVLW	LOW(__str_75)
005390   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
005392   f02b
005394   0e02     movlw	0x2                	MOVLW	0x02
005396   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1563; main.c	DEBUG_MSG_SendFooter();
005398   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
00539a   f02b
                                           _00736_DS_:
00539c   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
00539e   f015
0053a0   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
0053a2   f014
0053a4   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
0053a6   f013
0053a8   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
0053aa   f012
0053ac   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
0053ae   f011
0053b0   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
0053b2   f010
0053b4   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
0053b6   ffd9
0053b8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SR_Service_Finish	code
                                           _SR_Service_Finish:
                                           ;	.line	1505; main.c	}
00633e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SR_Service_Prepare	code
                                           _SR_Service_Prepare:
                                           ;	.line	1498; main.c	}
006340   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyReceivedByte	code
                                           _MPROC_NotifyReceivedByte:
                                           ;	.line	1489; main.c	void MPROC_NotifyReceivedByte(unsigned char byte) __wparam
006296   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
006298   ffed
00629a   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
00629c   ffd9
                                           ;	.line	1491; main.c	}
00629e   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
0062a0   ffd9
0062a2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyTimeout	code
                                           _MPROC_NotifyTimeout:
                                           ;	.line	1484; main.c	}
006342   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyFoundEvent	code
                                           _MPROC_NotifyFoundEvent:
                                           ;	.line	1474; main.c	void MPROC_NotifyFoundEvent(unsigned entry, unsigned char evnt0, unsigned char evnt1, unsigned char evnt2) __wparam
0062a4   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
0062a6   ffed
0062a8   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
0062aa   ffd9
                                           ;	.line	1476; main.c	}
0062ac   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
0062ae   ffd9
0062b0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyReceivedEvnt	code
                                           _MPROC_NotifyReceivedEvnt:
                                           ;	.line	1327; main.c	void MPROC_NotifyReceivedEvnt(unsigned char evnt0, unsigned char evnt1, unsigned char evnt2) __wparam
004bcc   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
004bce   ffed
004bd0   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
004bd2   ffd9
004bd4   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
004bd6   ffed
004bd8   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
004bda   ffed
004bdc   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
004bde   ffed
004be0   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
004be2   ffed
004be4   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
004be6   ffed
004be8   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
004bea   ffed
004bec   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
004bee   ffed
004bf0   6e10     movwf	0x10, 0            	MOVWF	r0x00
004bf2   0e02     movlw	0x2                	MOVLW	0x02
004bf4   cfdb     movff	0xfdb, 0x11        	MOVFF	PLUSW2, r0x01
004bf6   f011
004bf8   0e03     movlw	0x3                	MOVLW	0x03
004bfa   cfdb     movff	0xfdb, 0x12        	MOVFF	PLUSW2, r0x02
004bfc   f012
                                           ;	.line	1344; main.c	DEBUG_MSG_SendHeader();
004bfe   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
004c00   f02b
                                           ;	.line	1345; main.c	DEBUG_MSG_SendCString("Received Midi Message : ");
004c02   0e00     movlw	0                  	MOVLW	UPPER(__str_59)
004c04   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004c06   0e43     movlw	0x43               	MOVLW	HIGH(__str_59)
004c08   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004c0a   0e68     movlw	0x68               	MOVLW	LOW(__str_59)
004c0c   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004c0e   f02b
004c10   0e02     movlw	0x2                	MOVLW	0x02
004c12   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1346; main.c	DEBUG_MSG_SendBCD3(evnt0);
004c14   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004c16   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004c18   f02b
                                           ;	.line	1347; main.c	DEBUG_MSG_SendChar(' ');
004c1a   0e20     movlw	0x20               	MOVLW	0x20
004c1c   ec5a     call	0x56b4, 0           	CALL	_DEBUG_MSG_SendChar
004c1e   f02b
                                           ;	.line	1348; main.c	DEBUG_MSG_SendBCD3(evnt1);
004c20   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004c22   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004c24   f02b
                                           ;	.line	1349; main.c	DEBUG_MSG_SendChar(' ');
004c26   0e20     movlw	0x20               	MOVLW	0x20
004c28   ec5a     call	0x56b4, 0           	CALL	_DEBUG_MSG_SendChar
004c2a   f02b
                                           ;	.line	1350; main.c	DEBUG_MSG_SendBCD3(evnt2);
004c2c   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
004c2e   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004c30   f02b
                                           ;	.line	1351; main.c	DEBUG_MSG_SendFooter();
004c32   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
004c34   f02b
                                           ;	.line	1355; main.c	MidiIn = 1;
004c36   0e01     movlw	0x1                	MOVLW	0x01
004c38   0100     movlb	0                  	BANKSEL	_MidiIn
004c3a   6fac     movwf	0xac, 0x1          	MOVWF	_MidiIn, B
004c3c   0100     movlb	0                  	BANKSEL	_MidiChannel
                                           ;	.line	1358; main.c	if ( (MidiChannel!=0) && ((evnt0 & 0x0F) != (MidiChannel-1)) )
004c3e   51a4     movf	0xa4, 0, 0x1        	MOVF	_MidiChannel, W, B
004c40   e01f     bz	0x4c80                	BZ	_00658_DS_
004c42   0e0f     movlw	0xf                	MOVLW	0x0f
004c44   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
004c46   6e13     movwf	0x13, 0            	MOVWF	r0x03
004c48   c0a4     movff	0xa4, 0x14         	MOVFF	_MidiChannel, r0x04
004c4a   f014
004c4c   6a15     clrf	0x15, 0             	CLRF	r0x05
004c4e   0eff     movlw	0xff               	MOVLW	0xff
004c50   2614     addwf	0x14, 0x1, 0       	ADDWF	r0x04, F
004c52   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
004c54   0615     decf	0x15, 0x1, 0        	DECF	r0x05, F
004c56   6a16     clrf	0x16, 0             	CLRF	r0x06
004c58   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004c5a   1814     xorwf	0x14, 0, 0         	XORWF	r0x04, W
004c5c   e103     bnz	0x4c64               	BNZ	_00691_DS_
004c5e   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
004c60   1815     xorwf	0x15, 0, 0         	XORWF	r0x05, W
004c62   e00e     bz	0x4c80                	BZ	_00658_DS_
                                           _00691_DS_:
                                           ;	.line	1362; main.c	DEBUG_MSG_SendHeader();
004c64   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
004c66   f02b
                                           ;	.line	1363; main.c	DEBUG_MSG_SendCString("Ignored, Bad MIDI channel");
004c68   0e00     movlw	0                  	MOVLW	UPPER(__str_60)
004c6a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004c6c   0e43     movlw	0x43               	MOVLW	HIGH(__str_60)
004c6e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004c70   0e82     movlw	0x82               	MOVLW	LOW(__str_60)
004c72   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004c74   f02b
004c76   0e02     movlw	0x2                	MOVLW	0x02
004c78   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1364; main.c	DEBUG_MSG_SendFooter();
004c7a   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
004c7c   f02b
                                           ;	.line	1366; main.c	return;
004c7e   d0f0     bra	0x4e60               	BRA	_00678_DS_
                                           _00658_DS_:
                                           ;	.line	1370; main.c	if ( (evnt0 & 0xF0) != 0xC0 ) //Program change messages only
004c80   0ef0     movlw	0xf0               	MOVLW	0xf0
004c82   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
004c84   6e13     movwf	0x13, 0            	MOVWF	r0x03
004c86   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004c88   0ac0     xorlw	0xc0               	XORLW	0xc0
004c8a   e00e     bz	0x4ca8                	BZ	_00661_DS_
                                           ;	.line	1374; main.c	DEBUG_MSG_SendHeader();
004c8c   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
004c8e   f02b
                                           ;	.line	1375; main.c	DEBUG_MSG_SendCString("Ignored, not a PC message");
004c90   0e00     movlw	0                  	MOVLW	UPPER(__str_61)
004c92   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004c94   0e43     movlw	0x43               	MOVLW	HIGH(__str_61)
004c96   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004c98   0e9c     movlw	0x9c               	MOVLW	LOW(__str_61)
004c9a   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004c9c   f02b
004c9e   0e02     movlw	0x2                	MOVLW	0x02
004ca0   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1376; main.c	DEBUG_MSG_SendFooter();
004ca2   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
004ca4   f02b
                                           ;	.line	1378; main.c	return;
004ca6   d0dc     bra	0x4e60               	BRA	_00678_DS_
                                           _00661_DS_:
                                           ;	.line	1383; main.c	if ( evnt1 <= 99 ) 
004ca8   0e64     movlw	0x64               	MOVLW	0x64
004caa   5c11     subwf	0x11, 0, 0         	SUBWF	r0x01, W
004cac   e221     bc	0x4cf0                	BC	_00676_DS_
                                           ;	.line	1386; main.c	DEBUG_MSG_SendHeader();
004cae   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
004cb0   f02b
                                           ;	.line	1387; main.c	DEBUG_MSG_SendCString("PC");
004cb2   0e00     movlw	0                  	MOVLW	UPPER(__str_62)
004cb4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004cb6   0e43     movlw	0x43               	MOVLW	HIGH(__str_62)
004cb8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004cba   0eb6     movlw	0xb6               	MOVLW	LOW(__str_62)
004cbc   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004cbe   f02b
004cc0   0e02     movlw	0x2                	MOVLW	0x02
004cc2   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1388; main.c	DEBUG_MSG_SendBCD3(evnt1);
004cc4   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004cc6   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004cc8   f02b
                                           ;	.line	1389; main.c	DEBUG_MSG_SendCString(" : Loading preset");
004cca   0e00     movlw	0                  	MOVLW	UPPER(__str_63)
004ccc   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004cce   0e43     movlw	0x43               	MOVLW	HIGH(__str_63)
004cd0   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004cd2   0eba     movlw	0xba               	MOVLW	LOW(__str_63)
004cd4   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004cd6   f02b
004cd8   0e02     movlw	0x2                	MOVLW	0x02
004cda   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1390; main.c	DEBUG_MSG_SendFooter();
004cdc   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
004cde   f02b
                                           ;	.line	1394; main.c	LoadPreset(evnt1+1);    // preset start @ 1
004ce0   2811     incf	0x11, 0, 0          	INCF	r0x01, W
004ce2   6e13     movwf	0x13, 0            	MOVWF	r0x03
004ce4   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004ce6   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004ce8   ec3c     call	0x4478, 0           	CALL	_LoadPreset
004cea   f022
004cec   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
004cee   d0b8     bra	0x4e60               	BRA	_00678_DS_
                                           _00676_DS_:
                                           ;	.line	1399; main.c	else if  (evnt1 <= 107 )
004cf0   0e6c     movlw	0x6c               	MOVLW	0x6c
004cf2   5c11     subwf	0x11, 0, 0         	SUBWF	r0x01, W
004cf4   e231     bc	0x4d58                	BC	_00673_DS_
                                           ;	.line	1402; main.c	DEBUG_MSG_SendHeader();
004cf6   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
004cf8   f02b
                                           ;	.line	1403; main.c	DEBUG_MSG_SendCString("PC");
004cfa   0e00     movlw	0                  	MOVLW	UPPER(__str_62)
004cfc   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004cfe   0e43     movlw	0x43               	MOVLW	HIGH(__str_62)
004d00   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004d02   0eb6     movlw	0xb6               	MOVLW	LOW(__str_62)
004d04   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004d06   f02b
004d08   0e02     movlw	0x2                	MOVLW	0x02
004d0a   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1404; main.c	DEBUG_MSG_SendBCD3(evnt1);
004d0c   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004d0e   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004d10   f02b
                                           ;	.line	1405; main.c	DEBUG_MSG_SendCString(" : Toggle Relay");
004d12   0e00     movlw	0                  	MOVLW	UPPER(__str_64)
004d14   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004d16   0e43     movlw	0x43               	MOVLW	HIGH(__str_64)
004d18   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004d1a   0ecc     movlw	0xcc               	MOVLW	LOW(__str_64)
004d1c   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004d1e   f02b
004d20   0e02     movlw	0x2                	MOVLW	0x02
004d22   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1406; main.c	DEBUG_MSG_SendBCD3(evnt1-99);
004d24   0e9d     movlw	0x9d               	MOVLW	0x9d
004d26   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
004d28   6e13     movwf	0x13, 0            	MOVWF	r0x03
004d2a   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004d2c   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004d2e   f02b
                                           ;	.line	1407; main.c	DEBUG_MSG_SendCString(" Status");
004d30   0e00     movlw	0                  	MOVLW	UPPER(__str_65)
004d32   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004d34   0e43     movlw	0x43               	MOVLW	HIGH(__str_65)
004d36   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004d38   0edc     movlw	0xdc               	MOVLW	LOW(__str_65)
004d3a   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004d3c   f02b
004d3e   0e02     movlw	0x2                	MOVLW	0x02
004d40   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1408; main.c	DEBUG_MSG_SendFooter();
004d42   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
004d44   f02b
                                           ;	.line	1411; main.c	DoRelay(evnt1-100);     // relays start @ 0
004d46   0e9c     movlw	0x9c               	MOVLW	0x9c
004d48   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
004d4a   6e13     movwf	0x13, 0            	MOVWF	r0x03
004d4c   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004d4e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004d50   ec41     call	0x4e82, 0           	CALL	_DoRelay
004d52   f027
004d54   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
004d56   d084     bra	0x4e60               	BRA	_00678_DS_
                                           _00673_DS_:
                                           ;	.line	1416; main.c	else if ( evnt1 == 108 )
004d58   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004d5a   0a6c     xorlw	0x6c               	XORLW	0x6c
004d5c   e12d     bnz	0x4db8               	BNZ	_00670_DS_
                                           ;	.line	1419; main.c	DEBUG_MSG_SendHeader();
004d5e   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
004d60   f02b
                                           ;	.line	1420; main.c	DEBUG_MSG_SendCString("PC109 : Up one preset");
004d62   0e00     movlw	0                  	MOVLW	UPPER(__str_66)
004d64   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004d66   0e43     movlw	0x43               	MOVLW	HIGH(__str_66)
004d68   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004d6a   0ee4     movlw	0xe4               	MOVLW	LOW(__str_66)
004d6c   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004d6e   f02b
004d70   0e02     movlw	0x2                	MOVLW	0x02
004d72   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1421; main.c	DEBUG_MSG_SendCString("from");
004d74   0e00     movlw	0                  	MOVLW	UPPER(__str_67)
004d76   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004d78   0e43     movlw	0x43               	MOVLW	HIGH(__str_67)
004d7a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004d7c   0efa     movlw	0xfa               	MOVLW	LOW(__str_67)
004d7e   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004d80   f02b
004d82   0e02     movlw	0x2                	MOVLW	0x02
004d84   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
004d86   0100     movlb	0                  	BANKSEL	_CurrentPreset
                                           ;	.line	1422; main.c	DEBUG_MSG_SendBCD3(CurrentPreset);
004d88   51a5     movf	0xa5, 0, 0x1        	MOVF	_CurrentPreset, W, B
004d8a   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004d8c   f02b
                                           ;	.line	1423; main.c	DEBUG_MSG_SendCString("to");
004d8e   0e00     movlw	0                  	MOVLW	UPPER(__str_68)
004d90   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004d92   0e44     movlw	0x44               	MOVLW	HIGH(__str_68)
004d94   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004d96   0e00     movlw	0                  	MOVLW	LOW(__str_68)
004d98   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004d9a   f02b
004d9c   0e02     movlw	0x2                	MOVLW	0x02
004d9e   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1424; main.c	DEBUG_MSG_SendBCD3(evnt1);
004da0   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004da2   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004da4   f02b
                                           ;	.line	1425; main.c	DEBUG_MSG_SendFooter();
004da6   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
004da8   f02b
                                           ;	.line	1429; main.c	if(!Preset_Up())
004daa   ec0b     call	0x6016, 0           	CALL	_Preset_Up
004dac   f030
004dae   6e13     movwf	0x13, 0            	MOVWF	r0x03
004db0   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004db2   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
004db4   d055     bra	0x4e60               	BRA	_00678_DS_
                                           ;	.line	1430; main.c	{ return;}
004db6   d054     bra	0x4e60               	BRA	_00678_DS_
                                           _00670_DS_:
                                           ;	.line	1433; main.c	else if ( evnt1 == 109 )
004db8   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004dba   0a6d     xorlw	0x6d               	XORLW	0x6d
004dbc   e12c     bnz	0x4e16               	BNZ	_00667_DS_
                                           ;	.line	1436; main.c	DEBUG_MSG_SendHeader();
004dbe   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
004dc0   f02b
                                           ;	.line	1437; main.c	DEBUG_MSG_SendCString("PC109 : Up one preset");
004dc2   0e00     movlw	0                  	MOVLW	UPPER(__str_66)
004dc4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004dc6   0e43     movlw	0x43               	MOVLW	HIGH(__str_66)
004dc8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004dca   0ee4     movlw	0xe4               	MOVLW	LOW(__str_66)
004dcc   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004dce   f02b
004dd0   0e02     movlw	0x2                	MOVLW	0x02
004dd2   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1438; main.c	DEBUG_MSG_SendCString("from");
004dd4   0e00     movlw	0                  	MOVLW	UPPER(__str_67)
004dd6   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004dd8   0e43     movlw	0x43               	MOVLW	HIGH(__str_67)
004dda   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004ddc   0efa     movlw	0xfa               	MOVLW	LOW(__str_67)
004dde   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004de0   f02b
004de2   0e02     movlw	0x2                	MOVLW	0x02
004de4   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
004de6   0100     movlb	0                  	BANKSEL	_CurrentPreset
                                           ;	.line	1439; main.c	DEBUG_MSG_SendBCD3(CurrentPreset);
004de8   51a5     movf	0xa5, 0, 0x1        	MOVF	_CurrentPreset, W, B
004dea   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004dec   f02b
                                           ;	.line	1440; main.c	DEBUG_MSG_SendCString("to");
004dee   0e00     movlw	0                  	MOVLW	UPPER(__str_68)
004df0   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004df2   0e44     movlw	0x44               	MOVLW	HIGH(__str_68)
004df4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004df6   0e00     movlw	0                  	MOVLW	LOW(__str_68)
004df8   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004dfa   f02b
004dfc   0e02     movlw	0x2                	MOVLW	0x02
004dfe   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1441; main.c	DEBUG_MSG_SendBCD3(evnt1);
004e00   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004e02   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004e04   f02b
                                           ;	.line	1442; main.c	DEBUG_MSG_SendFooter();
004e06   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
004e08   f02b
                                           ;	.line	1446; main.c	if(!Preset_Down())
004e0a   ec4c     call	0x6098, 0           	CALL	_Preset_Down
004e0c   f030
004e0e   6e13     movwf	0x13, 0            	MOVWF	r0x03
004e10   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004e12   e126     bnz	0x4e60               	BNZ	_00678_DS_
                                           ;	.line	1447; main.c	{ return;}
004e14   d025     bra	0x4e60               	BRA	_00678_DS_
                                           _00667_DS_:
                                           ;	.line	1455; main.c	DEBUG_MSG_SendHeader();
004e16   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
004e18   f02b
                                           ;	.line	1456; main.c	DEBUG_MSG_SendCString("Ignored Midi In message: ");
004e1a   0e00     movlw	0                  	MOVLW	UPPER(__str_69)
004e1c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004e1e   0e44     movlw	0x44               	MOVLW	HIGH(__str_69)
004e20   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004e22   0e04     movlw	0x4                	MOVLW	LOW(__str_69)
004e24   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004e26   f02b
004e28   0e02     movlw	0x2                	MOVLW	0x02
004e2a   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1457; main.c	DEBUG_MSG_SendBCD3(evnt0);
004e2c   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004e2e   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004e30   f02b
                                           ;	.line	1458; main.c	DEBUG_MSG_SendChar(' ');
004e32   0e20     movlw	0x20               	MOVLW	0x20
004e34   ec5a     call	0x56b4, 0           	CALL	_DEBUG_MSG_SendChar
004e36   f02b
                                           ;	.line	1459; main.c	DEBUG_MSG_SendBCD3(evnt1);
004e38   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004e3a   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004e3c   f02b
                                           ;	.line	1460; main.c	DEBUG_MSG_SendChar(' ');
004e3e   0e20     movlw	0x20               	MOVLW	0x20
004e40   ec5a     call	0x56b4, 0           	CALL	_DEBUG_MSG_SendChar
004e42   f02b
                                           ;	.line	1461; main.c	DEBUG_MSG_SendBCD3(evnt2);
004e44   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
004e46   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004e48   f02b
                                           ;	.line	1462; main.c	DEBUG_MSG_SendCString("PC number too high");
004e4a   0e00     movlw	0                  	MOVLW	UPPER(__str_70)
004e4c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004e4e   0e44     movlw	0x44               	MOVLW	HIGH(__str_70)
004e50   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004e52   0e1e     movlw	0x1e               	MOVLW	LOW(__str_70)
004e54   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004e56   f02b
004e58   0e02     movlw	0x2                	MOVLW	0x02
004e5a   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1463; main.c	DEBUG_MSG_SendFooter();
004e5c   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
004e5e   f02b
                                           _00678_DS_:
                                           ;	.line	1465; main.c	return;
004e60   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
004e62   f016
004e64   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
004e66   f015
004e68   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
004e6a   f014
004e6c   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
004e6e   f013
004e70   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
004e72   f012
004e74   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
004e76   f011
004e78   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
004e7a   f010
004e7c   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004e7e   ffd9
004e80   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__DISPLAY_Tick	code
                                           _DISPLAY_Tick:
0060d8   0100     movlb	0                  	BANKSEL	_MidiIn
                                           ;	.line	1314; main.c	if ( MidiIn )
0060da   51ac     movf	0xac, 0, 0x1        	MOVF	_MidiIn, W, B
0060dc   e00b     bz	0x60f4                	BZ	_00652_DS_
                                           ;	.line	1317; main.c	MIOS_LCD_CursorSet(0x00 + 15);
0060de   0e0f     movlw	0xf                	MOVLW	0x0f
0060e0   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
0060e2   f016
                                           ;	.line	1318; main.c	MIOS_LCD_PrintChar('M');
0060e4   0e4d     movlw	0x4d               	MOVLW	0x4d
0060e6   ec94     call	0x2d28, 0           	CALL	_MIOS_LCD_PrintChar
0060e8   f016
                                           ;	.line	1319; main.c	MIOS_LCD_MessageStart(40);
0060ea   0e28     movlw	0x28               	MOVLW	0x28
0060ec   ecfa     call	0x2df4, 0           	CALL	_MIOS_LCD_MessageStart
0060ee   f016
0060f0   0100     movlb	0                  	BANKSEL	_MidiIn
                                           ;	.line	1320; main.c	MidiIn=0;
0060f2   6bac     clrf	0xac, 0x1           	CLRF	_MidiIn, B
                                           _00652_DS_:
0060f4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__DISPLAY_Init	code
                                           _DISPLAY_Init:
                                           ;	.line	1297; main.c	MIOS_LCD_Clear();
005f76   ec82     call	0x2d04, 0           	CALL	_MIOS_LCD_Clear
005f78   f016
                                           ;	.line	1298; main.c	MIOS_LCD_CursorSet(0x00 + 0);
005f7a   0e00     movlw	0                  	MOVLW	0x00
005f7c   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
005f7e   f016
                                           ;	.line	1299; main.c	MIOS_LCD_PrintCString("PROG");
005f80   0e00     movlw	0                  	MOVLW	UPPER(__str_56)
005f82   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005f84   0e43     movlw	0x43               	MOVLW	HIGH(__str_56)
005f86   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005f88   0e54     movlw	0x54               	MOVLW	LOW(__str_56)
005f8a   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
005f8c   f02f
005f8e   0e02     movlw	0x2                	MOVLW	0x02
005f90   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1300; main.c	MIOS_LCD_CursorSet(0x40 + 0);
005f92   0e40     movlw	0x40               	MOVLW	0x40
005f94   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
005f96   f016
                                           ;	.line	1301; main.c	MIOS_LCD_PrintCString("OPTS");
005f98   0e00     movlw	0                  	MOVLW	UPPER(__str_57)
005f9a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005f9c   0e43     movlw	0x43               	MOVLW	HIGH(__str_57)
005f9e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005fa0   0e5a     movlw	0x5a               	MOVLW	LOW(__str_57)
005fa2   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
005fa4   f02f
005fa6   0e02     movlw	0x2                	MOVLW	0x02
005fa8   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1302; main.c	MIOS_LCD_CursorSet(0x00 + 6);
005faa   0e06     movlw	0x6                	MOVLW	0x06
005fac   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
005fae   f016
                                           ;	.line	1303; main.c	MIOS_LCD_PrintCString("Preset ");
005fb0   0e00     movlw	0                  	MOVLW	UPPER(__str_58)
005fb2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005fb4   0e43     movlw	0x43               	MOVLW	HIGH(__str_58)
005fb6   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005fb8   0e60     movlw	0x60               	MOVLW	LOW(__str_58)
005fba   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
005fbc   f02f
005fbe   0e02     movlw	0x2                	MOVLW	0x02
005fc0   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1304; main.c	MIOS_LCD_CursorSet(0x40 + 8);
005fc2   0e48     movlw	0x48               	MOVLW	0x48
005fc4   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
005fc6   f016
005fc8   0100     movlb	0                  	BANKSEL	_CurrentPreset
                                           ;	.line	1305; main.c	MIOS_LCD_PrintBCD3(CurrentPreset);
005fca   51a5     movf	0xa5, 0, 0x1        	MOVF	_CurrentPreset, W, B
005fcc   ec92     call	0x2d24, 0           	CALL	_MIOS_LCD_PrintBCD3
005fce   f016
005fd0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Timer	code
                                           _Timer:
                                           ;	.line	1288; main.c	}
006344   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Tick	code
                                           _Tick:
                                           ;	.line	895; main.c	void Tick(void) __wparam
003300   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
003302   ffed
003304   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
003306   ffed
003308   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
00330a   ffed
00330c   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
00330e   ffed
003310   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
003312   ffed
003314   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
003316   ffed
003318   0100     movlb	0                  	BANKSEL	_MenuPos
                                           ;	.line	898; main.c	if ( MenuPos == 0 ) // default screen
00331a   51ab     movf	0xab, 0, 0x1        	MOVF	_MenuPos, W, B
00331c   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
00331e   d0a9     bra	0x3472               	BRA	_00562_DS_
                                           ;	.line	900; main.c	switch (LastButton)
003320   0e05     movlw	0x5                	MOVLW	0x05
003322   0100     movlb	0                  	BANKSEL	_LastButton
003324   5daa     subwf	0xaa, 0, 0x1       	SUBWF	_LastButton, W, B
003326   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003328   efce     goto	0x3f9c              	GOTO	_00563_DS_
00332a   f01f
00332c   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
00332e   ffed
003330   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
003332   ffed
003334   6a17     clrf	0x17, 0             	CLRF	r0x07
                                           ; removed redundant BANKSEL
003336   35aa     rlcf	0xaa, 0, 0x1        	RLCF	_LastButton, W, B
003338   3617     rlcf	0x17, 0x1, 0        	RLCF	r0x07, F
00333a   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
00333c   3617     rlcf	0x17, 0x1, 0        	RLCF	r0x07, F
00333e   0bfc     andlw	0xfc               	ANDLW	0xfc
003340   6e16     movwf	0x16, 0            	MOVWF	r0x06
003342   0e00     movlw	0                  	MOVLW	UPPER(_00621_DS_)
003344   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
003346   0e33     movlw	0x33               	MOVLW	HIGH(_00621_DS_)
003348   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
00334a   0e62     movlw	0x62               	MOVLW	LOW(_00621_DS_)
00334c   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
00334e   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
003350   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
003352   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003354   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
003356   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
003358   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
00335a   f017
00335c   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
00335e   f016
003360   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00621_DS_:
003362   efbb     goto	0x3376              	GOTO	_00432_DS_
003364   f019
003366   efbd     goto	0x337a              	GOTO	_00433_DS_
003368   f019
00336a   eff1     goto	0x33e2              	GOTO	_00434_DS_
00336c   f019
00336e   ef31     goto	0x3462              	GOTO	_00435_DS_
003370   f01a
003372   ef35     goto	0x346a              	GOTO	_00436_DS_
003374   f01a
                                           _00432_DS_:
                                           ;	.line	903; main.c	break;
003376   efce     goto	0x3f9c              	GOTO	_00563_DS_
003378   f01f
                                           _00433_DS_:
                                           ;	.line	907; main.c	MenuPos = 1;
00337a   0e01     movlw	0x1                	MOVLW	0x01
00337c   0100     movlb	0                  	BANKSEL	_MenuPos
00337e   6fab     movwf	0xab, 0x1          	MOVWF	_MenuPos, B
                                           ;	.line	909; main.c	TargetPreset = CurrentPreset;
003380   c0a5     movff	0xa5, 0xad         	MOVFF	_CurrentPreset, _TargetPreset
003382   f0ad
                                           ;	.line	910; main.c	MIOS_LCD_Clear();
003384   ec82     call	0x2d04, 0           	CALL	_MIOS_LCD_Clear
003386   f016
                                           ;	.line	911; main.c	MIOS_LCD_CursorSet(0x00 + 0);
003388   0e00     movlw	0                  	MOVLW	0x00
00338a   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
00338c   f016
                                           ;	.line	912; main.c	MIOS_LCD_PrintCString("SAVE");
00338e   0e00     movlw	0                  	MOVLW	UPPER(__str_28)
003390   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003392   0e41     movlw	0x41               	MOVLW	HIGH(__str_28)
003394   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003396   0ef2     movlw	0xf2               	MOVLW	LOW(__str_28)
003398   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
00339a   f02f
00339c   0e02     movlw	0x2                	MOVLW	0x02
00339e   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	913; main.c	MIOS_LCD_CursorSet(0x40 + 0);
0033a0   0e40     movlw	0x40               	MOVLW	0x40
0033a2   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
0033a4   f016
                                           ;	.line	914; main.c	MIOS_LCD_PrintCString("BACK");
0033a6   0e00     movlw	0                  	MOVLW	UPPER(__str_29)
0033a8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0033aa   0e41     movlw	0x41               	MOVLW	HIGH(__str_29)
0033ac   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0033ae   0ef8     movlw	0xf8               	MOVLW	LOW(__str_29)
0033b0   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
0033b2   f02f
0033b4   0e02     movlw	0x2                	MOVLW	0x02
0033b6   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	915; main.c	MIOS_LCD_CursorSet(0x00 + 6);
0033b8   0e06     movlw	0x6                	MOVLW	0x06
0033ba   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
0033bc   f016
                                           ;	.line	916; main.c	MIOS_LCD_PrintCString("to preset ");
0033be   0e00     movlw	0                  	MOVLW	UPPER(__str_30)
0033c0   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0033c2   0e41     movlw	0x41               	MOVLW	HIGH(__str_30)
0033c4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0033c6   0efe     movlw	0xfe               	MOVLW	LOW(__str_30)
0033c8   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
0033ca   f02f
0033cc   0e02     movlw	0x2                	MOVLW	0x02
0033ce   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	917; main.c	MIOS_LCD_CursorSet(0x40 + 8);
0033d0   0e48     movlw	0x48               	MOVLW	0x48
0033d2   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
0033d4   f016
0033d6   0100     movlb	0                  	BANKSEL	_TargetPreset
                                           ;	.line	918; main.c	MIOS_LCD_PrintBCD3(TargetPreset);
0033d8   51ad     movf	0xad, 0, 0x1        	MOVF	_TargetPreset, W, B
0033da   ec92     call	0x2d24, 0           	CALL	_MIOS_LCD_PrintBCD3
0033dc   f016
                                           ;	.line	919; main.c	break;
0033de   efce     goto	0x3f9c              	GOTO	_00563_DS_
0033e0   f01f
                                           _00434_DS_:
                                           ;	.line	923; main.c	MenuPos = 6;
0033e2   0e06     movlw	0x6                	MOVLW	0x06
0033e4   0100     movlb	0                  	BANKSEL	_MenuPos
0033e6   6fab     movwf	0xab, 0x1          	MOVWF	_MenuPos, B
                                           ;	.line	925; main.c	TargetPreset = CurrentPreset;
0033e8   c0a5     movff	0xa5, 0xad         	MOVFF	_CurrentPreset, _TargetPreset
0033ea   f0ad
                                           ;	.line	926; main.c	MIOS_LCD_Clear();
0033ec   ec82     call	0x2d04, 0           	CALL	_MIOS_LCD_Clear
0033ee   f016
                                           ;	.line	927; main.c	MIOS_LCD_CursorSet(0x00 + 0);
0033f0   0e00     movlw	0                  	MOVLW	0x00
0033f2   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
0033f4   f016
                                           ;	.line	928; main.c	MIOS_LCD_PrintCString(">");
0033f6   0e00     movlw	0                  	MOVLW	UPPER(__str_31)
0033f8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0033fa   0e42     movlw	0x42               	MOVLW	HIGH(__str_31)
0033fc   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0033fe   0e0a     movlw	0xa                	MOVLW	LOW(__str_31)
003400   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003402   f02f
003404   0e02     movlw	0x2                	MOVLW	0x02
003406   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	929; main.c	MIOS_LCD_CursorSet(0x40 + 0);
003408   0e40     movlw	0x40               	MOVLW	0x40
00340a   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
00340c   f016
                                           ;	.line	930; main.c	MIOS_LCD_PrintCString("Q");
00340e   0e00     movlw	0                  	MOVLW	UPPER(__str_32)
003410   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003412   0e42     movlw	0x42               	MOVLW	HIGH(__str_32)
003414   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003416   0e0c     movlw	0xc                	MOVLW	LOW(__str_32)
003418   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
00341a   f02f
00341c   0e02     movlw	0x2                	MOVLW	0x02
00341e   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	931; main.c	MIOS_LCD_CursorSet(0x00 + 1);
003420   0e01     movlw	0x1                	MOVLW	0x01
003422   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003424   f016
                                           ;	.line	932; main.c	MIOS_LCD_PrintCString("  Footswitch 1  ");
003426   0e00     movlw	0                  	MOVLW	UPPER(__str_33)
003428   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00342a   0e42     movlw	0x42               	MOVLW	HIGH(__str_33)
00342c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00342e   0e0e     movlw	0xe                	MOVLW	LOW(__str_33)
003430   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003432   f02f
003434   0e02     movlw	0x2                	MOVLW	0x02
003436   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	933; main.c	MIOS_LCD_CursorSet(0x40 + 1);
003438   0e41     movlw	0x41               	MOVLW	0x41
00343a   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
00343c   f016
                                           ;	.line	934; main.c	MIOS_LCD_PrintCString("  Preset        ");
00343e   0e00     movlw	0                  	MOVLW	UPPER(__str_34)
003440   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003442   0e42     movlw	0x42               	MOVLW	HIGH(__str_34)
003444   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003446   0e20     movlw	0x20               	MOVLW	LOW(__str_34)
003448   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
00344a   f02f
00344c   0e02     movlw	0x2                	MOVLW	0x02
00344e   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	935; main.c	MIOS_LCD_CursorSet(0x40 + 11);
003450   0e4b     movlw	0x4b               	MOVLW	0x4b
003452   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003454   f016
003456   0100     movlb	0                  	BANKSEL	_FootPreset
                                           ;	.line	936; main.c	MIOS_LCD_PrintBCD3(FootPreset[0]);
003458   51a0     movf	0xa0, 0, 0x1        	MOVF	_FootPreset, W, B
00345a   ec92     call	0x2d24, 0           	CALL	_MIOS_LCD_PrintBCD3
00345c   f016
                                           ;	.line	937; main.c	break;
00345e   efce     goto	0x3f9c              	GOTO	_00563_DS_
003460   f01f
                                           _00435_DS_:
                                           ;	.line	940; main.c	Preset_Up();
003462   ec0b     call	0x6016, 0           	CALL	_Preset_Up
003464   f030
                                           ;	.line	941; main.c	break;
003466   efce     goto	0x3f9c              	GOTO	_00563_DS_
003468   f01f
                                           _00436_DS_:
                                           ;	.line	944; main.c	Preset_Down();
00346a   ec4c     call	0x6098, 0           	CALL	_Preset_Down
00346c   f030
                                           ;	.line	946; main.c	}
00346e   efce     goto	0x3f9c              	GOTO	_00563_DS_
003470   f01f
                                           _00562_DS_:
003472   0100     movlb	0                  	BANKSEL	_MenuPos
                                           ;	.line	948; main.c	else if ( MenuPos == 1 ) // PROG menu
003474   51ab     movf	0xab, 0, 0x1        	MOVF	_MenuPos, W, B
003476   0a01     xorlw	0x1                	XORLW	0x01
003478   e001     bz	0x347c                	BZ	_00623_DS_
00347a   d08d     bra	0x3596               	BRA	_00559_DS_
                                           _00623_DS_:
                                           ;	.line	950; main.c	switch (LastButton)
00347c   0e05     movlw	0x5                	MOVLW	0x05
00347e   0100     movlb	0                  	BANKSEL	_LastButton
003480   5daa     subwf	0xaa, 0, 0x1       	SUBWF	_LastButton, W, B
003482   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003484   efce     goto	0x3f9c              	GOTO	_00563_DS_
003486   f01f
003488   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
00348a   ffed
00348c   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
00348e   ffed
003490   6a17     clrf	0x17, 0             	CLRF	r0x07
                                           ; removed redundant BANKSEL
003492   35aa     rlcf	0xaa, 0, 0x1        	RLCF	_LastButton, W, B
003494   3617     rlcf	0x17, 0x1, 0        	RLCF	r0x07, F
003496   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
003498   3617     rlcf	0x17, 0x1, 0        	RLCF	r0x07, F
00349a   0bfc     andlw	0xfc               	ANDLW	0xfc
00349c   6e16     movwf	0x16, 0            	MOVWF	r0x06
00349e   0e00     movlw	0                  	MOVLW	UPPER(_00625_DS_)
0034a0   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
0034a2   0e34     movlw	0x34               	MOVLW	HIGH(_00625_DS_)
0034a4   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
0034a6   0ebe     movlw	0xbe               	MOVLW	LOW(_00625_DS_)
0034a8   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
0034aa   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
0034ac   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
0034ae   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0034b0   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0034b2   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
0034b4   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
0034b6   f017
0034b8   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
0034ba   f016
0034bc   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00625_DS_:
0034be   ef69     goto	0x34d2              	GOTO	_00438_DS_
0034c0   f01a
0034c2   ef6b     goto	0x34d6              	GOTO	_00439_DS_
0034c4   f01a
0034c6   ef7b     goto	0x34f6              	GOTO	_00440_DS_
0034c8   f01a
0034ca   ef9c     goto	0x3538              	GOTO	_00442_DS_
0034cc   f01a
0034ce   ef9c     goto	0x3538              	GOTO	_00442_DS_
0034d0   f01a
                                           _00438_DS_:
                                           ;	.line	953; main.c	break;
0034d2   efce     goto	0x3f9c              	GOTO	_00563_DS_
0034d4   f01f
                                           _00439_DS_:
0034d6   0100     movlb	0                  	BANKSEL	_TargetPreset
                                           ;	.line	957; main.c	SavePreset(TargetPreset);
0034d8   51ad     movf	0xad, 0, 0x1        	MOVF	_TargetPreset, W, B
0034da   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0034dc   ec92     call	0x5524, 0           	CALL	_SavePreset
0034de   f02a
0034e0   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
0034e2   0100     movlb	0                  	BANKSEL	_TargetPreset
                                           ;	.line	958; main.c	SetActivePreset(TargetPreset);
0034e4   51ad     movf	0xad, 0, 0x1        	MOVF	_TargetPreset, W, B
0034e6   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0034e8   ecc4     call	0x5d88, 0           	CALL	_SetActivePreset
0034ea   f02e
0034ec   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
0034ee   0100     movlb	0                  	BANKSEL	_MenuPos
                                           ;	.line	960; main.c	MenuPos = 0;
0034f0   6bab     clrf	0xab, 0x1           	CLRF	_MenuPos, B
                                           ;	.line	961; main.c	break;
0034f2   efce     goto	0x3f9c              	GOTO	_00563_DS_
0034f4   f01f
                                           _00440_DS_:
0034f6   0100     movlb	0                  	BANKSEL	_MenuPos
                                           ;	.line	965; main.c	MenuPos = 0;
0034f8   6bab     clrf	0xab, 0x1           	CLRF	_MenuPos, B
                                           ;	.line	967; main.c	MIOS_LCD_Clear();
0034fa   ec82     call	0x2d04, 0           	CALL	_MIOS_LCD_Clear
0034fc   f016
                                           ;	.line	968; main.c	MIOS_LCD_CursorSet(0x00 + 0);
0034fe   0e00     movlw	0                  	MOVLW	0x00
003500   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003502   f016
                                           ;	.line	969; main.c	MIOS_LCD_PrintCString("**   Nothing  **");
003504   0e00     movlw	0                  	MOVLW	UPPER(__str_35)
003506   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003508   0e42     movlw	0x42               	MOVLW	HIGH(__str_35)
00350a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00350c   0e32     movlw	0x32               	MOVLW	LOW(__str_35)
00350e   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003510   f02f
003512   0e02     movlw	0x2                	MOVLW	0x02
003514   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	970; main.c	MIOS_LCD_CursorSet(0x40 + 0);
003516   0e40     movlw	0x40               	MOVLW	0x40
003518   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
00351a   f016
                                           ;	.line	971; main.c	MIOS_LCD_PrintCString("**    Saved   **");
00351c   0e00     movlw	0                  	MOVLW	UPPER(__str_36)
00351e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003520   0e42     movlw	0x42               	MOVLW	HIGH(__str_36)
003522   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003524   0e44     movlw	0x44               	MOVLW	LOW(__str_36)
003526   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003528   f02f
00352a   0e02     movlw	0x2                	MOVLW	0x02
00352c   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	972; main.c	MIOS_LCD_MessageStart(100);
00352e   0e64     movlw	0x64               	MOVLW	0x64
003530   ecfa     call	0x2df4, 0           	CALL	_MIOS_LCD_MessageStart
003532   f016
                                           ;	.line	973; main.c	break;
003534   efce     goto	0x3f9c              	GOTO	_00563_DS_
003536   f01f
                                           _00442_DS_:
                                           ;	.line	977; main.c	if ( (LastButton-4) == 0 ) // Down button
003538   c0aa     movff	0xaa, 0x10         	MOVFF	_LastButton, r0x00
00353a   f010
00353c   6a11     clrf	0x11, 0             	CLRF	r0x01
00353e   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003540   0ffc     addlw	0xfc               	ADDLW	0xfc
003542   6e12     movwf	0x12, 0            	MOVWF	r0x02
003544   0eff     movlw	0xff               	MOVLW	0xff
003546   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x01, W
003548   6e13     movwf	0x13, 0            	MOVWF	r0x03
00354a   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
00354c   1013     iorwf	0x13, 0, 0         	IORWF	r0x03, W
00354e   e10a     bnz	0x3564               	BNZ	_00452_DS_
                                           ;	.line	979; main.c	if ( TargetPreset > 1) 
003550   0e02     movlw	0x2                	MOVLW	0x02
003552   0100     movlb	0                  	BANKSEL	_TargetPreset
003554   5dad     subwf	0xad, 0, 0x1       	SUBWF	_TargetPreset, W, B
003556   e302     bnc	0x355c               	BNC	_00444_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	980; main.c	{ TargetPreset--; }
003558   07ad     decf	0xad, 0x1, 0x1      	DECF	_TargetPreset, F, B
00355a   d014     bra	0x3584               	BRA	_00453_DS_
                                           _00444_DS_:
                                           ;	.line	982; main.c	{ TargetPreset = 100; }
00355c   0e64     movlw	0x64               	MOVLW	0x64
00355e   0100     movlb	0                  	BANKSEL	_TargetPreset
003560   6fad     movwf	0xad, 0x1          	MOVWF	_TargetPreset, B
003562   d010     bra	0x3584               	BRA	_00453_DS_
                                           _00452_DS_:
                                           ;	.line	984; main.c	else if ( (LastButton-3) == 0 ) // Up button
003564   0efd     movlw	0xfd               	MOVLW	0xfd
003566   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003568   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00356a   0611     decf	0x11, 0x1, 0        	DECF	r0x01, F
00356c   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00356e   1011     iorwf	0x11, 0, 0         	IORWF	r0x01, W
003570   e109     bnz	0x3584               	BNZ	_00453_DS_
                                           ;	.line	986; main.c	if ( TargetPreset < 100) 
003572   0e64     movlw	0x64               	MOVLW	0x64
003574   0100     movlb	0                  	BANKSEL	_TargetPreset
003576   5dad     subwf	0xad, 0, 0x1       	SUBWF	_TargetPreset, W, B
003578   e202     bc	0x357e                	BC	_00447_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	987; main.c	{ TargetPreset++; }
00357a   2bad     incf	0xad, 0x1, 0x1      	INCF	_TargetPreset, F, B
00357c   d003     bra	0x3584               	BRA	_00453_DS_
                                           _00447_DS_:
                                           ;	.line	989; main.c	{ TargetPreset = 1; }
00357e   0e01     movlw	0x1                	MOVLW	0x01
003580   0100     movlb	0                  	BANKSEL	_TargetPreset
003582   6fad     movwf	0xad, 0x1          	MOVWF	_TargetPreset, B
                                           _00453_DS_:
                                           ;	.line	992; main.c	MIOS_LCD_CursorSet(0x40 + 8);
003584   0e48     movlw	0x48               	MOVLW	0x48
003586   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003588   f016
00358a   0100     movlb	0                  	BANKSEL	_TargetPreset
                                           ;	.line	993; main.c	MIOS_LCD_PrintBCD3(TargetPreset);
00358c   51ad     movf	0xad, 0, 0x1        	MOVF	_TargetPreset, W, B
00358e   ec92     call	0x2d24, 0           	CALL	_MIOS_LCD_PrintBCD3
003590   f016
                                           ;	.line	995; main.c	}
003592   efce     goto	0x3f9c              	GOTO	_00563_DS_
003594   f01f
                                           _00559_DS_:
                                           ;	.line	997; main.c	else if ( MenuPos >= 6 ) // OPTS menu
003596   0e06     movlw	0x6                	MOVLW	0x06
003598   0100     movlb	0                  	BANKSEL	_MenuPos
00359a   5dab     subwf	0xab, 0, 0x1       	SUBWF	_MenuPos, W, B
00359c   70d8     btg	0xd8, 0, 0           	BTG	STATUS, 0
00359e   6a10     clrf	0x10, 0             	CLRF	r0x00
0035a0   3610     rlcf	0x10, 0x1, 0        	RLCF	r0x00, F
0035a2   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0035a4   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
0035a6   efce     goto	0x3f9c              	GOTO	_00563_DS_
0035a8   f01f
                                           ;	.line	999; main.c	switch (LastButton)
0035aa   0e05     movlw	0x5                	MOVLW	0x05
0035ac   0100     movlb	0                  	BANKSEL	_LastButton
0035ae   5daa     subwf	0xaa, 0, 0x1       	SUBWF	_LastButton, W, B
0035b0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0035b2   efce     goto	0x3f9c              	GOTO	_00563_DS_
0035b4   f01f
0035b6   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
0035b8   ffed
0035ba   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
0035bc   ffed
0035be   6a17     clrf	0x17, 0             	CLRF	r0x07
                                           ; removed redundant BANKSEL
0035c0   35aa     rlcf	0xaa, 0, 0x1        	RLCF	_LastButton, W, B
0035c2   3617     rlcf	0x17, 0x1, 0        	RLCF	r0x07, F
0035c4   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
0035c6   3617     rlcf	0x17, 0x1, 0        	RLCF	r0x07, F
0035c8   0bfc     andlw	0xfc               	ANDLW	0xfc
0035ca   6e16     movwf	0x16, 0            	MOVWF	r0x06
0035cc   0e00     movlw	0                  	MOVLW	UPPER(_00631_DS_)
0035ce   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
0035d0   0e35     movlw	0x35               	MOVLW	HIGH(_00631_DS_)
0035d2   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
0035d4   0eec     movlw	0xec               	MOVLW	LOW(_00631_DS_)
0035d6   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
0035d8   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
0035da   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
0035dc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0035de   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0035e0   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
0035e2   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
0035e4   f017
0035e6   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
0035e8   f016
0035ea   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00631_DS_:
0035ec   ef00     goto	0x3600              	GOTO	_00455_DS_
0035ee   f01b
0035f0   ef02     goto	0x3604              	GOTO	_00456_DS_
0035f2   f01b
0035f4   ef5c     goto	0x3ab8              	GOTO	_00488_DS_
0035f6   f01d
0035f8   ef7f     goto	0x3afe              	GOTO	_00490_DS_
0035fa   f01d
0035fc   ef7f     goto	0x3afe              	GOTO	_00490_DS_
0035fe   f01d
                                           _00455_DS_:
                                           ;	.line	1002; main.c	break;
003600   efce     goto	0x3f9c              	GOTO	_00563_DS_
003602   f01f
                                           _00456_DS_:
                                           ;	.line	1006; main.c	if ( MenuPos < 29 ) 
003604   0e1d     movlw	0x1d               	MOVLW	0x1d
003606   0100     movlb	0                  	BANKSEL	_MenuPos
003608   5dab     subwf	0xab, 0, 0x1       	SUBWF	_MenuPos, W, B
00360a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00360c   ef38     goto	0x3a70              	GOTO	_00486_DS_
00360e   f01d
                                           ; removed redundant BANKSEL
                                           ;	.line	1008; main.c	MenuPos++;
003610   2bab     incf	0xab, 0x1, 0x1      	INCF	_MenuPos, F, B
                                           ;	.line	1009; main.c	switch (MenuPos)
003612   0e06     movlw	0x6                	MOVLW	0x06
                                           ; removed redundant BANKSEL
003614   5dab     subwf	0xab, 0, 0x1       	SUBWF	_MenuPos, W, B
003616   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
003618   efce     goto	0x3f9c              	GOTO	_00563_DS_
00361a   f01f
00361c   0e1e     movlw	0x1e               	MOVLW	0x1e
                                           ; removed redundant BANKSEL
00361e   5dab     subwf	0xab, 0, 0x1       	SUBWF	_MenuPos, W, B
003620   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003622   efce     goto	0x3f9c              	GOTO	_00563_DS_
003624   f01f
003626   0efa     movlw	0xfa               	MOVLW	0xfa
                                           ; removed redundant BANKSEL
003628   25ab     addwf	0xab, 0, 0x1       	ADDWF	_MenuPos, W, B
00362a   6e11     movwf	0x11, 0            	MOVWF	r0x01
00362c   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
00362e   ffed
003630   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
003632   ffed
003634   6a17     clrf	0x17, 0             	CLRF	r0x07
003636   3411     rlcf	0x11, 0, 0          	RLCF	r0x01, W
003638   3617     rlcf	0x17, 0x1, 0        	RLCF	r0x07, F
00363a   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
00363c   3617     rlcf	0x17, 0x1, 0        	RLCF	r0x07, F
00363e   0bfc     andlw	0xfc               	ANDLW	0xfc
003640   6e16     movwf	0x16, 0            	MOVWF	r0x06
003642   0e00     movlw	0                  	MOVLW	UPPER(_00635_DS_)
003644   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
003646   0e36     movlw	0x36               	MOVLW	HIGH(_00635_DS_)
003648   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
00364a   0e62     movlw	0x62               	MOVLW	LOW(_00635_DS_)
00364c   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
00364e   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
003650   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
003652   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003654   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
003656   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
003658   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
00365a   f017
00365c   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
00365e   f016
003660   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00635_DS_:
003662   ef61     goto	0x36c2              	GOTO	_00457_DS_
003664   f01b
003666   ef82     goto	0x3704              	GOTO	_00458_DS_
003668   f01b
00366a   efa3     goto	0x3746              	GOTO	_00459_DS_
00366c   f01b
00366e   efc4     goto	0x3788              	GOTO	_00460_DS_
003670   f01b
003672   efe5     goto	0x37ca              	GOTO	_00461_DS_
003674   f01b
003676   ef06     goto	0x380c              	GOTO	_00462_DS_
003678   f01c
00367a   ef38     goto	0x3870              	GOTO	_00466_DS_
00367c   f01c
00367e   ef6c     goto	0x38d8              	GOTO	_00467_DS_
003680   f01c
003682   efa0     goto	0x3940              	GOTO	_00472_DS_
003684   f01c
003686   efa0     goto	0x3940              	GOTO	_00472_DS_
003688   f01c
00368a   efa0     goto	0x3940              	GOTO	_00472_DS_
00368c   f01c
00368e   efa0     goto	0x3940              	GOTO	_00472_DS_
003690   f01c
003692   efa0     goto	0x3940              	GOTO	_00472_DS_
003694   f01c
003696   efa0     goto	0x3940              	GOTO	_00473_DS_
003698   f01c
00369a   efa0     goto	0x3940              	GOTO	_00474_DS_
00369c   f01c
00369e   efa0     goto	0x3940              	GOTO	_00475_DS_
0036a0   f01c
0036a2   efec     goto	0x39d8              	GOTO	_00480_DS_
0036a4   f01c
0036a6   efec     goto	0x39d8              	GOTO	_00480_DS_
0036a8   f01c
0036aa   efec     goto	0x39d8              	GOTO	_00480_DS_
0036ac   f01c
0036ae   efec     goto	0x39d8              	GOTO	_00480_DS_
0036b0   f01c
0036b2   efec     goto	0x39d8              	GOTO	_00480_DS_
0036b4   f01c
0036b6   efec     goto	0x39d8              	GOTO	_00481_DS_
0036b8   f01c
0036ba   efec     goto	0x39d8              	GOTO	_00482_DS_
0036bc   f01c
0036be   efec     goto	0x39d8              	GOTO	_00483_DS_
0036c0   f01c
                                           _00457_DS_:
                                           ;	.line	1012; main.c	MIOS_LCD_CursorSet(0x00 + 1);
0036c2   0e01     movlw	0x1                	MOVLW	0x01
0036c4   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
0036c6   f016
                                           ;	.line	1013; main.c	MIOS_LCD_PrintCString("  Footswitch 1  ");
0036c8   0e00     movlw	0                  	MOVLW	UPPER(__str_33)
0036ca   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0036cc   0e42     movlw	0x42               	MOVLW	HIGH(__str_33)
0036ce   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0036d0   0e0e     movlw	0xe                	MOVLW	LOW(__str_33)
0036d2   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
0036d4   f02f
0036d6   0e02     movlw	0x2                	MOVLW	0x02
0036d8   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1014; main.c	MIOS_LCD_CursorSet(0x40 + 1);
0036da   0e41     movlw	0x41               	MOVLW	0x41
0036dc   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
0036de   f016
                                           ;	.line	1015; main.c	MIOS_LCD_PrintCString("  Preset        ");
0036e0   0e00     movlw	0                  	MOVLW	UPPER(__str_34)
0036e2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0036e4   0e42     movlw	0x42               	MOVLW	HIGH(__str_34)
0036e6   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0036e8   0e20     movlw	0x20               	MOVLW	LOW(__str_34)
0036ea   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
0036ec   f02f
0036ee   0e02     movlw	0x2                	MOVLW	0x02
0036f0   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1016; main.c	MIOS_LCD_CursorSet(0x40 + 11);
0036f2   0e4b     movlw	0x4b               	MOVLW	0x4b
0036f4   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
0036f6   f016
0036f8   0100     movlb	0                  	BANKSEL	_FootPreset
                                           ;	.line	1017; main.c	MIOS_LCD_PrintBCD3(FootPreset[0]);
0036fa   51a0     movf	0xa0, 0, 0x1        	MOVF	_FootPreset, W, B
0036fc   ec92     call	0x2d24, 0           	CALL	_MIOS_LCD_PrintBCD3
0036fe   f016
                                           ;	.line	1018; main.c	break;
003700   efce     goto	0x3f9c              	GOTO	_00563_DS_
003702   f01f
                                           _00458_DS_:
                                           ;	.line	1020; main.c	MIOS_LCD_CursorSet(0x00 + 1);
003704   0e01     movlw	0x1                	MOVLW	0x01
003706   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003708   f016
                                           ;	.line	1021; main.c	MIOS_LCD_PrintCString("  Footswitch 2  ");
00370a   0e00     movlw	0                  	MOVLW	UPPER(__str_37)
00370c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00370e   0e42     movlw	0x42               	MOVLW	HIGH(__str_37)
003710   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003712   0e56     movlw	0x56               	MOVLW	LOW(__str_37)
003714   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003716   f02f
003718   0e02     movlw	0x2                	MOVLW	0x02
00371a   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1022; main.c	MIOS_LCD_CursorSet(0x40 + 1);
00371c   0e41     movlw	0x41               	MOVLW	0x41
00371e   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003720   f016
                                           ;	.line	1023; main.c	MIOS_LCD_PrintCString("  Preset        ");
003722   0e00     movlw	0                  	MOVLW	UPPER(__str_34)
003724   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003726   0e42     movlw	0x42               	MOVLW	HIGH(__str_34)
003728   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00372a   0e20     movlw	0x20               	MOVLW	LOW(__str_34)
00372c   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
00372e   f02f
003730   0e02     movlw	0x2                	MOVLW	0x02
003732   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1024; main.c	MIOS_LCD_CursorSet(0x40 + 11);
003734   0e4b     movlw	0x4b               	MOVLW	0x4b
003736   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003738   f016
00373a   0100     movlb	0                  	BANKSEL	(_FootPreset + 1)
                                           ;	.line	1025; main.c	MIOS_LCD_PrintBCD3(FootPreset[1]);
00373c   51a1     movf	0xa1, 0, 0x1        	MOVF	(_FootPreset + 1), W, B
00373e   ec92     call	0x2d24, 0           	CALL	_MIOS_LCD_PrintBCD3
003740   f016
                                           ;	.line	1026; main.c	break;
003742   efce     goto	0x3f9c              	GOTO	_00563_DS_
003744   f01f
                                           _00459_DS_:
                                           ;	.line	1028; main.c	MIOS_LCD_CursorSet(0x00 + 1);
003746   0e01     movlw	0x1                	MOVLW	0x01
003748   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
00374a   f016
                                           ;	.line	1029; main.c	MIOS_LCD_PrintCString("  Footswitch 3  ");
00374c   0e00     movlw	0                  	MOVLW	UPPER(__str_38)
00374e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003750   0e42     movlw	0x42               	MOVLW	HIGH(__str_38)
003752   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003754   0e68     movlw	0x68               	MOVLW	LOW(__str_38)
003756   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003758   f02f
00375a   0e02     movlw	0x2                	MOVLW	0x02
00375c   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1030; main.c	MIOS_LCD_CursorSet(0x40 + 1);
00375e   0e41     movlw	0x41               	MOVLW	0x41
003760   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003762   f016
                                           ;	.line	1031; main.c	MIOS_LCD_PrintCString("  Preset        ");
003764   0e00     movlw	0                  	MOVLW	UPPER(__str_34)
003766   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003768   0e42     movlw	0x42               	MOVLW	HIGH(__str_34)
00376a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00376c   0e20     movlw	0x20               	MOVLW	LOW(__str_34)
00376e   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003770   f02f
003772   0e02     movlw	0x2                	MOVLW	0x02
003774   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1032; main.c	MIOS_LCD_CursorSet(0x40 + 11);
003776   0e4b     movlw	0x4b               	MOVLW	0x4b
003778   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
00377a   f016
00377c   0100     movlb	0                  	BANKSEL	(_FootPreset + 2)
                                           ;	.line	1033; main.c	MIOS_LCD_PrintBCD3(FootPreset[2]);
00377e   51a2     movf	0xa2, 0, 0x1        	MOVF	(_FootPreset + 2), W, B
003780   ec92     call	0x2d24, 0           	CALL	_MIOS_LCD_PrintBCD3
003782   f016
                                           ;	.line	1034; main.c	break;
003784   efce     goto	0x3f9c              	GOTO	_00563_DS_
003786   f01f
                                           _00460_DS_:
                                           ;	.line	1036; main.c	MIOS_LCD_CursorSet(0x00 + 1);
003788   0e01     movlw	0x1                	MOVLW	0x01
00378a   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
00378c   f016
                                           ;	.line	1037; main.c	MIOS_LCD_PrintCString("  Footswitch 4  ");
00378e   0e00     movlw	0                  	MOVLW	UPPER(__str_39)
003790   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003792   0e42     movlw	0x42               	MOVLW	HIGH(__str_39)
003794   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003796   0e7a     movlw	0x7a               	MOVLW	LOW(__str_39)
003798   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
00379a   f02f
00379c   0e02     movlw	0x2                	MOVLW	0x02
00379e   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1038; main.c	MIOS_LCD_CursorSet(0x40 + 1);
0037a0   0e41     movlw	0x41               	MOVLW	0x41
0037a2   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
0037a4   f016
                                           ;	.line	1039; main.c	MIOS_LCD_PrintCString("  Preset        ");
0037a6   0e00     movlw	0                  	MOVLW	UPPER(__str_34)
0037a8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0037aa   0e42     movlw	0x42               	MOVLW	HIGH(__str_34)
0037ac   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0037ae   0e20     movlw	0x20               	MOVLW	LOW(__str_34)
0037b0   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
0037b2   f02f
0037b4   0e02     movlw	0x2                	MOVLW	0x02
0037b6   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1040; main.c	MIOS_LCD_CursorSet(0x40 + 11);
0037b8   0e4b     movlw	0x4b               	MOVLW	0x4b
0037ba   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
0037bc   f016
0037be   0100     movlb	0                  	BANKSEL	(_FootPreset + 3)
                                           ;	.line	1041; main.c	MIOS_LCD_PrintBCD3(FootPreset[3]);
0037c0   51a3     movf	0xa3, 0, 0x1        	MOVF	(_FootPreset + 3), W, B
0037c2   ec92     call	0x2d24, 0           	CALL	_MIOS_LCD_PrintBCD3
0037c4   f016
                                           ;	.line	1042; main.c	break;
0037c6   efce     goto	0x3f9c              	GOTO	_00563_DS_
0037c8   f01f
                                           _00461_DS_:
                                           ;	.line	1044; main.c	MIOS_LCD_CursorSet(0x00 + 1);
0037ca   0e01     movlw	0x1                	MOVLW	0x01
0037cc   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
0037ce   f016
                                           ;	.line	1045; main.c	MIOS_LCD_PrintCString("  MIDI channel  ");
0037d0   0e00     movlw	0                  	MOVLW	UPPER(__str_40)
0037d2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0037d4   0e42     movlw	0x42               	MOVLW	HIGH(__str_40)
0037d6   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0037d8   0e8c     movlw	0x8c               	MOVLW	LOW(__str_40)
0037da   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
0037dc   f02f
0037de   0e02     movlw	0x2                	MOVLW	0x02
0037e0   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1046; main.c	MIOS_LCD_CursorSet(0x40 + 1);
0037e2   0e41     movlw	0x41               	MOVLW	0x41
0037e4   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
0037e6   f016
                                           ;	.line	1047; main.c	MIOS_LCD_PrintCString("                ");
0037e8   0e00     movlw	0                  	MOVLW	UPPER(__str_41)
0037ea   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0037ec   0e42     movlw	0x42               	MOVLW	HIGH(__str_41)
0037ee   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0037f0   0e9e     movlw	0x9e               	MOVLW	LOW(__str_41)
0037f2   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
0037f4   f02f
0037f6   0e02     movlw	0x2                	MOVLW	0x02
0037f8   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1048; main.c	MIOS_LCD_CursorSet(0x40 + 7);
0037fa   0e47     movlw	0x47               	MOVLW	0x47
0037fc   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
0037fe   f016
003800   0100     movlb	0                  	BANKSEL	_MidiChannel
                                           ;	.line	1049; main.c	MIOS_LCD_PrintBCD2(MidiChannel);
003802   51a4     movf	0xa4, 0, 0x1        	MOVF	_MidiChannel, W, B
003804   ec90     call	0x2d20, 0           	CALL	_MIOS_LCD_PrintBCD2
003806   f016
                                           ;	.line	1050; main.c	break;
003808   efce     goto	0x3f9c              	GOTO	_00563_DS_
00380a   f01f
                                           _00462_DS_:
                                           ;	.line	1052; main.c	MIOS_LCD_CursorSet(0x00 + 1);
00380c   0e01     movlw	0x1                	MOVLW	0x01
00380e   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003810   f016
                                           ;	.line	1053; main.c	MIOS_LCD_PrintCString(" Startup Preset ");
003812   0e00     movlw	0                  	MOVLW	UPPER(__str_42)
003814   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003816   0e42     movlw	0x42               	MOVLW	HIGH(__str_42)
003818   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00381a   0eb0     movlw	0xb0               	MOVLW	LOW(__str_42)
00381c   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
00381e   f02f
003820   0e02     movlw	0x2                	MOVLW	0x02
003822   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1054; main.c	MIOS_LCD_CursorSet(0x40 + 1);
003824   0e41     movlw	0x41               	MOVLW	0x41
003826   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003828   f016
                                           ;	.line	1055; main.c	MIOS_LCD_PrintCString("                ");
00382a   0e00     movlw	0                  	MOVLW	UPPER(__str_41)
00382c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00382e   0e42     movlw	0x42               	MOVLW	HIGH(__str_41)
003830   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003832   0e9e     movlw	0x9e               	MOVLW	LOW(__str_41)
003834   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003836   f02f
003838   0e02     movlw	0x2                	MOVLW	0x02
00383a   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
00383c   0100     movlb	0                  	BANKSEL	_ThisStartupPreset
                                           ;	.line	1056; main.c	if ( ThisStartupPreset == 0 )
00383e   51a9     movf	0xa9, 0, 0x1        	MOVF	_ThisStartupPreset, W, B
003840   e10e     bnz	0x385e               	BNZ	_00464_DS_
                                           ;	.line	1058; main.c	MIOS_LCD_CursorSet(0x40 + 1);
003842   0e41     movlw	0x41               	MOVLW	0x41
003844   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003846   f016
                                           ;	.line	1059; main.c	MIOS_LCD_PrintCString(" ** Last Used **");
003848   0e00     movlw	0                  	MOVLW	UPPER(__str_43)
00384a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00384c   0e42     movlw	0x42               	MOVLW	HIGH(__str_43)
00384e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003850   0ec2     movlw	0xc2               	MOVLW	LOW(__str_43)
003852   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003854   f02f
003856   0e02     movlw	0x2                	MOVLW	0x02
003858   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
00385a   efce     goto	0x3f9c              	GOTO	_00563_DS_
00385c   f01f
                                           _00464_DS_:
                                           ;	.line	1063; main.c	MIOS_LCD_CursorSet(0x40 + 7);
00385e   0e47     movlw	0x47               	MOVLW	0x47
003860   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003862   f016
003864   0100     movlb	0                  	BANKSEL	_ThisStartupPreset
                                           ;	.line	1064; main.c	MIOS_LCD_PrintBCD2(ThisStartupPreset);
003866   51a9     movf	0xa9, 0, 0x1        	MOVF	_ThisStartupPreset, W, B
003868   ec90     call	0x2d20, 0           	CALL	_MIOS_LCD_PrintBCD2
00386a   f016
                                           ;	.line	1066; main.c	break;
00386c   efce     goto	0x3f9c              	GOTO	_00563_DS_
00386e   f01f
                                           _00466_DS_:
                                           ;	.line	1068; main.c	MIOS_LCD_CursorSet(0x00 + 1);
003870   0e01     movlw	0x1                	MOVLW	0x01
003872   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003874   f016
                                           ;	.line	1069; main.c	MIOS_LCD_PrintCString("  Send MIDI ?   ");
003876   0e00     movlw	0                  	MOVLW	UPPER(__str_44)
003878   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00387a   0e42     movlw	0x42               	MOVLW	HIGH(__str_44)
00387c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00387e   0ed4     movlw	0xd4               	MOVLW	LOW(__str_44)
003880   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003882   f02f
003884   0e02     movlw	0x2                	MOVLW	0x02
003886   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1070; main.c	MIOS_LCD_CursorSet(0x40 + 1);
003888   0e41     movlw	0x41               	MOVLW	0x41
00388a   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
00388c   f016
                                           ;	.line	1071; main.c	MIOS_LCD_PrintCString("                ");
00388e   0e00     movlw	0                  	MOVLW	UPPER(__str_41)
003890   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003892   0e42     movlw	0x42               	MOVLW	HIGH(__str_41)
003894   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003896   0e9e     movlw	0x9e               	MOVLW	LOW(__str_41)
003898   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
00389a   f02f
00389c   0e02     movlw	0x2                	MOVLW	0x02
00389e   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1072; main.c	MIOS_LCD_CursorSet(0x40 + 7);
0038a0   0e47     movlw	0x47               	MOVLW	0x47
0038a2   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
0038a4   f016
0038a6   0100     movlb	0                  	BANKSEL	_SendMidiOnButtonChange
                                           ;	.line	1073; main.c	SendMidiOnButtonChange ? MIOS_LCD_PrintCString("Yes") : MIOS_LCD_PrintCString("No");
0038a8   51a6     movf	0xa6, 0, 0x1        	MOVF	_SendMidiOnButtonChange, W, B
0038aa   e00b     bz	0x38c2                	BZ	_00566_DS_
0038ac   0e00     movlw	0                  	MOVLW	UPPER(__str_45)
0038ae   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0038b0   0e42     movlw	0x42               	MOVLW	HIGH(__str_45)
0038b2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0038b4   0ee6     movlw	0xe6               	MOVLW	LOW(__str_45)
0038b6   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
0038b8   f02f
0038ba   0e02     movlw	0x2                	MOVLW	0x02
0038bc   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
0038be   efce     goto	0x3f9c              	GOTO	_00563_DS_
0038c0   f01f
                                           _00566_DS_:
0038c2   0e00     movlw	0                  	MOVLW	UPPER(__str_46)
0038c4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0038c6   0e42     movlw	0x42               	MOVLW	HIGH(__str_46)
0038c8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0038ca   0eea     movlw	0xea               	MOVLW	LOW(__str_46)
0038cc   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
0038ce   f02f
0038d0   0e02     movlw	0x2                	MOVLW	0x02
0038d2   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1074; main.c	break;
0038d4   efce     goto	0x3f9c              	GOTO	_00563_DS_
0038d6   f01f
                                           _00467_DS_:
                                           ;	.line	1076; main.c	MIOS_LCD_CursorSet(0x00 + 1);
0038d8   0e01     movlw	0x1                	MOVLW	0x01
0038da   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
0038dc   f016
                                           ;	.line	1077; main.c	MIOS_LCD_PrintCString(" Reload Active ?");
0038de   0e00     movlw	0                  	MOVLW	UPPER(__str_47)
0038e0   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0038e2   0e42     movlw	0x42               	MOVLW	HIGH(__str_47)
0038e4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0038e6   0eee     movlw	0xee               	MOVLW	LOW(__str_47)
0038e8   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
0038ea   f02f
0038ec   0e02     movlw	0x2                	MOVLW	0x02
0038ee   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1078; main.c	MIOS_LCD_CursorSet(0x40 + 1);
0038f0   0e41     movlw	0x41               	MOVLW	0x41
0038f2   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
0038f4   f016
                                           ;	.line	1079; main.c	MIOS_LCD_PrintCString("                ");
0038f6   0e00     movlw	0                  	MOVLW	UPPER(__str_41)
0038f8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0038fa   0e42     movlw	0x42               	MOVLW	HIGH(__str_41)
0038fc   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0038fe   0e9e     movlw	0x9e               	MOVLW	LOW(__str_41)
003900   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003902   f02f
003904   0e02     movlw	0x2                	MOVLW	0x02
003906   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1080; main.c	MIOS_LCD_CursorSet(0x40 + 7);
003908   0e47     movlw	0x47               	MOVLW	0x47
00390a   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
00390c   f016
00390e   0100     movlb	0                  	BANKSEL	_ReloadActivePreset
                                           ;	.line	1081; main.c	ReloadActivePreset ? MIOS_LCD_PrintCString("Yes") : MIOS_LCD_PrintCString("No");
003910   51a7     movf	0xa7, 0, 0x1        	MOVF	_ReloadActivePreset, W, B
003912   e00b     bz	0x392a                	BZ	_00568_DS_
003914   0e00     movlw	0                  	MOVLW	UPPER(__str_45)
003916   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003918   0e42     movlw	0x42               	MOVLW	HIGH(__str_45)
00391a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00391c   0ee6     movlw	0xe6               	MOVLW	LOW(__str_45)
00391e   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003920   f02f
003922   0e02     movlw	0x2                	MOVLW	0x02
003924   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
003926   efce     goto	0x3f9c              	GOTO	_00563_DS_
003928   f01f
                                           _00568_DS_:
00392a   0e00     movlw	0                  	MOVLW	UPPER(__str_46)
00392c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00392e   0e42     movlw	0x42               	MOVLW	HIGH(__str_46)
003930   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003932   0eea     movlw	0xea               	MOVLW	LOW(__str_46)
003934   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003936   f02f
003938   0e02     movlw	0x2                	MOVLW	0x02
00393a   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1082; main.c	break;
00393c   efce     goto	0x3f9c              	GOTO	_00563_DS_
00393e   f01f
                                           _00472_DS_:
                                           _00473_DS_:
                                           _00474_DS_:
                                           _00475_DS_:
                                           ;	.line	1091; main.c	MIOS_LCD_CursorSet(0x00 + 1);
003940   0e01     movlw	0x1                	MOVLW	0x01
003942   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003944   f016
                                           ;	.line	1092; main.c	MIOS_LCD_PrintCString(" Output   type ");
003946   0e00     movlw	0                  	MOVLW	UPPER(__str_48)
003948   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00394a   0e43     movlw	0x43               	MOVLW	HIGH(__str_48)
00394c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00394e   0e00     movlw	0                  	MOVLW	LOW(__str_48)
003950   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003952   f02f
003954   0e02     movlw	0x2                	MOVLW	0x02
003956   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1093; main.c	MIOS_LCD_CursorSet(0x00 + 9);
003958   0e09     movlw	0x9                	MOVLW	0x09
00395a   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
00395c   f016
                                           ;	.line	1094; main.c	MIOS_LCD_PrintBCD1(MenuPos-13); //output number
00395e   0ef3     movlw	0xf3               	MOVLW	0xf3
003960   0100     movlb	0                  	BANKSEL	_MenuPos
003962   25ab     addwf	0xab, 0, 0x1       	ADDWF	_MenuPos, W, B
003964   6e11     movwf	0x11, 0            	MOVWF	r0x01
003966   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
003968   ec8e     call	0x2d1c, 0           	CALL	_MIOS_LCD_PrintBCD1
00396a   f016
                                           ;	.line	1095; main.c	MIOS_LCD_CursorSet(0x40 + 1);
00396c   0e41     movlw	0x41               	MOVLW	0x41
00396e   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003970   f016
                                           ;	.line	1096; main.c	MIOS_LCD_PrintCString("                ");
003972   0e00     movlw	0                  	MOVLW	UPPER(__str_41)
003974   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003976   0e42     movlw	0x42               	MOVLW	HIGH(__str_41)
003978   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00397a   0e9e     movlw	0x9e               	MOVLW	LOW(__str_41)
00397c   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
00397e   f02f
003980   0e02     movlw	0x2                	MOVLW	0x02
003982   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1097; main.c	MIOS_LCD_CursorSet(0x40 + 3);
003984   0e43     movlw	0x43               	MOVLW	0x43
003986   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003988   f016
                                           ;	.line	1098; main.c	RelayType[MenuPos-14] ? MIOS_LCD_PrintCString("Momentary") : MIOS_LCD_PrintCString("Toggle");
00398a   0ef2     movlw	0xf2               	MOVLW	0xf2
00398c   0100     movlb	0                  	BANKSEL	_MenuPos
00398e   25ab     addwf	0xab, 0, 0x1       	ADDWF	_MenuPos, W, B
003990   6e11     movwf	0x11, 0            	MOVWF	r0x01
003992   6a12     clrf	0x12, 0             	CLRF	r0x02
003994   0e80     movlw	0x80               	MOVLW	LOW(_RelayType)
003996   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
003998   0e00     movlw	0                  	MOVLW	HIGH(_RelayType)
00399a   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
00399c   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
00399e   ffe1
0039a0   c012     movff	0x12, 0xfe2        	MOVFF	r0x02, FSR0H
0039a2   ffe2
0039a4   cfe7     movff	0xfe7, 0x11        	MOVFF	INDF0, r0x01
0039a6   f011
0039a8   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0039aa   e00b     bz	0x39c2                	BZ	_00570_DS_
0039ac   0e00     movlw	0                  	MOVLW	UPPER(__str_49)
0039ae   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0039b0   0e43     movlw	0x43               	MOVLW	HIGH(__str_49)
0039b2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0039b4   0e10     movlw	0x10               	MOVLW	LOW(__str_49)
0039b6   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
0039b8   f02f
0039ba   0e02     movlw	0x2                	MOVLW	0x02
0039bc   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
0039be   efce     goto	0x3f9c              	GOTO	_00563_DS_
0039c0   f01f
                                           _00570_DS_:
0039c2   0e00     movlw	0                  	MOVLW	UPPER(__str_50)
0039c4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0039c6   0e43     movlw	0x43               	MOVLW	HIGH(__str_50)
0039c8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0039ca   0e1a     movlw	0x1a               	MOVLW	LOW(__str_50)
0039cc   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
0039ce   f02f
0039d0   0e02     movlw	0x2                	MOVLW	0x02
0039d2   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1099; main.c	break;
0039d4   efce     goto	0x3f9c              	GOTO	_00563_DS_
0039d6   f01f
                                           _00480_DS_:
                                           _00481_DS_:
                                           _00482_DS_:
                                           _00483_DS_:
                                           ;	.line	1108; main.c	MIOS_LCD_CursorSet(0x00 + 1);
0039d8   0e01     movlw	0x1                	MOVLW	0x01
0039da   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
0039dc   f016
                                           ;	.line	1109; main.c	MIOS_LCD_PrintCString(" Output   mode ");
0039de   0e00     movlw	0                  	MOVLW	UPPER(__str_51)
0039e0   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0039e2   0e43     movlw	0x43               	MOVLW	HIGH(__str_51)
0039e4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0039e6   0e22     movlw	0x22               	MOVLW	LOW(__str_51)
0039e8   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
0039ea   f02f
0039ec   0e02     movlw	0x2                	MOVLW	0x02
0039ee   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1110; main.c	MIOS_LCD_CursorSet(0x00 + 9);
0039f0   0e09     movlw	0x9                	MOVLW	0x09
0039f2   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
0039f4   f016
                                           ;	.line	1111; main.c	MIOS_LCD_PrintBCD1(MenuPos-21); //output number
0039f6   0eeb     movlw	0xeb               	MOVLW	0xeb
0039f8   0100     movlb	0                  	BANKSEL	_MenuPos
0039fa   25ab     addwf	0xab, 0, 0x1       	ADDWF	_MenuPos, W, B
0039fc   6e11     movwf	0x11, 0            	MOVWF	r0x01
0039fe   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
003a00   ec8e     call	0x2d1c, 0           	CALL	_MIOS_LCD_PrintBCD1
003a02   f016
                                           ;	.line	1112; main.c	MIOS_LCD_CursorSet(0x40 + 1);
003a04   0e41     movlw	0x41               	MOVLW	0x41
003a06   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003a08   f016
                                           ;	.line	1113; main.c	MIOS_LCD_PrintCString("                ");
003a0a   0e00     movlw	0                  	MOVLW	UPPER(__str_41)
003a0c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003a0e   0e42     movlw	0x42               	MOVLW	HIGH(__str_41)
003a10   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003a12   0e9e     movlw	0x9e               	MOVLW	LOW(__str_41)
003a14   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003a16   f02f
003a18   0e02     movlw	0x2                	MOVLW	0x02
003a1a   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1114; main.c	MIOS_LCD_CursorSet(0x40 + 3);
003a1c   0e43     movlw	0x43               	MOVLW	0x43
003a1e   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003a20   f016
                                           ;	.line	1115; main.c	RelayMode[MenuPos-22] ? MIOS_LCD_PrintCString("Radio") : MIOS_LCD_PrintCString("Free");
003a22   0eea     movlw	0xea               	MOVLW	0xea
003a24   0100     movlb	0                  	BANKSEL	_MenuPos
003a26   25ab     addwf	0xab, 0, 0x1       	ADDWF	_MenuPos, W, B
003a28   6e11     movwf	0x11, 0            	MOVWF	r0x01
003a2a   6a12     clrf	0x12, 0             	CLRF	r0x02
003a2c   0e90     movlw	0x90               	MOVLW	LOW(_RelayMode)
003a2e   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
003a30   0e00     movlw	0                  	MOVLW	HIGH(_RelayMode)
003a32   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
003a34   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
003a36   ffe1
003a38   c012     movff	0x12, 0xfe2        	MOVFF	r0x02, FSR0H
003a3a   ffe2
003a3c   cfe7     movff	0xfe7, 0x11        	MOVFF	INDF0, r0x01
003a3e   f011
003a40   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
003a42   e00b     bz	0x3a5a                	BZ	_00572_DS_
003a44   0e00     movlw	0                  	MOVLW	UPPER(__str_52)
003a46   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003a48   0e43     movlw	0x43               	MOVLW	HIGH(__str_52)
003a4a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003a4c   0e32     movlw	0x32               	MOVLW	LOW(__str_52)
003a4e   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003a50   f02f
003a52   0e02     movlw	0x2                	MOVLW	0x02
003a54   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
003a56   efce     goto	0x3f9c              	GOTO	_00563_DS_
003a58   f01f
                                           _00572_DS_:
003a5a   0e00     movlw	0                  	MOVLW	UPPER(__str_53)
003a5c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003a5e   0e43     movlw	0x43               	MOVLW	HIGH(__str_53)
003a60   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003a62   0e38     movlw	0x38               	MOVLW	LOW(__str_53)
003a64   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003a66   f02f
003a68   0e02     movlw	0x2                	MOVLW	0x02
003a6a   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1117; main.c	}
003a6c   efce     goto	0x3f9c              	GOTO	_00563_DS_
003a6e   f01f
                                           _00486_DS_:
                                           ;	.line	1121; main.c	MenuPos=6;
003a70   0e06     movlw	0x6                	MOVLW	0x06
003a72   0100     movlb	0                  	BANKSEL	_MenuPos
003a74   6fab     movwf	0xab, 0x1          	MOVWF	_MenuPos, B
                                           ;	.line	1122; main.c	MIOS_LCD_CursorSet(0x00 + 1);
003a76   0e01     movlw	0x1                	MOVLW	0x01
003a78   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003a7a   f016
                                           ;	.line	1123; main.c	MIOS_LCD_PrintCString("  Footswitch 1  ");
003a7c   0e00     movlw	0                  	MOVLW	UPPER(__str_33)
003a7e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003a80   0e42     movlw	0x42               	MOVLW	HIGH(__str_33)
003a82   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003a84   0e0e     movlw	0xe                	MOVLW	LOW(__str_33)
003a86   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003a88   f02f
003a8a   0e02     movlw	0x2                	MOVLW	0x02
003a8c   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1124; main.c	MIOS_LCD_CursorSet(0x40 + 1);
003a8e   0e41     movlw	0x41               	MOVLW	0x41
003a90   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003a92   f016
                                           ;	.line	1125; main.c	MIOS_LCD_PrintCString("  Preset        ");
003a94   0e00     movlw	0                  	MOVLW	UPPER(__str_34)
003a96   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003a98   0e42     movlw	0x42               	MOVLW	HIGH(__str_34)
003a9a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003a9c   0e20     movlw	0x20               	MOVLW	LOW(__str_34)
003a9e   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003aa0   f02f
003aa2   0e02     movlw	0x2                	MOVLW	0x02
003aa4   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1126; main.c	MIOS_LCD_CursorSet(0x40 + 10);
003aa6   0e4a     movlw	0x4a               	MOVLW	0x4a
003aa8   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003aaa   f016
003aac   0100     movlb	0                  	BANKSEL	_FootPreset
                                           ;	.line	1127; main.c	MIOS_LCD_PrintBCD3(FootPreset[0]);
003aae   51a0     movf	0xa0, 0, 0x1        	MOVF	_FootPreset, W, B
003ab0   ec92     call	0x2d24, 0           	CALL	_MIOS_LCD_PrintBCD3
003ab2   f016
                                           ;	.line	1129; main.c	break;
003ab4   efce     goto	0x3f9c              	GOTO	_00563_DS_
003ab6   f01f
                                           _00488_DS_:
                                           ;	.line	1133; main.c	SaveGlobalOptions();
003ab8   ecdd     call	0x53ba, 0           	CALL	_SaveGlobalOptions
003aba   f029
003abc   0100     movlb	0                  	BANKSEL	_MenuPos
                                           ;	.line	1135; main.c	MenuPos = 0;
003abe   6bab     clrf	0xab, 0x1           	CLRF	_MenuPos, B
                                           ;	.line	1137; main.c	MIOS_LCD_Clear();
003ac0   ec82     call	0x2d04, 0           	CALL	_MIOS_LCD_Clear
003ac2   f016
                                           ;	.line	1138; main.c	MIOS_LCD_CursorSet(0x00 + 0);
003ac4   0e00     movlw	0                  	MOVLW	0x00
003ac6   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003ac8   f016
                                           ;	.line	1139; main.c	MIOS_LCD_PrintCString("**   Options  **");
003aca   0e00     movlw	0                  	MOVLW	UPPER(__str_54)
003acc   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003ace   0e43     movlw	0x43               	MOVLW	HIGH(__str_54)
003ad0   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003ad2   0e3e     movlw	0x3e               	MOVLW	LOW(__str_54)
003ad4   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003ad6   f02f
003ad8   0e02     movlw	0x2                	MOVLW	0x02
003ada   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1140; main.c	MIOS_LCD_CursorSet(0x40 + 0);
003adc   0e40     movlw	0x40               	MOVLW	0x40
003ade   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003ae0   f016
                                           ;	.line	1141; main.c	MIOS_LCD_PrintCString("**    Saved   **");
003ae2   0e00     movlw	0                  	MOVLW	UPPER(__str_36)
003ae4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003ae6   0e42     movlw	0x42               	MOVLW	HIGH(__str_36)
003ae8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003aea   0e44     movlw	0x44               	MOVLW	LOW(__str_36)
003aec   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003aee   f02f
003af0   0e02     movlw	0x2                	MOVLW	0x02
003af2   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1142; main.c	MIOS_LCD_MessageStart(100);
003af4   0e64     movlw	0x64               	MOVLW	0x64
003af6   ecfa     call	0x2df4, 0           	CALL	_MIOS_LCD_MessageStart
003af8   f016
                                           ;	.line	1143; main.c	break;
003afa   efce     goto	0x3f9c              	GOTO	_00563_DS_
003afc   f01f
                                           _00490_DS_:
                                           ;	.line	1147; main.c	switch (MenuPos)
003afe   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003b00   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
003b02   efce     goto	0x3f9c              	GOTO	_00563_DS_
003b04   f01f
003b06   0e1e     movlw	0x1e               	MOVLW	0x1e
003b08   0100     movlb	0                  	BANKSEL	_MenuPos
003b0a   5dab     subwf	0xab, 0, 0x1       	SUBWF	_MenuPos, W, B
003b0c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003b0e   efce     goto	0x3f9c              	GOTO	_00563_DS_
003b10   f01f
003b12   0efa     movlw	0xfa               	MOVLW	0xfa
                                           ; removed redundant BANKSEL
003b14   25ab     addwf	0xab, 0, 0x1       	ADDWF	_MenuPos, W, B
003b16   6e10     movwf	0x10, 0            	MOVWF	r0x00
003b18   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
003b1a   ffed
003b1c   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
003b1e   ffed
003b20   6a17     clrf	0x17, 0             	CLRF	r0x07
003b22   3410     rlcf	0x10, 0, 0          	RLCF	r0x00, W
003b24   3617     rlcf	0x17, 0x1, 0        	RLCF	r0x07, F
003b26   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
003b28   3617     rlcf	0x17, 0x1, 0        	RLCF	r0x07, F
003b2a   0bfc     andlw	0xfc               	ANDLW	0xfc
003b2c   6e16     movwf	0x16, 0            	MOVWF	r0x06
003b2e   0e00     movlw	0                  	MOVLW	UPPER(_00637_DS_)
003b30   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
003b32   0e3b     movlw	0x3b               	MOVLW	HIGH(_00637_DS_)
003b34   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
003b36   0e4e     movlw	0x4e               	MOVLW	LOW(_00637_DS_)
003b38   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
003b3a   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
003b3c   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
003b3e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003b40   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
003b42   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
003b44   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
003b46   f017
003b48   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
003b4a   f016
003b4c   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00637_DS_:
003b4e   efd7     goto	0x3bae              	GOTO	_00494_DS_
003b50   f01d
003b52   efd7     goto	0x3bae              	GOTO	_00494_DS_
003b54   f01d
003b56   efd7     goto	0x3bae              	GOTO	_00494_DS_
003b58   f01d
003b5a   efd7     goto	0x3bae              	GOTO	_00494_DS_
003b5c   f01d
003b5e   ef45     goto	0x3c8a              	GOTO	_00506_DS_
003b60   f01e
003b62   ef8a     goto	0x3d14              	GOTO	_00521_DS_
003b64   f01e
003b66   efd7     goto	0x3dae              	GOTO	_00536_DS_
003b68   f01e
003b6a   ef04     goto	0x3e08              	GOTO	_00537_DS_
003b6c   f01f
003b6e   ef31     goto	0x3e62              	GOTO	_00542_DS_
003b70   f01f
003b72   ef31     goto	0x3e62              	GOTO	_00542_DS_
003b74   f01f
003b76   ef31     goto	0x3e62              	GOTO	_00542_DS_
003b78   f01f
003b7a   ef31     goto	0x3e62              	GOTO	_00542_DS_
003b7c   f01f
003b7e   ef31     goto	0x3e62              	GOTO	_00542_DS_
003b80   f01f
003b82   ef31     goto	0x3e62              	GOTO	_00543_DS_
003b84   f01f
003b86   ef31     goto	0x3e62              	GOTO	_00544_DS_
003b88   f01f
003b8a   ef31     goto	0x3e62              	GOTO	_00545_DS_
003b8c   f01f
003b8e   ef80     goto	0x3f00              	GOTO	_00550_DS_
003b90   f01f
003b92   ef80     goto	0x3f00              	GOTO	_00550_DS_
003b94   f01f
003b96   ef80     goto	0x3f00              	GOTO	_00550_DS_
003b98   f01f
003b9a   ef80     goto	0x3f00              	GOTO	_00550_DS_
003b9c   f01f
003b9e   ef80     goto	0x3f00              	GOTO	_00550_DS_
003ba0   f01f
003ba2   ef80     goto	0x3f00              	GOTO	_00551_DS_
003ba4   f01f
003ba6   ef80     goto	0x3f00              	GOTO	_00552_DS_
003ba8   f01f
003baa   ef80     goto	0x3f00              	GOTO	_00553_DS_
003bac   f01f
                                           _00494_DS_:
                                           ;	.line	1153; main.c	if ( (LastButton-4) == 0 ) // Down button
003bae   c0aa     movff	0xaa, 0x11         	MOVFF	_LastButton, r0x01
003bb0   f011
003bb2   6a12     clrf	0x12, 0             	CLRF	r0x02
003bb4   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
003bb6   0ffc     addlw	0xfc               	ADDLW	0xfc
003bb8   6e13     movwf	0x13, 0            	MOVWF	r0x03
003bba   0eff     movlw	0xff               	MOVLW	0xff
003bbc   2012     addwfc	0x12, 0, 0        	ADDWFC	r0x02, W
003bbe   6e14     movwf	0x14, 0            	MOVWF	r0x04
003bc0   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
003bc2   1014     iorwf	0x14, 0, 0         	IORWF	r0x04, W
003bc4   e11d     bnz	0x3c00               	BNZ	_00504_DS_
                                           ;	.line	1155; main.c	if ( FootPreset[MenuPos-6] > 0) 
003bc6   0ea0     movlw	0xa0               	MOVLW	LOW(_FootPreset)
003bc8   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003bca   6e13     movwf	0x13, 0            	MOVWF	r0x03
003bcc   6a14     clrf	0x14, 0             	CLRF	r0x04
003bce   0e00     movlw	0                  	MOVLW	HIGH(_FootPreset)
003bd0   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
003bd2   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003bd4   ffe1
003bd6   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
003bd8   ffe2
003bda   cfe7     movff	0xfe7, 0x15        	MOVFF	INDF0, r0x05
003bdc   f015
003bde   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
003be0   e008     bz	0x3bf2                	BZ	_00496_DS_
                                           ;	.line	1156; main.c	{ FootPreset[MenuPos-6]--; }
003be2   0615     decf	0x15, 0x1, 0        	DECF	r0x05, F
003be4   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003be6   ffe1
003be8   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
003bea   ffe2
003bec   c015     movff	0x15, 0xfe7        	MOVFF	r0x05, INDF0
003bee   ffe7
003bf0   d02a     bra	0x3c46               	BRA	_00505_DS_
                                           _00496_DS_:
                                           ;	.line	1158; main.c	{ FootPreset[MenuPos-6] = 100; }
003bf2   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003bf4   ffe1
003bf6   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
003bf8   ffe2
003bfa   0e64     movlw	0x64               	MOVLW	0x64
003bfc   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
003bfe   d023     bra	0x3c46               	BRA	_00505_DS_
                                           _00504_DS_:
                                           ;	.line	1160; main.c	else if ( (LastButton-3) == 0 ) // Up button
003c00   0efd     movlw	0xfd               	MOVLW	0xfd
003c02   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
003c04   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
003c06   0612     decf	0x12, 0x1, 0        	DECF	r0x02, F
003c08   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
003c0a   1012     iorwf	0x12, 0, 0         	IORWF	r0x02, W
003c0c   e11c     bnz	0x3c46               	BNZ	_00505_DS_
                                           ;	.line	1162; main.c	if ( FootPreset[MenuPos-6] < 100) 
003c0e   6a11     clrf	0x11, 0             	CLRF	r0x01
003c10   0ea0     movlw	0xa0               	MOVLW	LOW(_FootPreset)
003c12   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003c14   0e00     movlw	0                  	MOVLW	HIGH(_FootPreset)
003c16   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003c18   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003c1a   ffe1
003c1c   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003c1e   ffe2
003c20   cfe7     movff	0xfe7, 0x12        	MOVFF	INDF0, r0x02
003c22   f012
003c24   0e64     movlw	0x64               	MOVLW	0x64
003c26   5c12     subwf	0x12, 0, 0         	SUBWF	r0x02, W
003c28   e208     bc	0x3c3a                	BC	_00499_DS_
                                           ;	.line	1163; main.c	{ FootPreset[MenuPos-6]++; }
003c2a   2a12     incf	0x12, 0x1, 0        	INCF	r0x02, F
003c2c   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003c2e   ffe1
003c30   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003c32   ffe2
003c34   c012     movff	0x12, 0xfe7        	MOVFF	r0x02, INDF0
003c36   ffe7
003c38   d006     bra	0x3c46               	BRA	_00505_DS_
                                           _00499_DS_:
                                           ;	.line	1165; main.c	{ FootPreset[MenuPos-6] = 0; }
003c3a   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003c3c   ffe1
003c3e   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003c40   ffe2
003c42   0e00     movlw	0                  	MOVLW	0x00
003c44   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           _00505_DS_:
                                           ;	.line	1167; main.c	MIOS_LCD_CursorSet(0x40 + 1);
003c46   0e41     movlw	0x41               	MOVLW	0x41
003c48   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003c4a   f016
                                           ;	.line	1168; main.c	MIOS_LCD_PrintCString("  Preset        ");
003c4c   0e00     movlw	0                  	MOVLW	UPPER(__str_34)
003c4e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003c50   0e42     movlw	0x42               	MOVLW	HIGH(__str_34)
003c52   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003c54   0e20     movlw	0x20               	MOVLW	LOW(__str_34)
003c56   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003c58   f02f
003c5a   0e02     movlw	0x2                	MOVLW	0x02
003c5c   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1169; main.c	MIOS_LCD_CursorSet(0x40 + 11);
003c5e   0e4b     movlw	0x4b               	MOVLW	0x4b
003c60   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003c62   f016
                                           ;	.line	1170; main.c	MIOS_LCD_PrintBCD3(FootPreset[MenuPos-6]);
003c64   0efa     movlw	0xfa               	MOVLW	0xfa
003c66   0100     movlb	0                  	BANKSEL	_MenuPos
003c68   25ab     addwf	0xab, 0, 0x1       	ADDWF	_MenuPos, W, B
003c6a   6e10     movwf	0x10, 0            	MOVWF	r0x00
003c6c   6a11     clrf	0x11, 0             	CLRF	r0x01
003c6e   0ea0     movlw	0xa0               	MOVLW	LOW(_FootPreset)
003c70   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003c72   0e00     movlw	0                  	MOVLW	HIGH(_FootPreset)
003c74   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003c76   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003c78   ffe1
003c7a   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003c7c   ffe2
003c7e   cfe7     movff	0xfe7, 0x10        	MOVFF	INDF0, r0x00
003c80   f010
003c82   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003c84   ec92     call	0x2d24, 0           	CALL	_MIOS_LCD_PrintBCD3
003c86   f016
                                           ;	.line	1171; main.c	break;
003c88   d189     bra	0x3f9c               	BRA	_00563_DS_
                                           _00506_DS_:
                                           ;	.line	1173; main.c	if ( (LastButton-4) == 0 ) // Down button
003c8a   c0aa     movff	0xaa, 0x10         	MOVFF	_LastButton, r0x00
003c8c   f010
003c8e   6a11     clrf	0x11, 0             	CLRF	r0x01
003c90   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003c92   0ffc     addlw	0xfc               	ADDLW	0xfc
003c94   6e12     movwf	0x12, 0            	MOVWF	r0x02
003c96   0eff     movlw	0xff               	MOVLW	0xff
003c98   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x01, W
003c9a   6e13     movwf	0x13, 0            	MOVWF	r0x03
003c9c   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
003c9e   1013     iorwf	0x13, 0, 0         	IORWF	r0x03, W
003ca0   e109     bnz	0x3cb4               	BNZ	_00516_DS_
003ca2   0100     movlb	0                  	BANKSEL	_MidiChannel
                                           ;	.line	1175; main.c	if ( MidiChannel > 0) 
003ca4   51a4     movf	0xa4, 0, 0x1        	MOVF	_MidiChannel, W, B
003ca6   e002     bz	0x3cac                	BZ	_00508_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	1176; main.c	{ MidiChannel--; }
003ca8   07a4     decf	0xa4, 0x1, 0x1      	DECF	_MidiChannel, F, B
003caa   d013     bra	0x3cd2               	BRA	_00517_DS_
                                           _00508_DS_:
                                           ;	.line	1178; main.c	{ MidiChannel = 16; }
003cac   0e10     movlw	0x10               	MOVLW	0x10
003cae   0100     movlb	0                  	BANKSEL	_MidiChannel
003cb0   6fa4     movwf	0xa4, 0x1          	MOVWF	_MidiChannel, B
003cb2   d00f     bra	0x3cd2               	BRA	_00517_DS_
                                           _00516_DS_:
                                           ;	.line	1180; main.c	else if ( (LastButton-3) == 0 ) // Up button
003cb4   0efd     movlw	0xfd               	MOVLW	0xfd
003cb6   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003cb8   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
003cba   0611     decf	0x11, 0x1, 0        	DECF	r0x01, F
003cbc   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003cbe   1011     iorwf	0x11, 0, 0         	IORWF	r0x01, W
003cc0   e108     bnz	0x3cd2               	BNZ	_00517_DS_
                                           ;	.line	1182; main.c	if ( MidiChannel < 16) 
003cc2   0e10     movlw	0x10               	MOVLW	0x10
003cc4   0100     movlb	0                  	BANKSEL	_MidiChannel
003cc6   5da4     subwf	0xa4, 0, 0x1       	SUBWF	_MidiChannel, W, B
003cc8   e202     bc	0x3cce                	BC	_00511_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	1183; main.c	{ MidiChannel++; }
003cca   2ba4     incf	0xa4, 0x1, 0x1      	INCF	_MidiChannel, F, B
003ccc   d002     bra	0x3cd2               	BRA	_00517_DS_
                                           _00511_DS_:
003cce   0100     movlb	0                  	BANKSEL	_MidiChannel
                                           ;	.line	1185; main.c	{ MidiChannel = 0; }
003cd0   6ba4     clrf	0xa4, 0x1           	CLRF	_MidiChannel, B
                                           _00517_DS_:
                                           ;	.line	1187; main.c	MIOS_LCD_CursorSet(0x40 + 1);
003cd2   0e41     movlw	0x41               	MOVLW	0x41
003cd4   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003cd6   f016
                                           ;	.line	1188; main.c	MIOS_LCD_PrintCString("                ");
003cd8   0e00     movlw	0                  	MOVLW	UPPER(__str_41)
003cda   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003cdc   0e42     movlw	0x42               	MOVLW	HIGH(__str_41)
003cde   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003ce0   0e9e     movlw	0x9e               	MOVLW	LOW(__str_41)
003ce2   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003ce4   f02f
003ce6   0e02     movlw	0x2                	MOVLW	0x02
003ce8   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1189; main.c	MIOS_LCD_CursorSet(0x40 + 7);
003cea   0e47     movlw	0x47               	MOVLW	0x47
003cec   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003cee   f016
003cf0   0100     movlb	0                  	BANKSEL	_MidiChannel
                                           ;	.line	1190; main.c	if ( MidiChannel == 0 )
003cf2   51a4     movf	0xa4, 0, 0x1        	MOVF	_MidiChannel, W, B
003cf4   e10a     bnz	0x3d0a               	BNZ	_00519_DS_
                                           ;	.line	1192; main.c	MIOS_LCD_PrintCString("All");
003cf6   0e00     movlw	0                  	MOVLW	UPPER(__str_55)
003cf8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003cfa   0e43     movlw	0x43               	MOVLW	HIGH(__str_55)
003cfc   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003cfe   0e50     movlw	0x50               	MOVLW	LOW(__str_55)
003d00   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003d02   f02f
003d04   0e02     movlw	0x2                	MOVLW	0x02
003d06   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
003d08   d149     bra	0x3f9c               	BRA	_00563_DS_
                                           _00519_DS_:
003d0a   0100     movlb	0                  	BANKSEL	_MidiChannel
                                           ;	.line	1196; main.c	MIOS_LCD_PrintBCD2(MidiChannel);
003d0c   51a4     movf	0xa4, 0, 0x1        	MOVF	_MidiChannel, W, B
003d0e   ec90     call	0x2d20, 0           	CALL	_MIOS_LCD_PrintBCD2
003d10   f016
                                           ;	.line	1198; main.c	break;
003d12   d144     bra	0x3f9c               	BRA	_00563_DS_
                                           _00521_DS_:
                                           ;	.line	1200; main.c	if ( (LastButton-4) == 0 ) // Down button
003d14   c0aa     movff	0xaa, 0x10         	MOVFF	_LastButton, r0x00
003d16   f010
003d18   6a11     clrf	0x11, 0             	CLRF	r0x01
003d1a   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003d1c   0ffc     addlw	0xfc               	ADDLW	0xfc
003d1e   6e12     movwf	0x12, 0            	MOVWF	r0x02
003d20   0eff     movlw	0xff               	MOVLW	0xff
003d22   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x01, W
003d24   6e13     movwf	0x13, 0            	MOVWF	r0x03
003d26   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
003d28   1013     iorwf	0x13, 0, 0         	IORWF	r0x03, W
003d2a   e109     bnz	0x3d3e               	BNZ	_00531_DS_
003d2c   0100     movlb	0                  	BANKSEL	_ThisStartupPreset
                                           ;	.line	1202; main.c	if ( ThisStartupPreset > 0) 
003d2e   51a9     movf	0xa9, 0, 0x1        	MOVF	_ThisStartupPreset, W, B
003d30   e002     bz	0x3d36                	BZ	_00523_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	1203; main.c	{ ThisStartupPreset--; }
003d32   07a9     decf	0xa9, 0x1, 0x1      	DECF	_ThisStartupPreset, F, B
003d34   d013     bra	0x3d5c               	BRA	_00532_DS_
                                           _00523_DS_:
                                           ;	.line	1205; main.c	{ ThisStartupPreset = 100; }
003d36   0e64     movlw	0x64               	MOVLW	0x64
003d38   0100     movlb	0                  	BANKSEL	_ThisStartupPreset
003d3a   6fa9     movwf	0xa9, 0x1          	MOVWF	_ThisStartupPreset, B
003d3c   d00f     bra	0x3d5c               	BRA	_00532_DS_
                                           _00531_DS_:
                                           ;	.line	1207; main.c	else if ( (LastButton-3) == 0 ) // Up button
003d3e   0efd     movlw	0xfd               	MOVLW	0xfd
003d40   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003d42   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
003d44   0611     decf	0x11, 0x1, 0        	DECF	r0x01, F
003d46   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003d48   1011     iorwf	0x11, 0, 0         	IORWF	r0x01, W
003d4a   e108     bnz	0x3d5c               	BNZ	_00532_DS_
                                           ;	.line	1209; main.c	if ( ThisStartupPreset < 100) 
003d4c   0e64     movlw	0x64               	MOVLW	0x64
003d4e   0100     movlb	0                  	BANKSEL	_ThisStartupPreset
003d50   5da9     subwf	0xa9, 0, 0x1       	SUBWF	_ThisStartupPreset, W, B
003d52   e202     bc	0x3d58                	BC	_00526_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	1210; main.c	{ ThisStartupPreset++; }
003d54   2ba9     incf	0xa9, 0x1, 0x1      	INCF	_ThisStartupPreset, F, B
003d56   d002     bra	0x3d5c               	BRA	_00532_DS_
                                           _00526_DS_:
003d58   0100     movlb	0                  	BANKSEL	_ThisStartupPreset
                                           ;	.line	1212; main.c	{ ThisStartupPreset = 0; }
003d5a   6ba9     clrf	0xa9, 0x1           	CLRF	_ThisStartupPreset, B
                                           _00532_DS_:
                                           ;	.line	1214; main.c	MIOS_LCD_CursorSet(0x40 + 1);
003d5c   0e41     movlw	0x41               	MOVLW	0x41
003d5e   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003d60   f016
                                           ;	.line	1215; main.c	MIOS_LCD_PrintCString("                ");
003d62   0e00     movlw	0                  	MOVLW	UPPER(__str_41)
003d64   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003d66   0e42     movlw	0x42               	MOVLW	HIGH(__str_41)
003d68   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003d6a   0e9e     movlw	0x9e               	MOVLW	LOW(__str_41)
003d6c   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003d6e   f02f
003d70   0e02     movlw	0x2                	MOVLW	0x02
003d72   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
003d74   0100     movlb	0                  	BANKSEL	_ThisStartupPreset
                                           ;	.line	1216; main.c	if ( ThisStartupPreset == 0 )
003d76   51a9     movf	0xa9, 0, 0x1        	MOVF	_ThisStartupPreset, W, B
003d78   e10f     bnz	0x3d98               	BNZ	_00534_DS_
                                           ;	.line	1218; main.c	MIOS_LCD_CursorSet(0x40 + 1);
003d7a   0e41     movlw	0x41               	MOVLW	0x41
003d7c   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003d7e   f016
                                           ;	.line	1219; main.c	MIOS_LCD_PrintCString(" ** Last Used **");
003d80   0e00     movlw	0                  	MOVLW	UPPER(__str_43)
003d82   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003d84   0e42     movlw	0x42               	MOVLW	HIGH(__str_43)
003d86   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003d88   0ec2     movlw	0xc2               	MOVLW	LOW(__str_43)
003d8a   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003d8c   f02f
003d8e   0e02     movlw	0x2                	MOVLW	0x02
003d90   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
003d92   0100     movlb	0                  	BANKSEL	_ForceStartupPreset
                                           ;	.line	1220; main.c	ForceStartupPreset = 0;
003d94   6ba8     clrf	0xa8, 0x1           	CLRF	_ForceStartupPreset, B
003d96   d102     bra	0x3f9c               	BRA	_00563_DS_
                                           _00534_DS_:
                                           ;	.line	1224; main.c	MIOS_LCD_CursorSet(0x40 + 7);
003d98   0e47     movlw	0x47               	MOVLW	0x47
003d9a   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003d9c   f016
003d9e   0100     movlb	0                  	BANKSEL	_ThisStartupPreset
                                           ;	.line	1225; main.c	MIOS_LCD_PrintBCD2(ThisStartupPreset);
003da0   51a9     movf	0xa9, 0, 0x1        	MOVF	_ThisStartupPreset, W, B
003da2   ec90     call	0x2d20, 0           	CALL	_MIOS_LCD_PrintBCD2
003da4   f016
                                           ;	.line	1226; main.c	ForceStartupPreset = 1;
003da6   0e01     movlw	0x1                	MOVLW	0x01
003da8   0100     movlb	0                  	BANKSEL	_ForceStartupPreset
003daa   6fa8     movwf	0xa8, 0x1          	MOVWF	_ForceStartupPreset, B
                                           ;	.line	1228; main.c	break;
003dac   d0f7     bra	0x3f9c               	BRA	_00563_DS_
                                           _00536_DS_:
003dae   0100     movlb	0                  	BANKSEL	_SendMidiOnButtonChange
                                           ;	.line	1230; main.c	SendMidiOnButtonChange = !SendMidiOnButtonChange;
003db0   51a6     movf	0xa6, 0, 0x1        	MOVF	_SendMidiOnButtonChange, W, B
003db2   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
003db4   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
003db6   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           ; removed redundant BANKSEL
003db8   6ba6     clrf	0xa6, 0x1           	CLRF	_SendMidiOnButtonChange, B
003dba   37a6     rlcf	0xa6, 0x1, 0x1      	RLCF	_SendMidiOnButtonChange, F, B
                                           ;	.line	1231; main.c	MIOS_LCD_CursorSet(0x40 + 1);
003dbc   0e41     movlw	0x41               	MOVLW	0x41
003dbe   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003dc0   f016
                                           ;	.line	1232; main.c	MIOS_LCD_PrintCString("                ");
003dc2   0e00     movlw	0                  	MOVLW	UPPER(__str_41)
003dc4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003dc6   0e42     movlw	0x42               	MOVLW	HIGH(__str_41)
003dc8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003dca   0e9e     movlw	0x9e               	MOVLW	LOW(__str_41)
003dcc   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003dce   f02f
003dd0   0e02     movlw	0x2                	MOVLW	0x02
003dd2   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1233; main.c	MIOS_LCD_CursorSet(0x40 + 7);
003dd4   0e47     movlw	0x47               	MOVLW	0x47
003dd6   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003dd8   f016
003dda   0100     movlb	0                  	BANKSEL	_SendMidiOnButtonChange
                                           ;	.line	1234; main.c	SendMidiOnButtonChange ? MIOS_LCD_PrintCString("Yes") : MIOS_LCD_PrintCString("No");
003ddc   51a6     movf	0xa6, 0, 0x1        	MOVF	_SendMidiOnButtonChange, W, B
003dde   e00a     bz	0x3df4                	BZ	_00574_DS_
003de0   0e00     movlw	0                  	MOVLW	UPPER(__str_45)
003de2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003de4   0e42     movlw	0x42               	MOVLW	HIGH(__str_45)
003de6   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003de8   0ee6     movlw	0xe6               	MOVLW	LOW(__str_45)
003dea   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003dec   f02f
003dee   0e02     movlw	0x2                	MOVLW	0x02
003df0   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
003df2   d0d4     bra	0x3f9c               	BRA	_00563_DS_
                                           _00574_DS_:
003df4   0e00     movlw	0                  	MOVLW	UPPER(__str_46)
003df6   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003df8   0e42     movlw	0x42               	MOVLW	HIGH(__str_46)
003dfa   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003dfc   0eea     movlw	0xea               	MOVLW	LOW(__str_46)
003dfe   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003e00   f02f
003e02   0e02     movlw	0x2                	MOVLW	0x02
003e04   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1235; main.c	break;
003e06   d0ca     bra	0x3f9c               	BRA	_00563_DS_
                                           _00537_DS_:
003e08   0100     movlb	0                  	BANKSEL	_ReloadActivePreset
                                           ;	.line	1237; main.c	ReloadActivePreset = !ReloadActivePreset;
003e0a   51a7     movf	0xa7, 0, 0x1        	MOVF	_ReloadActivePreset, W, B
003e0c   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
003e0e   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
003e10   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           ; removed redundant BANKSEL
003e12   6ba7     clrf	0xa7, 0x1           	CLRF	_ReloadActivePreset, B
003e14   37a7     rlcf	0xa7, 0x1, 0x1      	RLCF	_ReloadActivePreset, F, B
                                           ;	.line	1238; main.c	MIOS_LCD_CursorSet(0x40 + 1);
003e16   0e41     movlw	0x41               	MOVLW	0x41
003e18   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003e1a   f016
                                           ;	.line	1239; main.c	MIOS_LCD_PrintCString("                ");
003e1c   0e00     movlw	0                  	MOVLW	UPPER(__str_41)
003e1e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003e20   0e42     movlw	0x42               	MOVLW	HIGH(__str_41)
003e22   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003e24   0e9e     movlw	0x9e               	MOVLW	LOW(__str_41)
003e26   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003e28   f02f
003e2a   0e02     movlw	0x2                	MOVLW	0x02
003e2c   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1240; main.c	MIOS_LCD_CursorSet(0x40 + 7);
003e2e   0e47     movlw	0x47               	MOVLW	0x47
003e30   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003e32   f016
003e34   0100     movlb	0                  	BANKSEL	_ReloadActivePreset
                                           ;	.line	1241; main.c	ReloadActivePreset ? MIOS_LCD_PrintCString("Yes") : MIOS_LCD_PrintCString("No");
003e36   51a7     movf	0xa7, 0, 0x1        	MOVF	_ReloadActivePreset, W, B
003e38   e00a     bz	0x3e4e                	BZ	_00576_DS_
003e3a   0e00     movlw	0                  	MOVLW	UPPER(__str_45)
003e3c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003e3e   0e42     movlw	0x42               	MOVLW	HIGH(__str_45)
003e40   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003e42   0ee6     movlw	0xe6               	MOVLW	LOW(__str_45)
003e44   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003e46   f02f
003e48   0e02     movlw	0x2                	MOVLW	0x02
003e4a   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
003e4c   d0a7     bra	0x3f9c               	BRA	_00563_DS_
                                           _00576_DS_:
003e4e   0e00     movlw	0                  	MOVLW	UPPER(__str_46)
003e50   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003e52   0e42     movlw	0x42               	MOVLW	HIGH(__str_46)
003e54   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003e56   0eea     movlw	0xea               	MOVLW	LOW(__str_46)
003e58   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003e5a   f02f
003e5c   0e02     movlw	0x2                	MOVLW	0x02
003e5e   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1242; main.c	break;
003e60   d09d     bra	0x3f9c               	BRA	_00563_DS_
                                           _00542_DS_:
                                           _00543_DS_:
                                           _00544_DS_:
                                           _00545_DS_:
                                           ;	.line	1251; main.c	RelayType[MenuPos-14]=!RelayType[MenuPos-14];
003e62   0ef2     movlw	0xf2               	MOVLW	0xf2
003e64   0100     movlb	0                  	BANKSEL	_MenuPos
003e66   25ab     addwf	0xab, 0, 0x1       	ADDWF	_MenuPos, W, B
003e68   6e10     movwf	0x10, 0            	MOVWF	r0x00
003e6a   6a11     clrf	0x11, 0             	CLRF	r0x01
003e6c   0e80     movlw	0x80               	MOVLW	LOW(_RelayType)
003e6e   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003e70   0e00     movlw	0                  	MOVLW	HIGH(_RelayType)
003e72   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003e74   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003e76   ffe1
003e78   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003e7a   ffe2
003e7c   cfe7     movff	0xfe7, 0x12        	MOVFF	INDF0, r0x02
003e7e   f012
003e80   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
003e82   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
003e84   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
003e86   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
003e88   6a12     clrf	0x12, 0             	CLRF	r0x02
003e8a   3612     rlcf	0x12, 0x1, 0        	RLCF	r0x02, F
003e8c   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003e8e   ffe1
003e90   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003e92   ffe2
003e94   c012     movff	0x12, 0xfe7        	MOVFF	r0x02, INDF0
003e96   ffe7
                                           ;	.line	1252; main.c	MIOS_LCD_CursorSet(0x40 + 1);
003e98   0e41     movlw	0x41               	MOVLW	0x41
003e9a   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003e9c   f016
                                           ;	.line	1253; main.c	MIOS_LCD_PrintCString("                ");
003e9e   0e00     movlw	0                  	MOVLW	UPPER(__str_41)
003ea0   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003ea2   0e42     movlw	0x42               	MOVLW	HIGH(__str_41)
003ea4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003ea6   0e9e     movlw	0x9e               	MOVLW	LOW(__str_41)
003ea8   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003eaa   f02f
003eac   0e02     movlw	0x2                	MOVLW	0x02
003eae   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1254; main.c	MIOS_LCD_CursorSet(0x40 + 3);
003eb0   0e43     movlw	0x43               	MOVLW	0x43
003eb2   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003eb4   f016
                                           ;	.line	1255; main.c	RelayType[MenuPos-14] ? MIOS_LCD_PrintCString("Momentary") : MIOS_LCD_PrintCString("Toggle");
003eb6   0ef2     movlw	0xf2               	MOVLW	0xf2
003eb8   0100     movlb	0                  	BANKSEL	_MenuPos
003eba   25ab     addwf	0xab, 0, 0x1       	ADDWF	_MenuPos, W, B
003ebc   6e10     movwf	0x10, 0            	MOVWF	r0x00
003ebe   6a11     clrf	0x11, 0             	CLRF	r0x01
003ec0   0e80     movlw	0x80               	MOVLW	LOW(_RelayType)
003ec2   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003ec4   0e00     movlw	0                  	MOVLW	HIGH(_RelayType)
003ec6   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003ec8   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003eca   ffe1
003ecc   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003ece   ffe2
003ed0   cfe7     movff	0xfe7, 0x10        	MOVFF	INDF0, r0x00
003ed2   f010
003ed4   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003ed6   e00a     bz	0x3eec                	BZ	_00578_DS_
003ed8   0e00     movlw	0                  	MOVLW	UPPER(__str_49)
003eda   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003edc   0e43     movlw	0x43               	MOVLW	HIGH(__str_49)
003ede   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003ee0   0e10     movlw	0x10               	MOVLW	LOW(__str_49)
003ee2   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003ee4   f02f
003ee6   0e02     movlw	0x2                	MOVLW	0x02
003ee8   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
003eea   d058     bra	0x3f9c               	BRA	_00563_DS_
                                           _00578_DS_:
003eec   0e00     movlw	0                  	MOVLW	UPPER(__str_50)
003eee   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003ef0   0e43     movlw	0x43               	MOVLW	HIGH(__str_50)
003ef2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003ef4   0e1a     movlw	0x1a               	MOVLW	LOW(__str_50)
003ef6   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003ef8   f02f
003efa   0e02     movlw	0x2                	MOVLW	0x02
003efc   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1256; main.c	break;
003efe   d04e     bra	0x3f9c               	BRA	_00563_DS_
                                           _00550_DS_:
                                           _00551_DS_:
                                           _00552_DS_:
                                           _00553_DS_:
                                           ;	.line	1265; main.c	RelayMode[MenuPos-22]=!RelayMode[MenuPos-22];
003f00   0eea     movlw	0xea               	MOVLW	0xea
003f02   0100     movlb	0                  	BANKSEL	_MenuPos
003f04   25ab     addwf	0xab, 0, 0x1       	ADDWF	_MenuPos, W, B
003f06   6e10     movwf	0x10, 0            	MOVWF	r0x00
003f08   6a11     clrf	0x11, 0             	CLRF	r0x01
003f0a   0e90     movlw	0x90               	MOVLW	LOW(_RelayMode)
003f0c   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003f0e   0e00     movlw	0                  	MOVLW	HIGH(_RelayMode)
003f10   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003f12   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003f14   ffe1
003f16   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003f18   ffe2
003f1a   cfe7     movff	0xfe7, 0x12        	MOVFF	INDF0, r0x02
003f1c   f012
003f1e   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
003f20   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
003f22   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
003f24   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
003f26   6a12     clrf	0x12, 0             	CLRF	r0x02
003f28   3612     rlcf	0x12, 0x1, 0        	RLCF	r0x02, F
003f2a   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003f2c   ffe1
003f2e   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003f30   ffe2
003f32   c012     movff	0x12, 0xfe7        	MOVFF	r0x02, INDF0
003f34   ffe7
                                           ;	.line	1266; main.c	MIOS_LCD_CursorSet(0x40 + 1);
003f36   0e41     movlw	0x41               	MOVLW	0x41
003f38   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003f3a   f016
                                           ;	.line	1267; main.c	MIOS_LCD_PrintCString("                ");
003f3c   0e00     movlw	0                  	MOVLW	UPPER(__str_41)
003f3e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003f40   0e42     movlw	0x42               	MOVLW	HIGH(__str_41)
003f42   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003f44   0e9e     movlw	0x9e               	MOVLW	LOW(__str_41)
003f46   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003f48   f02f
003f4a   0e02     movlw	0x2                	MOVLW	0x02
003f4c   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1268; main.c	MIOS_LCD_CursorSet(0x40 + 3);
003f4e   0e43     movlw	0x43               	MOVLW	0x43
003f50   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
003f52   f016
                                           ;	.line	1269; main.c	RelayMode[MenuPos-22] ? MIOS_LCD_PrintCString("Radio") : MIOS_LCD_PrintCString("Free");
003f54   0eea     movlw	0xea               	MOVLW	0xea
003f56   0100     movlb	0                  	BANKSEL	_MenuPos
003f58   25ab     addwf	0xab, 0, 0x1       	ADDWF	_MenuPos, W, B
003f5a   6e10     movwf	0x10, 0            	MOVWF	r0x00
003f5c   6a11     clrf	0x11, 0             	CLRF	r0x01
003f5e   0e90     movlw	0x90               	MOVLW	LOW(_RelayMode)
003f60   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003f62   0e00     movlw	0                  	MOVLW	HIGH(_RelayMode)
003f64   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003f66   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003f68   ffe1
003f6a   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003f6c   ffe2
003f6e   cfe7     movff	0xfe7, 0x10        	MOVFF	INDF0, r0x00
003f70   f010
003f72   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003f74   e00a     bz	0x3f8a                	BZ	_00580_DS_
003f76   0e00     movlw	0                  	MOVLW	UPPER(__str_52)
003f78   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003f7a   0e43     movlw	0x43               	MOVLW	HIGH(__str_52)
003f7c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003f7e   0e32     movlw	0x32               	MOVLW	LOW(__str_52)
003f80   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003f82   f02f
003f84   0e02     movlw	0x2                	MOVLW	0x02
003f86   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
003f88   d009     bra	0x3f9c               	BRA	_00563_DS_
                                           _00580_DS_:
003f8a   0e00     movlw	0                  	MOVLW	UPPER(__str_53)
003f8c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003f8e   0e43     movlw	0x43               	MOVLW	HIGH(__str_53)
003f90   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003f92   0e38     movlw	0x38               	MOVLW	LOW(__str_53)
003f94   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
003f96   f02f
003f98   0e02     movlw	0x2                	MOVLW	0x02
003f9a   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           _00563_DS_:
003f9c   0100     movlb	0                  	BANKSEL	_LastButton
                                           ;	.line	1278; main.c	LastButton = 0;
003f9e   6baa     clrf	0xaa, 0x1           	CLRF	_LastButton, B
003fa0   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
003fa2   f015
003fa4   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
003fa6   f014
003fa8   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
003faa   f013
003fac   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
003fae   f012
003fb0   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
003fb2   f011
003fb4   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
003fb6   f010
003fb8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Init	code
                                           _Init:
                                           ;	.line	855; main.c	void Init(void) __wparam
005eaa   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
005eac   ffed
                                           ;	.line	858; main.c	MIOS_SRIO_UpdateFrqSet(1); // ms
005eae   0e01     movlw	0x1                	MOVLW	0x01
005eb0   ec80     call	0x2d00, 0           	CALL	_MIOS_SRIO_UpdateFrqSet
005eb2   f016
                                           ;	.line	860; main.c	MIOS_SRIO_NumberSet(NUMBER_OF_SRIO);
005eb4   0e10     movlw	0x10               	MOVLW	0x10
005eb6   ec78     call	0x2cf0, 0           	CALL	_MIOS_SRIO_NumberSet
005eb8   f016
                                           ;	.line	862; main.c	MIOS_SRIO_DebounceSet(DIN_DEBOUNCE_VALUE);
005eba   0e0a     movlw	0xa                	MOVLW	0x0a
005ebc   ec12     call	0x2e24, 0           	CALL	_MIOS_SRIO_DebounceSet
005ebe   f017
005ec0   0100     movlb	0                  	BANKSEL	_LastButton
                                           ;	.line	865; main.c	LastButton = 0;
005ec2   6baa     clrf	0xaa, 0x1           	CLRF	_LastButton, B
005ec4   0100     movlb	0                  	BANKSEL	_MenuPos
                                           ;	.line	866; main.c	MenuPos = 0;
005ec6   6bab     clrf	0xab, 0x1           	CLRF	_MenuPos, B
005ec8   0100     movlb	0                  	BANKSEL	_MidiIn
                                           ;	.line	867; main.c	MidiIn = 0;
005eca   6bac     clrf	0xac, 0x1           	CLRF	_MidiIn, B
                                           ;	.line	870; main.c	LoadGlobalOptions();
005ecc   ec3a     call	0x5074, 0           	CALL	_LoadGlobalOptions
005ece   f028
                                           ;	.line	874; main.c	RelayState[5]=1;
005ed0   0e01     movlw	0x1                	MOVLW	0x01
005ed2   0100     movlb	0                  	BANKSEL	(_RelayState + 5)
005ed4   6f8d     movwf	0x8d, 0x1          	MOVWF	(_RelayState + 5), B
                                           ;	.line	876; main.c	MIOS_DOUT_PinSet(RelayLedPin[5], 1);
005ed6   0ebf     movlw	0xbf               	MOVLW	LOW(_RelayLedPin + 5)
005ed8   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
005eda   0e3f     movlw	0x3f               	MOVLW	HIGH(_RelayLedPin + 5)
005edc   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
005ede   0e00     movlw	0                  	MOVLW	UPPER(_RelayLedPin + 5)
005ee0   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
005ee2   0009     tblrd	*+                 	TBLRD*+	
005ee4   cff5     movff	0xff5, 0x10        	MOVFF	TABLAT, r0x00
005ee6   f010
005ee8   0e01     movlw	0x1                	MOVLW	0x01
005eea   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005eec   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
005eee   ec59     call	0x62b2, 0           	CALL	_MIOS_DOUT_PinSet
005ef0   f031
005ef2   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	879; main.c	StartupPreset();
005ef4   ec8c     call	0x5f18, 0           	CALL	_StartupPreset
005ef6   f02f
                                           ;	.line	883; main.c	DEBUG_MSG_SendHeader();
005ef8   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
005efa   f02b
                                           ;	.line	884; main.c	DEBUG_MSG_SendCString("Application ready.");
005efc   0e00     movlw	0                  	MOVLW	UPPER(__str_27)
005efe   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005f00   0e41     movlw	0x41               	MOVLW	HIGH(__str_27)
005f02   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005f04   0ede     movlw	0xde               	MOVLW	LOW(__str_27)
005f06   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
005f08   f02b
005f0a   0e02     movlw	0x2                	MOVLW	0x02
005f0c   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	885; main.c	DEBUG_MSG_SendFooter();
005f0e   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
005f10   f02b
005f12   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
005f14   f010
005f16   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__StartupPreset	code
                                           _StartupPreset:
                                           ;	.line	830; main.c	void StartupPreset ()
005f18   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
005f1a   ffed
005f1c   0100     movlb	0                  	BANKSEL	_CurrentPreset
                                           ;	.line	832; main.c	CurrentPreset = 0;  // force preset 0 to allow loading at startup even
005f1e   6ba5     clrf	0xa5, 0x1           	CLRF	_CurrentPreset, B
005f20   0100     movlb	0                  	BANKSEL	_ForceStartupPreset
                                           ;	.line	834; main.c	if ( ForceStartupPreset )
005f22   51a8     movf	0xa8, 0, 0x1        	MOVF	_ForceStartupPreset, W, B
005f24   e00b     bz	0x5f3c                	BZ	_00422_DS_
                                           ;	.line	836; main.c	ThisStartupPreset = MIOS_EEPROM_Read(0x08);
005f26   0e08     movlw	0x8                	MOVLW	0x08
005f28   ec9a     call	0x6334, 0           	CALL	_MIOS_EEPROM_Read
005f2a   f031
005f2c   0100     movlb	0                  	BANKSEL	_ThisStartupPreset
005f2e   6fa9     movwf	0xa9, 0x1          	MOVWF	_ThisStartupPreset, B
                                           ;	.line	837; main.c	LoadPreset(ThisStartupPreset);
005f30   51a9     movf	0xa9, 0, 0x1        	MOVF	_ThisStartupPreset, W, B
005f32   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005f34   ec3c     call	0x4478, 0           	CALL	_LoadPreset
005f36   f022
005f38   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	838; main.c	return;
005f3a   d01a     bra	0x5f70               	BRA	_00423_DS_
                                           _00422_DS_:
                                           ;	.line	843; main.c	DEBUG_MSG_SendHeader();
005f3c   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
005f3e   f02b
                                           ;	.line	844; main.c	DEBUG_MSG_SendCString("STARTUP PRESET");
005f40   0e00     movlw	0                  	MOVLW	UPPER(__str_26)
005f42   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005f44   0e41     movlw	0x41               	MOVLW	HIGH(__str_26)
005f46   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005f48   0ece     movlw	0xce               	MOVLW	LOW(__str_26)
005f4a   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
005f4c   f02b
005f4e   0e02     movlw	0x2                	MOVLW	0x02
005f50   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
005f52   0100     movlb	0                  	BANKSEL	_CurrentPreset
                                           ;	.line	845; main.c	DEBUG_MSG_SendBCD3(CurrentPreset);
005f54   51a5     movf	0xa5, 0, 0x1        	MOVF	_CurrentPreset, W, B
005f56   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
005f58   f02b
                                           ;	.line	846; main.c	DEBUG_MSG_SendFooter();
005f5a   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
005f5c   f02b
                                           ;	.line	848; main.c	LoadPreset(MIOS_EEPROM_Read(0x01));
005f5e   0e01     movlw	0x1                	MOVLW	0x01
005f60   ec9a     call	0x6334, 0           	CALL	_MIOS_EEPROM_Read
005f62   f031
005f64   6e10     movwf	0x10, 0            	MOVWF	r0x00
005f66   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
005f68   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005f6a   ec3c     call	0x4478, 0           	CALL	_LoadPreset
005f6c   f022
005f6e   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           _00423_DS_:
005f70   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
005f72   f010
005f74   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__FactoryReset	code
                                           _FactoryReset:
                                           ;	.line	760; main.c	unsigned char FactoryReset ()
0057ba   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
0057bc   ffed
0057be   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
0057c0   ffed
0057c2   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
0057c4   ffed
0057c6   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
0057c8   ffed
                                           ;	.line	764; main.c	unsigned char error = 0;
0057ca   6a10     clrf	0x10, 0             	CLRF	r0x00
                                           ;	.line	767; main.c	DEBUG_MSG_SendHeader();
0057cc   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
0057ce   f02b
                                           ;	.line	768; main.c	DEBUG_MSG_SendCString("Factory Reset");
0057d0   0e00     movlw	0                  	MOVLW	UPPER(__str_25)
0057d2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0057d4   0e41     movlw	0x41               	MOVLW	HIGH(__str_25)
0057d6   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0057d8   0ec0     movlw	0xc0               	MOVLW	LOW(__str_25)
0057da   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
0057dc   f02b
0057de   0e02     movlw	0x2                	MOVLW	0x02
0057e0   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	769; main.c	DEBUG_MSG_SendFooter();
0057e2   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
0057e4   f02b
                                           ;	.line	778; main.c	MIOS_EEPROM_Write(0x00,eeprom_byte);
0057e6   0e00     movlw	0                  	MOVLW	0x00
0057e8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0057ea   0e00     movlw	0                  	MOVLW	0x00
0057ec   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
0057ee   f031
0057f0   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	781; main.c	SetActivePreset(0);								
0057f2   0e00     movlw	0                  	MOVLW	0x00
0057f4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0057f6   ecc4     call	0x5d88, 0           	CALL	_SetActivePreset
0057f8   f02e
0057fa   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	785; main.c	MIOS_EEPROM_Write(0x02,eeprom_byte);
0057fc   0e00     movlw	0                  	MOVLW	0x00
0057fe   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005800   0e02     movlw	0x2                	MOVLW	0x02
005802   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
005804   f031
005806   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	789; main.c	MIOS_EEPROM_Write(0x03,eeprom_byte);
005808   0e00     movlw	0                  	MOVLW	0x00
00580a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00580c   0e03     movlw	0x3                	MOVLW	0x03
00580e   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
005810   f031
005812   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	792; main.c	MIOS_EEPROM_Write(0x04,1);	
005814   0e01     movlw	0x1                	MOVLW	0x01
005816   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005818   0e04     movlw	0x4                	MOVLW	0x04
00581a   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
00581c   f031
00581e   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	794; main.c	MIOS_EEPROM_Write(0x05,2);	
005820   0e02     movlw	0x2                	MOVLW	0x02
005822   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005824   0e05     movlw	0x5                	MOVLW	0x05
005826   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
005828   f031
00582a   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	796; main.c	MIOS_EEPROM_Write(0x06,3);	
00582c   0e03     movlw	0x3                	MOVLW	0x03
00582e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005830   0e06     movlw	0x6                	MOVLW	0x06
005832   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
005834   f031
005836   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	798; main.c	MIOS_EEPROM_Write(0x07,4);	
005838   0e04     movlw	0x4                	MOVLW	0x04
00583a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00583c   0e07     movlw	0x7                	MOVLW	0x07
00583e   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
005840   f031
005842   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	801; main.c	MIOS_EEPROM_Write(0x07,0);	
005844   0e00     movlw	0                  	MOVLW	0x00
005846   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005848   0e07     movlw	0x7                	MOVLW	0x07
00584a   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
00584c   f031
00584e   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	810; main.c	for ( i = 0x08; i<0x10; i++)
005850   0e08     movlw	0x8                	MOVLW	0x08
005852   6e11     movwf	0x11, 0            	MOVWF	r0x01
005854   6a12     clrf	0x12, 0             	CLRF	r0x02
                                           _00398_DS_:
005856   0e00     movlw	0                  	MOVLW	0x00
005858   5c12     subwf	0x12, 0, 0         	SUBWF	r0x02, W
00585a   e102     bnz	0x5860               	BNZ	_00415_DS_
00585c   0e10     movlw	0x10               	MOVLW	0x10
00585e   5c11     subwf	0x11, 0, 0         	SUBWF	r0x01, W
                                           _00415_DS_:
005860   e20c     bc	0x587a                	BC	_00401_DS_
                                           ;	.line	812; main.c	MIOS_EEPROM_Write(i,0x00);
005862   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
005864   6e13     movwf	0x13, 0            	MOVWF	r0x03
005866   0e00     movlw	0                  	MOVLW	0x00
005868   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00586a   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
00586c   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
00586e   f031
005870   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	810; main.c	for ( i = 0x08; i<0x10; i++)
005872   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
005874   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005876   2a12     incf	0x12, 0x1, 0        	INCF	r0x02, F
005878   d7ee     bra	0x5856               	BRA	_00398_DS_
                                           _00401_DS_:
                                           ;	.line	817; main.c	for ( i = 0; i<100; i++)
00587a   6a11     clrf	0x11, 0             	CLRF	r0x01
00587c   6a12     clrf	0x12, 0             	CLRF	r0x02
                                           _00402_DS_:
00587e   0e00     movlw	0                  	MOVLW	0x00
005880   5c12     subwf	0x12, 0, 0         	SUBWF	r0x02, W
005882   e102     bnz	0x5888               	BNZ	_00416_DS_
005884   0e64     movlw	0x64               	MOVLW	0x64
005886   5c11     subwf	0x11, 0, 0         	SUBWF	r0x01, W
                                           _00416_DS_:
005888   e211     bc	0x58ac                	BC	_00405_DS_
                                           ;	.line	819; main.c	error |= MIOS_EEPROM_Write(i+16,0x00);	//all off
00588a   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00588c   6e13     movwf	0x13, 0            	MOVWF	r0x03
00588e   0e10     movlw	0x10               	MOVLW	0x10
005890   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
005892   0e00     movlw	0                  	MOVLW	0x00
005894   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005896   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
005898   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
00589a   f031
00589c   6e13     movwf	0x13, 0            	MOVWF	r0x03
00589e   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
0058a0   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0058a2   1210     iorwf	0x10, 0x1, 0       	IORWF	r0x00, F
                                           ;	.line	817; main.c	for ( i = 0; i<100; i++)
0058a4   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
0058a6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0058a8   2a12     incf	0x12, 0x1, 0        	INCF	r0x02, F
0058aa   d7e9     bra	0x587e               	BRA	_00402_DS_
                                           _00405_DS_:
                                           ;	.line	821; main.c	if( error ) {
0058ac   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0058ae   e002     bz	0x58b4                	BZ	_00397_DS_
                                           ;	.line	822; main.c	return 0;
0058b0   6ae8     clrf	0xe8, 0             	CLRF	WREG
0058b2   d001     bra	0x58b6               	BRA	_00406_DS_
                                           _00397_DS_:
                                           ;	.line	824; main.c	return 1;
0058b4   0e01     movlw	0x1                	MOVLW	0x01
                                           _00406_DS_:
0058b6   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
0058b8   f013
0058ba   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
0058bc   f012
0058be   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
0058c0   f011
0058c2   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
0058c4   f010
0058c6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Preset_Down	code
                                           _Preset_Down:
                                           ;	.line	739; main.c	unsigned char Preset_Down()
006098   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
00609a   ffed
00609c   0100     movlb	0                  	BANKSEL	_CurrentPreset
                                           ;	.line	741; main.c	if ( CurrentPreset > 0 )
00609e   51a5     movf	0xa5, 0, 0x1        	MOVF	_CurrentPreset, W, B
0060a0   e008     bz	0x60b2                	BZ	_00389_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	743; main.c	LoadPreset(CurrentPreset-1);
0060a2   05a5     decf	0xa5, 0, 0x1        	DECF	_CurrentPreset, W, B
0060a4   6e10     movwf	0x10, 0            	MOVWF	r0x00
0060a6   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0060a8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0060aa   ec3c     call	0x4478, 0           	CALL	_LoadPreset
0060ac   f022
0060ae   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
0060b0   d00f     bra	0x60d0               	BRA	_00390_DS_
                                           _00389_DS_:
                                           ;	.line	748; main.c	DEBUG_MSG_SendHeader();
0060b2   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
0060b4   f02b
                                           ;	.line	749; main.c	DEBUG_MSG_SendCString("Ignored, already at lowest preset");
0060b6   0e00     movlw	0                  	MOVLW	UPPER(__str_24)
0060b8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0060ba   0e41     movlw	0x41               	MOVLW	HIGH(__str_24)
0060bc   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0060be   0e9e     movlw	0x9e               	MOVLW	LOW(__str_24)
0060c0   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
0060c2   f02b
0060c4   0e02     movlw	0x2                	MOVLW	0x02
0060c6   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	750; main.c	DEBUG_MSG_SendFooter();
0060c8   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
0060ca   f02b
                                           ;	.line	753; main.c	return 0;
0060cc   6ae8     clrf	0xe8, 0             	CLRF	WREG
0060ce   d001     bra	0x60d2               	BRA	_00391_DS_
                                           _00390_DS_:
                                           ;	.line	755; main.c	return 1;
0060d0   0e01     movlw	0x1                	MOVLW	0x01
                                           _00391_DS_:
0060d2   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
0060d4   f010
0060d6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Preset_Up	code
                                           _Preset_Up:
                                           ;	.line	718; main.c	unsigned char Preset_Up()
006016   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
006018   ffed
                                           ;	.line	720; main.c	if ( CurrentPreset < 100 )
00601a   0e64     movlw	0x64               	MOVLW	0x64
00601c   0100     movlb	0                  	BANKSEL	_CurrentPreset
00601e   5da5     subwf	0xa5, 0, 0x1       	SUBWF	_CurrentPreset, W, B
006020   e208     bc	0x6032                	BC	_00381_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	722; main.c	LoadPreset(CurrentPreset+1);
006022   29a5     incf	0xa5, 0, 0x1        	INCF	_CurrentPreset, W, B
006024   6e10     movwf	0x10, 0            	MOVWF	r0x00
006026   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
006028   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00602a   ec3c     call	0x4478, 0           	CALL	_LoadPreset
00602c   f022
00602e   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
006030   d00f     bra	0x6050               	BRA	_00382_DS_
                                           _00381_DS_:
                                           ;	.line	727; main.c	DEBUG_MSG_SendHeader();
006032   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
006034   f02b
                                           ;	.line	728; main.c	DEBUG_MSG_SendCString("Ignored, already at highest preset");
006036   0e00     movlw	0                  	MOVLW	UPPER(__str_23)
006038   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00603a   0e41     movlw	0x41               	MOVLW	HIGH(__str_23)
00603c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00603e   0e7a     movlw	0x7a               	MOVLW	LOW(__str_23)
006040   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
006042   f02b
006044   0e02     movlw	0x2                	MOVLW	0x02
006046   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	729; main.c	DEBUG_MSG_SendFooter();
006048   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
00604a   f02b
                                           ;	.line	732; main.c	return 0;
00604c   6ae8     clrf	0xe8, 0             	CLRF	WREG
00604e   d001     bra	0x6052               	BRA	_00383_DS_
                                           _00382_DS_:
                                           ;	.line	734; main.c	return 1;
006050   0e01     movlw	0x1                	MOVLW	0x01
                                           _00383_DS_:
006052   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
006054   f010
006056   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SavePreset	code
                                           _SavePreset:
                                           ;	.line	657; main.c	void SavePreset ( unsigned char preset_nb )
005524   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
005526   ffed
005528   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
00552a   ffd9
00552c   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
00552e   ffed
005530   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
005532   ffed
005534   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
005536   ffed
005538   0e02     movlw	0x2                	MOVLW	0x02
00553a   cfdb     movff	0xfdb, 0x10        	MOVFF	PLUSW2, r0x00
00553c   f010
                                           ;	.line	661; main.c	if ( preset_nb == 0 )
00553e   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
005540   e11e     bnz	0x557e               	BNZ	_00372_DS_
                                           ;	.line	665; main.c	MIOS_LCD_Clear();
005542   ec82     call	0x2d04, 0           	CALL	_MIOS_LCD_Clear
005544   f016
                                           ;	.line	666; main.c	MIOS_LCD_CursorSet(0x00);
005546   0e00     movlw	0                  	MOVLW	0x00
005548   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
00554a   f016
                                           ;	.line	667; main.c	MIOS_LCD_PrintCString("Cannot Save to");
00554c   0e00     movlw	0                  	MOVLW	UPPER(__str_19)
00554e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005550   0e41     movlw	0x41               	MOVLW	HIGH(__str_19)
005552   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005554   0e34     movlw	0x34               	MOVLW	LOW(__str_19)
005556   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
005558   f02f
00555a   0e02     movlw	0x2                	MOVLW	0x02
00555c   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	668; main.c	MIOS_LCD_CursorSet(0x40);
00555e   0e40     movlw	0x40               	MOVLW	0x40
005560   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
005562   f016
                                           ;	.line	669; main.c	MIOS_LCD_PrintCString("Preset 0");
005564   0e00     movlw	0                  	MOVLW	UPPER(__str_20)
005566   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005568   0e41     movlw	0x41               	MOVLW	HIGH(__str_20)
00556a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00556c   0e44     movlw	0x44               	MOVLW	LOW(__str_20)
00556e   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
005570   f02f
005572   0e02     movlw	0x2                	MOVLW	0x02
005574   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	670; main.c	MIOS_LCD_MessageStart(255);
005576   0eff     movlw	0xff               	MOVLW	0xff
005578   ecfa     call	0x2df4, 0           	CALL	_MIOS_LCD_MessageStart
00557a   f016
                                           ;	.line	671; main.c	return;
00557c   d074     bra	0x5666               	BRA	_00375_DS_
                                           _00372_DS_:
                                           ;	.line	674; main.c	if ( preset_nb > 0x69 )
00557e   0e6a     movlw	0x6a               	MOVLW	0x6a
005580   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
005582   e311     bnc	0x55a6               	BNC	_00374_DS_
                                           ;	.line	677; main.c	DEBUG_MSG_SendHeader();
005584   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
005586   f02b
                                           ;	.line	678; main.c	DEBUG_MSG_SendCString("Discarded saving preset ");
005588   0e00     movlw	0                  	MOVLW	UPPER(__str_21)
00558a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00558c   0e41     movlw	0x41               	MOVLW	HIGH(__str_21)
00558e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005590   0e4e     movlw	0x4e               	MOVLW	LOW(__str_21)
005592   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
005594   f02b
005596   0e02     movlw	0x2                	MOVLW	0x02
005598   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	679; main.c	DEBUG_MSG_SendBCD3(preset_nb);
00559a   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00559c   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
00559e   f02b
                                           ;	.line	680; main.c	DEBUG_MSG_SendFooter();
0055a0   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
0055a2   f02b
                                           ;	.line	682; main.c	return; 
0055a4   d060     bra	0x5666               	BRA	_00375_DS_
                                           _00374_DS_:
0055a6   0100     movlb	0                  	BANKSEL	_CurrentPreset
                                           ;	.line	686; main.c	MIOS_EEPROM_Write(0x01,CurrentPreset);
0055a8   51a5     movf	0xa5, 0, 0x1        	MOVF	_CurrentPreset, W, B
0055aa   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0055ac   0e01     movlw	0x1                	MOVLW	0x01
0055ae   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
0055b0   f031
0055b2   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	692; main.c	eeprom_byte = RelayState[0];
0055b4   c088     movff	0x88, 0x11         	MOVFF	_RelayState, r0x01
0055b6   f011
0055b8   0100     movlb	0                  	BANKSEL	(_RelayState + 1)
                                           ;	.line	693; main.c	eeprom_byte = eeprom_byte | RelayState[1]<<1;
0055ba   4589     rlncf	0x89, 0, 0x1       	RLNCF	(_RelayState + 1), W, B
0055bc   0bfe     andlw	0xfe               	ANDLW	0xfe
0055be   6e12     movwf	0x12, 0            	MOVWF	r0x02
0055c0   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0055c2   1211     iorwf	0x11, 0x1, 0       	IORWF	r0x01, F
                                           ; removed redundant BANKSEL
                                           ;	.line	694; main.c	eeprom_byte = eeprom_byte | RelayState[2]<<2;
0055c4   458a     rlncf	0x8a, 0, 0x1       	RLNCF	(_RelayState + 2), W, B
0055c6   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0055c8   0bfc     andlw	0xfc               	ANDLW	0xfc
0055ca   6e12     movwf	0x12, 0            	MOVWF	r0x02
0055cc   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0055ce   1211     iorwf	0x11, 0x1, 0       	IORWF	r0x01, F
                                           ; removed redundant BANKSEL
                                           ;	.line	695; main.c	eeprom_byte = eeprom_byte | RelayState[3]<<3;
0055d0   398b     swapf	0x8b, 0, 0x1       	SWAPF	(_RelayState + 3), W, B
0055d2   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0055d4   0bf8     andlw	0xf8               	ANDLW	0xf8
0055d6   6e12     movwf	0x12, 0            	MOVWF	r0x02
0055d8   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0055da   1211     iorwf	0x11, 0x1, 0       	IORWF	r0x01, F
                                           ; removed redundant BANKSEL
                                           ;	.line	696; main.c	eeprom_byte = eeprom_byte | RelayState[4]<<4;
0055dc   398c     swapf	0x8c, 0, 0x1       	SWAPF	(_RelayState + 4), W, B
0055de   0bf0     andlw	0xf0               	ANDLW	0xf0
0055e0   6e12     movwf	0x12, 0            	MOVWF	r0x02
0055e2   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0055e4   1211     iorwf	0x11, 0x1, 0       	IORWF	r0x01, F
                                           ; removed redundant BANKSEL
                                           ;	.line	697; main.c	eeprom_byte = eeprom_byte | RelayState[5]<<5;
0055e6   398d     swapf	0x8d, 0, 0x1       	SWAPF	(_RelayState + 5), W, B
0055e8   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0055ea   0be0     andlw	0xe0               	ANDLW	0xe0
0055ec   6e12     movwf	0x12, 0            	MOVWF	r0x02
0055ee   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0055f0   1211     iorwf	0x11, 0x1, 0       	IORWF	r0x01, F
                                           ; removed redundant BANKSEL
                                           ;	.line	698; main.c	eeprom_byte = eeprom_byte | RelayState[6]<<6;
0055f2   418e     rrncf	0x8e, 0, 0x1       	RRNCF	(_RelayState + 6), W, B
0055f4   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0055f6   0bc0     andlw	0xc0               	ANDLW	0xc0
0055f8   6e12     movwf	0x12, 0            	MOVWF	r0x02
0055fa   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0055fc   1211     iorwf	0x11, 0x1, 0       	IORWF	r0x01, F
                                           ; removed redundant BANKSEL
                                           ;	.line	699; main.c	eeprom_byte = eeprom_byte | RelayState[7]<<7;
0055fe   418f     rrncf	0x8f, 0, 0x1       	RRNCF	(_RelayState + 7), W, B
005600   0b80     andlw	0x80               	ANDLW	0x80
005602   6e12     movwf	0x12, 0            	MOVWF	r0x02
005604   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
005606   1211     iorwf	0x11, 0x1, 0       	IORWF	r0x01, F
                                           ;	.line	700; main.c	MIOS_EEPROM_Write(preset_nb+0x10,eeprom_byte);	
005608   0e10     movlw	0x10               	MOVLW	0x10
00560a   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
00560c   6e12     movwf	0x12, 0            	MOVWF	r0x02
00560e   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
005610   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005612   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
005614   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
005616   f031
005618   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	703; main.c	CurrentPreset = preset_nb;
00561a   c010     movff	0x10, 0xa5         	MOVFF	r0x00, _CurrentPreset
00561c   f0a5
                                           ;	.line	706; main.c	MIOS_LCD_Clear();
00561e   ec82     call	0x2d04, 0           	CALL	_MIOS_LCD_Clear
005620   f016
                                           ;	.line	707; main.c	MIOS_LCD_CursorSet(0x00 + 0);
005622   0e00     movlw	0                  	MOVLW	0x00
005624   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
005626   f016
                                           ;	.line	708; main.c	MIOS_LCD_PrintCString("**  SAVED to  **");
005628   0e00     movlw	0                  	MOVLW	UPPER(__str_22)
00562a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00562c   0e41     movlw	0x41               	MOVLW	HIGH(__str_22)
00562e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005630   0e68     movlw	0x68               	MOVLW	LOW(__str_22)
005632   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
005634   f02f
005636   0e02     movlw	0x2                	MOVLW	0x02
005638   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	709; main.c	MIOS_LCD_CursorSet(0x40 + 0);
00563a   0e40     movlw	0x40               	MOVLW	0x40
00563c   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
00563e   f016
                                           ;	.line	710; main.c	MIOS_LCD_PrintCString("** Preset     **");
005640   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
005642   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005644   0e40     movlw	0x40               	MOVLW	HIGH(__str_7)
005646   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005648   0e3e     movlw	0x3e               	MOVLW	LOW(__str_7)
00564a   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
00564c   f02f
00564e   0e02     movlw	0x2                	MOVLW	0x02
005650   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	711; main.c	MIOS_LCD_CursorSet(0x40 + 10);
005652   0e4a     movlw	0x4a               	MOVLW	0x4a
005654   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
005656   f016
005658   0100     movlb	0                  	BANKSEL	_CurrentPreset
                                           ;	.line	712; main.c	MIOS_LCD_PrintBCD3(CurrentPreset);
00565a   51a5     movf	0xa5, 0, 0x1        	MOVF	_CurrentPreset, W, B
00565c   ec92     call	0x2d24, 0           	CALL	_MIOS_LCD_PrintBCD3
00565e   f016
                                           ;	.line	713; main.c	MIOS_LCD_MessageStart(100);
005660   0e64     movlw	0x64               	MOVLW	0x64
005662   ecfa     call	0x2df4, 0           	CALL	_MIOS_LCD_MessageStart
005664   f016
                                           _00375_DS_:
005666   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
005668   f012
00566a   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
00566c   f011
00566e   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
005670   f010
005672   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
005674   ffd9
005676   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__LoadPreset	code
                                           _LoadPreset:
                                           ;	.line	502; main.c	void LoadPreset ( unsigned char preset_nb )
004478   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
00447a   ffed
00447c   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
00447e   ffd9
004480   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
004482   ffed
004484   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
004486   ffed
004488   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
00448a   ffed
00448c   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
00448e   ffed
004490   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
004492   ffed
004494   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
004496   ffed
004498   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
00449a   ffed
00449c   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
00449e   ffed
0044a0   c018     movff	0x18, 0xfed        	MOVFF	r0x08, POSTDEC1
0044a2   ffed
0044a4   c019     movff	0x19, 0xfed        	MOVFF	r0x09, POSTDEC1
0044a6   ffed
0044a8   0e02     movlw	0x2                	MOVLW	0x02
0044aa   cfdb     movff	0xfdb, 0x10        	MOVFF	PLUSW2, r0x00
0044ac   f010
                                           ;	.line	505; main.c	unsigned int ActiveRadioFound = 0;
0044ae   6a11     clrf	0x11, 0             	CLRF	r0x01
0044b0   6a12     clrf	0x12, 0             	CLRF	r0x02
0044b2   0100     movlb	0                  	BANKSEL	_CurrentPreset
                                           ;	.line	510; main.c	if ( CurrentPreset == preset_nb )
0044b4   51a5     movf	0xa5, 0, 0x1        	MOVF	_CurrentPreset, W, B
0044b6   1810     xorwf	0x10, 0, 0         	XORWF	r0x00, W
0044b8   e11f     bnz	0x44f8               	BNZ	_00285_DS_
                                           _00342_DS_:
0044ba   0100     movlb	0                  	BANKSEL	_ReloadActivePreset
                                           ;	.line	512; main.c	if(ReloadActivePreset)
0044bc   51a7     movf	0xa7, 0, 0x1        	MOVF	_ReloadActivePreset, W, B
0044be   e00e     bz	0x44dc                	BZ	_00282_DS_
                                           ;	.line	515; main.c	DEBUG_MSG_SendHeader();
0044c0   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
0044c2   f02b
                                           ;	.line	516; main.c	DEBUG_MSG_SendCString("ReLoading active preset");
0044c4   0e00     movlw	0                  	MOVLW	UPPER(__str_11)
0044c6   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0044c8   0e40     movlw	0x40               	MOVLW	HIGH(__str_11)
0044ca   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0044cc   0e7a     movlw	0x7a               	MOVLW	LOW(__str_11)
0044ce   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
0044d0   f02b
0044d2   0e02     movlw	0x2                	MOVLW	0x02
0044d4   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	517; main.c	DEBUG_MSG_SendFooter();
0044d6   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
0044d8   f02b
0044da   d01e     bra	0x4518               	BRA	_00286_DS_
                                           _00282_DS_:
                                           ;	.line	524; main.c	DEBUG_MSG_SendHeader();
0044dc   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
0044de   f02b
                                           ;	.line	525; main.c	DEBUG_MSG_SendCString("NOT ReLoading active preset");
0044e0   0e00     movlw	0                  	MOVLW	UPPER(__str_12)
0044e2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0044e4   0e40     movlw	0x40               	MOVLW	HIGH(__str_12)
0044e6   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0044e8   0e92     movlw	0x92               	MOVLW	LOW(__str_12)
0044ea   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
0044ec   f02b
0044ee   0e02     movlw	0x2                	MOVLW	0x02
0044f0   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	526; main.c	DEBUG_MSG_SendFooter();
0044f2   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
0044f4   f02b
                                           ;	.line	529; main.c	return;
0044f6   d1e9     bra	0x48ca               	BRA	_00318_DS_
                                           _00285_DS_:
                                           ;	.line	535; main.c	DEBUG_MSG_SendHeader();
0044f8   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
0044fa   f02b
                                           ;	.line	536; main.c	DEBUG_MSG_SendCString("Loading preset ");
0044fc   0e00     movlw	0                  	MOVLW	UPPER(__str_13)
0044fe   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004500   0e40     movlw	0x40               	MOVLW	HIGH(__str_13)
004502   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004504   0eae     movlw	0xae               	MOVLW	LOW(__str_13)
004506   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004508   f02b
00450a   0e02     movlw	0x2                	MOVLW	0x02
00450c   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	537; main.c	DEBUG_MSG_SendBCD3(preset_nb);
00450e   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004510   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004512   f02b
                                           ;	.line	538; main.c	DEBUG_MSG_SendFooter();
004514   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
004516   f02b
                                           _00286_DS_:
                                           ;	.line	546; main.c	if ( preset_nb > 0x69 )
004518   0e6a     movlw	0x6a               	MOVLW	0x6a
00451a   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
00451c   e311     bnc	0x4540               	BNC	_00288_DS_
                                           ;	.line	549; main.c	DEBUG_MSG_SendHeader();
00451e   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
004520   f02b
                                           ;	.line	550; main.c	DEBUG_MSG_SendCString("Discarded loading preset ");
004522   0e00     movlw	0                  	MOVLW	UPPER(__str_14)
004524   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004526   0e40     movlw	0x40               	MOVLW	HIGH(__str_14)
004528   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00452a   0ebe     movlw	0xbe               	MOVLW	LOW(__str_14)
00452c   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
00452e   f02b
004530   0e02     movlw	0x2                	MOVLW	0x02
004532   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	551; main.c	DEBUG_MSG_SendBCD3(preset_nb);
004534   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004536   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004538   f02b
                                           ;	.line	552; main.c	DEBUG_MSG_SendFooter();
00453a   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
00453c   f02b
                                           ;	.line	554; main.c	return; 
00453e   d1c5     bra	0x48ca               	BRA	_00318_DS_
                                           _00288_DS_:
                                           ;	.line	557; main.c	eeprom_byte = MIOS_EEPROM_Read(preset_nb+0x10);
004540   0e10     movlw	0x10               	MOVLW	0x10
004542   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004544   6e13     movwf	0x13, 0            	MOVWF	r0x03
004546   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004548   ec9a     call	0x6334, 0           	CALL	_MIOS_EEPROM_Read
00454a   f031
00454c   6e13     movwf	0x13, 0            	MOVWF	r0x03
                                           ;	.line	558; main.c	TargetRelayState[0] = eeprom_byte & 0x01;
00454e   0e01     movlw	0x1                	MOVLW	0x01
004550   1413     andwf	0x13, 0, 0         	ANDWF	r0x03, W
004552   6e14     movwf	0x14, 0            	MOVWF	r0x04
004554   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
004556   0100     movlb	0                  	BANKSEL	_LoadPreset_TargetRelayState_1_1
004558   6f98     movwf	0x98, 0x1          	MOVWF	_LoadPreset_TargetRelayState_1_1, B
                                           ;	.line	559; main.c	TargetRelayState[1] = (eeprom_byte & 0x02)>>1;
00455a   0e02     movlw	0x2                	MOVLW	0x02
00455c   1413     andwf	0x13, 0, 0         	ANDWF	r0x03, W
00455e   6e14     movwf	0x14, 0            	MOVWF	r0x04
004560   4014     rrncf	0x14, 0, 0         	RRNCF	r0x04, W
004562   0b7f     andlw	0x7f               	ANDLW	0x7f
004564   6e14     movwf	0x14, 0            	MOVWF	r0x04
004566   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
                                           ; removed redundant BANKSEL
004568   6f99     movwf	0x99, 0x1          	MOVWF	(_LoadPreset_TargetRelayState_1_1 + 1), B
                                           ;	.line	560; main.c	TargetRelayState[2] = (eeprom_byte & 0x04)>>2;
00456a   0e04     movlw	0x4                	MOVLW	0x04
00456c   1413     andwf	0x13, 0, 0         	ANDWF	r0x03, W
00456e   6e14     movwf	0x14, 0            	MOVWF	r0x04
004570   4014     rrncf	0x14, 0, 0         	RRNCF	r0x04, W
004572   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
004574   0b3f     andlw	0x3f               	ANDLW	0x3f
004576   6e14     movwf	0x14, 0            	MOVWF	r0x04
004578   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
                                           ; removed redundant BANKSEL
00457a   6f9a     movwf	0x9a, 0x1          	MOVWF	(_LoadPreset_TargetRelayState_1_1 + 2), B
                                           ;	.line	561; main.c	TargetRelayState[3] = (eeprom_byte & 0x08)>>3;
00457c   0e08     movlw	0x8                	MOVLW	0x08
00457e   1413     andwf	0x13, 0, 0         	ANDWF	r0x03, W
004580   6e14     movwf	0x14, 0            	MOVWF	r0x04
004582   3814     swapf	0x14, 0, 0         	SWAPF	r0x04, W
004584   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
004586   0b1f     andlw	0x1f               	ANDLW	0x1f
004588   6e14     movwf	0x14, 0            	MOVWF	r0x04
00458a   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
                                           ; removed redundant BANKSEL
00458c   6f9b     movwf	0x9b, 0x1          	MOVWF	(_LoadPreset_TargetRelayState_1_1 + 3), B
                                           ;	.line	562; main.c	TargetRelayState[4] = (eeprom_byte & 0x10)>>4;
00458e   0e10     movlw	0x10               	MOVLW	0x10
004590   1413     andwf	0x13, 0, 0         	ANDWF	r0x03, W
004592   6e14     movwf	0x14, 0            	MOVWF	r0x04
004594   3814     swapf	0x14, 0, 0         	SWAPF	r0x04, W
004596   0b0f     andlw	0xf                	ANDLW	0x0f
004598   6e14     movwf	0x14, 0            	MOVWF	r0x04
00459a   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
                                           ; removed redundant BANKSEL
00459c   6f9c     movwf	0x9c, 0x1          	MOVWF	(_LoadPreset_TargetRelayState_1_1 + 4), B
                                           ;	.line	563; main.c	TargetRelayState[5] = (eeprom_byte & 0x20)>>5;
00459e   0e20     movlw	0x20               	MOVLW	0x20
0045a0   1413     andwf	0x13, 0, 0         	ANDWF	r0x03, W
0045a2   6e14     movwf	0x14, 0            	MOVWF	r0x04
0045a4   3814     swapf	0x14, 0, 0         	SWAPF	r0x04, W
0045a6   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0045a8   0b07     andlw	0x7                	ANDLW	0x07
0045aa   6e14     movwf	0x14, 0            	MOVWF	r0x04
0045ac   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
                                           ; removed redundant BANKSEL
0045ae   6f9d     movwf	0x9d, 0x1          	MOVWF	(_LoadPreset_TargetRelayState_1_1 + 5), B
                                           ;	.line	564; main.c	TargetRelayState[6] = (eeprom_byte & 0x40)>>6;
0045b0   0e40     movlw	0x40               	MOVLW	0x40
0045b2   1413     andwf	0x13, 0, 0         	ANDWF	r0x03, W
0045b4   6e14     movwf	0x14, 0            	MOVWF	r0x04
0045b6   4414     rlncf	0x14, 0, 0         	RLNCF	r0x04, W
0045b8   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0045ba   0b03     andlw	0x3                	ANDLW	0x03
0045bc   6e14     movwf	0x14, 0            	MOVWF	r0x04
0045be   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
                                           ; removed redundant BANKSEL
0045c0   6f9e     movwf	0x9e, 0x1          	MOVWF	(_LoadPreset_TargetRelayState_1_1 + 6), B
                                           ;	.line	565; main.c	TargetRelayState[7] = (eeprom_byte & 0x80)>>7;
0045c2   0e80     movlw	0x80               	MOVLW	0x80
0045c4   1413     andwf	0x13, 0, 0         	ANDWF	r0x03, W
0045c6   6e14     movwf	0x14, 0            	MOVWF	r0x04
0045c8   4414     rlncf	0x14, 0, 0         	RLNCF	r0x04, W
0045ca   0b01     andlw	0x1                	ANDLW	0x01
0045cc   6e14     movwf	0x14, 0            	MOVWF	r0x04
0045ce   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
                                           ; removed redundant BANKSEL
0045d0   6f9f     movwf	0x9f, 0x1          	MOVWF	(_LoadPreset_TargetRelayState_1_1 + 7), B
                                           ;	.line	568; main.c	DEBUG_MSG_SendHeader();
0045d2   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
0045d4   f02b
                                           ;	.line	569; main.c	DEBUG_MSG_SendCString("Relays state byte : ");
0045d6   0e00     movlw	0                  	MOVLW	UPPER(__str_15)
0045d8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0045da   0e40     movlw	0x40               	MOVLW	HIGH(__str_15)
0045dc   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0045de   0ed8     movlw	0xd8               	MOVLW	LOW(__str_15)
0045e0   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
0045e2   f02b
0045e4   0e02     movlw	0x2                	MOVLW	0x02
0045e6   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	570; main.c	DEBUG_MSG_SendBCD3(eeprom_byte);
0045e8   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0045ea   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
0045ec   f02b
                                           ;	.line	571; main.c	DEBUG_MSG_SendFooter();
0045ee   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
0045f0   f02b
                                           ;	.line	576; main.c	DEBUG_MSG_SendHeader();
0045f2   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
0045f4   f02b
                                           ;	.line	577; main.c	DEBUG_MSG_SendCString("Send midi ?");
0045f6   0e00     movlw	0                  	MOVLW	UPPER(__str_16)
0045f8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0045fa   0e40     movlw	0x40               	MOVLW	HIGH(__str_16)
0045fc   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0045fe   0eee     movlw	0xee               	MOVLW	LOW(__str_16)
004600   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004602   f02b
004604   0e02     movlw	0x2                	MOVLW	0x02
004606   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
004608   0100     movlb	0                  	BANKSEL	_SendMidiOnButtonChange
                                           ;	.line	578; main.c	DEBUG_MSG_SendBCD1(SendMidiOnButtonChange);
00460a   51a6     movf	0xa6, 0, 0x1        	MOVF	_SendMidiOnButtonChange, W, B
00460c   ec79     call	0x56f2, 0           	CALL	_DEBUG_MSG_SendBCD1
00460e   f02b
                                           ;	.line	579; main.c	DEBUG_MSG_SendFooter();
004610   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
004612   f02b
004614   0100     movlb	0                  	BANKSEL	_SendMidiOnButtonChange
                                           ;	.line	581; main.c	if (SendMidiOnButtonChange)
004616   51a6     movf	0xa6, 0, 0x1        	MOVF	_SendMidiOnButtonChange, W, B
004618   e027     bz	0x4668                	BZ	_00329_DS_
                                           ;	.line	583; main.c	MIOS_MIDI_BeginStream();
00461a   ec00     call	0x2c00, 0           	CALL	_MIOS_MIDI_BeginStream
00461c   f016
                                           ;	.line	585; main.c	MIOS_MIDI_TxBufferPut((0xC0)+MidiChannel-1);
00461e   0ebf     movlw	0xbf               	MOVLW	0xbf
004620   0100     movlb	0                  	BANKSEL	_MidiChannel
004622   25a4     addwf	0xa4, 0, 0x1       	ADDWF	_MidiChannel, W, B
004624   6e13     movwf	0x13, 0            	MOVWF	r0x03
004626   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004628   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
00462a   f016
                                           ;	.line	586; main.c	MIOS_MIDI_TxBufferPut(preset_nb-1); //PC
00462c   0410     decf	0x10, 0, 0          	DECF	r0x00, W
00462e   6e13     movwf	0x13, 0            	MOVWF	r0x03
004630   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004632   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
004634   f016
                                           ;	.line	587; main.c	MIOS_MIDI_EndStream();
004636   ec08     call	0x2c10, 0           	CALL	_MIOS_MIDI_EndStream
004638   f016
                                           ;	.line	589; main.c	DEBUG_MSG_SendHeader();
00463a   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
00463c   f02b
                                           ;	.line	590; main.c	DEBUG_MSG_SendCString(" midi message :");
00463e   0e00     movlw	0                  	MOVLW	UPPER(__str_17)
004640   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004642   0e40     movlw	0x40               	MOVLW	HIGH(__str_17)
004644   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004646   0efa     movlw	0xfa               	MOVLW	LOW(__str_17)
004648   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
00464a   f02b
00464c   0e02     movlw	0x2                	MOVLW	0x02
00464e   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	591; main.c	DEBUG_MSG_SendBCD3((0xC0)+MidiChannel-1);
004650   0ebf     movlw	0xbf               	MOVLW	0xbf
004652   0100     movlb	0                  	BANKSEL	_MidiChannel
004654   25a4     addwf	0xa4, 0, 0x1       	ADDWF	_MidiChannel, W, B
004656   6e14     movwf	0x14, 0            	MOVWF	r0x04
004658   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
00465a   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
00465c   f02b
                                           ;	.line	592; main.c	DEBUG_MSG_SendBCD3(preset_nb-1);
00465e   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004660   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004662   f02b
                                           ;	.line	593; main.c	DEBUG_MSG_SendFooter();
004664   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
004666   f02b
                                           _00329_DS_:
                                           ;	.line	598; main.c	for ( i=0; i<MAX_RELAYS_NB; i++)
004668   6a13     clrf	0x13, 0             	CLRF	r0x03
00466a   6a14     clrf	0x14, 0             	CLRF	r0x04
                                           _00306_DS_:
00466c   0e00     movlw	0                  	MOVLW	0x00
00466e   5c14     subwf	0x14, 0, 0         	SUBWF	r0x04, W
004670   e102     bnz	0x4676               	BNZ	_00352_DS_
004672   0e08     movlw	0x8                	MOVLW	0x08
004674   5c13     subwf	0x13, 0, 0         	SUBWF	r0x03, W
                                           _00352_DS_:
004676   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004678   d0cb     bra	0x4810               	BRA	_00309_DS_
                                           ;	.line	601; main.c	if ( RelayMode[i] == Free )
00467a   0e90     movlw	0x90               	MOVLW	LOW(_RelayMode)
00467c   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
00467e   6e15     movwf	0x15, 0            	MOVWF	r0x05
004680   0e00     movlw	0                  	MOVLW	HIGH(_RelayMode)
004682   2014     addwfc	0x14, 0, 0        	ADDWFC	r0x04, W
004684   6e16     movwf	0x16, 0            	MOVWF	r0x06
004686   c015     movff	0x15, 0xfe1        	MOVFF	r0x05, FSR0L
004688   ffe1
00468a   c016     movff	0x16, 0xfe2        	MOVFF	r0x06, FSR0H
00468c   ffe2
00468e   cfe7     movff	0xfe7, 0x15        	MOVFF	INDF0, r0x05
004690   f015
004692   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
004694   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
004696   d054     bra	0x4740               	BRA	_00292_DS_
                                           ;	.line	603; main.c	MIOS_DOUT_PinSet(RelayPin[i],TargetRelayState[i]);		
004698   0ec2     movlw	0xc2               	MOVLW	LOW(_RelayPin)
00469a   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
00469c   6e15     movwf	0x15, 0            	MOVWF	r0x05
00469e   0e3f     movlw	0x3f               	MOVLW	HIGH(_RelayPin)
0046a0   2014     addwfc	0x14, 0, 0        	ADDWFC	r0x04, W
0046a2   6e16     movwf	0x16, 0            	MOVWF	r0x06
0046a4   6a17     clrf	0x17, 0             	CLRF	r0x07
0046a6   0e00     movlw	0                  	MOVLW	UPPER(_RelayPin)
0046a8   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
0046aa   c015     movff	0x15, 0xff6        	MOVFF	r0x05, TBLPTRL
0046ac   fff6
0046ae   c016     movff	0x16, 0xff7        	MOVFF	r0x06, TBLPTRH
0046b0   fff7
0046b2   c017     movff	0x17, 0xff8        	MOVFF	r0x07, TBLPTRU
0046b4   fff8
0046b6   0009     tblrd	*+                 	TBLRD*+	
0046b8   cff5     movff	0xff5, 0x15        	MOVFF	TABLAT, r0x05
0046ba   f015
0046bc   0e98     movlw	0x98               	MOVLW	LOW(_LoadPreset_TargetRelayState_1_1)
0046be   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
0046c0   6e16     movwf	0x16, 0            	MOVWF	r0x06
0046c2   0e00     movlw	0                  	MOVLW	HIGH(_LoadPreset_TargetRelayState_1_1)
0046c4   2014     addwfc	0x14, 0, 0        	ADDWFC	r0x04, W
0046c6   6e17     movwf	0x17, 0            	MOVWF	r0x07
0046c8   c016     movff	0x16, 0xfe1        	MOVFF	r0x06, FSR0L
0046ca   ffe1
0046cc   c017     movff	0x17, 0xfe2        	MOVFF	r0x07, FSR0H
0046ce   ffe2
0046d0   cfe7     movff	0xfe7, 0x18        	MOVFF	INDF0, r0x08
0046d2   f018
0046d4   5018     movf	0x18, 0, 0          	MOVF	r0x08, W
0046d6   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0046d8   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
0046da   ec59     call	0x62b2, 0           	CALL	_MIOS_DOUT_PinSet
0046dc   f031
0046de   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	604; main.c	MIOS_DOUT_PinSet(RelayLedPin[i],TargetRelayState[i]);
0046e0   0eba     movlw	0xba               	MOVLW	LOW(_RelayLedPin)
0046e2   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
0046e4   6e15     movwf	0x15, 0            	MOVWF	r0x05
0046e6   0e3f     movlw	0x3f               	MOVLW	HIGH(_RelayLedPin)
0046e8   2014     addwfc	0x14, 0, 0        	ADDWFC	r0x04, W
0046ea   6e18     movwf	0x18, 0            	MOVWF	r0x08
0046ec   6a19     clrf	0x19, 0             	CLRF	r0x09
0046ee   0e00     movlw	0                  	MOVLW	UPPER(_RelayLedPin)
0046f0   2219     addwfc	0x19, 0x1, 0      	ADDWFC	r0x09, F
0046f2   c015     movff	0x15, 0xff6        	MOVFF	r0x05, TBLPTRL
0046f4   fff6
0046f6   c018     movff	0x18, 0xff7        	MOVFF	r0x08, TBLPTRH
0046f8   fff7
0046fa   c019     movff	0x19, 0xff8        	MOVFF	r0x09, TBLPTRU
0046fc   fff8
0046fe   0009     tblrd	*+                 	TBLRD*+	
004700   cff5     movff	0xff5, 0x15        	MOVFF	TABLAT, r0x05
004702   f015
004704   c016     movff	0x16, 0xfe1        	MOVFF	r0x06, FSR0L
004706   ffe1
004708   c017     movff	0x17, 0xfe2        	MOVFF	r0x07, FSR0H
00470a   ffe2
00470c   cfe7     movff	0xfe7, 0x18        	MOVFF	INDF0, r0x08
00470e   f018
004710   5018     movf	0x18, 0, 0          	MOVF	r0x08, W
004712   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004714   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
004716   ec59     call	0x62b2, 0           	CALL	_MIOS_DOUT_PinSet
004718   f031
00471a   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	606; main.c	RelayState[i] = TargetRelayState[i];	
00471c   0e88     movlw	0x88               	MOVLW	LOW(_RelayState)
00471e   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
004720   6e15     movwf	0x15, 0            	MOVWF	r0x05
004722   0e00     movlw	0                  	MOVLW	HIGH(_RelayState)
004724   2014     addwfc	0x14, 0, 0        	ADDWFC	r0x04, W
004726   6e18     movwf	0x18, 0            	MOVWF	r0x08
004728   c016     movff	0x16, 0xfe1        	MOVFF	r0x06, FSR0L
00472a   ffe1
00472c   c017     movff	0x17, 0xfe2        	MOVFF	r0x07, FSR0H
00472e   ffe2
004730   cfe7     movff	0xfe7, 0x16        	MOVFF	INDF0, r0x06
004732   f016
004734   c015     movff	0x15, 0xfe1        	MOVFF	r0x05, FSR0L
004736   ffe1
004738   c018     movff	0x18, 0xfe2        	MOVFF	r0x08, FSR0H
00473a   ffe2
00473c   c016     movff	0x16, 0xfe7        	MOVFF	r0x06, INDF0
00473e   ffe7
                                           _00292_DS_:
                                           ;	.line	609; main.c	if (( RelayMode[i] == Radio ) && (TargetRelayState[i] == Active))
004740   0e90     movlw	0x90               	MOVLW	LOW(_RelayMode)
004742   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
004744   6e15     movwf	0x15, 0            	MOVWF	r0x05
004746   0e00     movlw	0                  	MOVLW	HIGH(_RelayMode)
004748   2014     addwfc	0x14, 0, 0        	ADDWFC	r0x04, W
00474a   6e16     movwf	0x16, 0            	MOVWF	r0x06
00474c   c015     movff	0x15, 0xfe1        	MOVFF	r0x05, FSR0L
00474e   ffe1
004750   c016     movff	0x16, 0xfe2        	MOVFF	r0x06, FSR0H
004752   ffe2
004754   cfe7     movff	0xfe7, 0x15        	MOVFF	INDF0, r0x05
004756   f015
004758   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
00475a   0a01     xorlw	0x1                	XORLW	0x01
00475c   e001     bz	0x4760                	BZ	_00354_DS_
00475e   d054     bra	0x4808               	BRA	_00308_DS_
                                           _00354_DS_:
004760   0e98     movlw	0x98               	MOVLW	LOW(_LoadPreset_TargetRelayState_1_1)
004762   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
004764   6e15     movwf	0x15, 0            	MOVWF	r0x05
004766   0e00     movlw	0                  	MOVLW	HIGH(_LoadPreset_TargetRelayState_1_1)
004768   2014     addwfc	0x14, 0, 0        	ADDWFC	r0x04, W
00476a   6e16     movwf	0x16, 0            	MOVWF	r0x06
00476c   c015     movff	0x15, 0xfe1        	MOVFF	r0x05, FSR0L
00476e   ffe1
004770   c016     movff	0x16, 0xfe2        	MOVFF	r0x06, FSR0H
004772   ffe2
004774   cfe7     movff	0xfe7, 0x15        	MOVFF	INDF0, r0x05
004776   f015
004778   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
00477a   0a01     xorlw	0x1                	XORLW	0x01
00477c   e001     bz	0x4780                	BZ	_00356_DS_
00477e   d044     bra	0x4808               	BRA	_00308_DS_
                                           _00356_DS_:
                                           ;	.line	611; main.c	ActiveRadioFound = 1;
004780   0e01     movlw	0x1                	MOVLW	0x01
004782   6e11     movwf	0x11, 0            	MOVWF	r0x01
004784   6a12     clrf	0x12, 0             	CLRF	r0x02
                                           ;	.line	612; main.c	if (RelayState[i] == Active)
004786   0e88     movlw	0x88               	MOVLW	LOW(_RelayState)
004788   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
00478a   6e15     movwf	0x15, 0            	MOVWF	r0x05
00478c   0e00     movlw	0                  	MOVLW	HIGH(_RelayState)
00478e   2014     addwfc	0x14, 0, 0        	ADDWFC	r0x04, W
004790   6e16     movwf	0x16, 0            	MOVWF	r0x06
004792   c015     movff	0x15, 0xfe1        	MOVFF	r0x05, FSR0L
004794   ffe1
004796   c016     movff	0x16, 0xfe2        	MOVFF	r0x06, FSR0H
004798   ffe2
00479a   cfe7     movff	0xfe7, 0x15        	MOVFF	INDF0, r0x05
00479c   f015
00479e   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
0047a0   0a01     xorlw	0x1                	XORLW	0x01
0047a2   e12b     bnz	0x47fa               	BNZ	_00294_DS_
                                           ;	.line	615; main.c	DEBUG_MSG_SendHeader();
0047a4   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
0047a6   f02b
                                           ;	.line	616; main.c	DEBUG_MSG_SendCString("Don't push an already active radio relay");
0047a8   0e00     movlw	0                  	MOVLW	UPPER(__str_18)
0047aa   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0047ac   0e41     movlw	0x41               	MOVLW	HIGH(__str_18)
0047ae   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0047b0   0e0a     movlw	0xa                	MOVLW	LOW(__str_18)
0047b2   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
0047b4   f02b
0047b6   0e02     movlw	0x2                	MOVLW	0x02
0047b8   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	617; main.c	DEBUG_MSG_SendBCD3(i);
0047ba   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0047bc   6e15     movwf	0x15, 0            	MOVWF	r0x05
0047be   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
0047c0   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
0047c2   f02b
                                           ;	.line	618; main.c	DEBUG_MSG_SendFooter();
0047c4   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
0047c6   f02b
                                           ;	.line	621; main.c	MIOS_DOUT_PinSet(RelayLedPin[i],Active);
0047c8   0eba     movlw	0xba               	MOVLW	LOW(_RelayLedPin)
0047ca   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
0047cc   6e15     movwf	0x15, 0            	MOVWF	r0x05
0047ce   0e3f     movlw	0x3f               	MOVLW	HIGH(_RelayLedPin)
0047d0   2014     addwfc	0x14, 0, 0        	ADDWFC	r0x04, W
0047d2   6e16     movwf	0x16, 0            	MOVWF	r0x06
0047d4   6a17     clrf	0x17, 0             	CLRF	r0x07
0047d6   0e00     movlw	0                  	MOVLW	UPPER(_RelayLedPin)
0047d8   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
0047da   c015     movff	0x15, 0xff6        	MOVFF	r0x05, TBLPTRL
0047dc   fff6
0047de   c016     movff	0x16, 0xff7        	MOVFF	r0x06, TBLPTRH
0047e0   fff7
0047e2   c017     movff	0x17, 0xff8        	MOVFF	r0x07, TBLPTRU
0047e4   fff8
0047e6   0009     tblrd	*+                 	TBLRD*+	
0047e8   cff5     movff	0xff5, 0x15        	MOVFF	TABLAT, r0x05
0047ea   f015
0047ec   0e01     movlw	0x1                	MOVLW	0x01
0047ee   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0047f0   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
0047f2   ec59     call	0x62b2, 0           	CALL	_MIOS_DOUT_PinSet
0047f4   f031
0047f6   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
0047f8   d007     bra	0x4808               	BRA	_00308_DS_
                                           _00294_DS_:
                                           ;	.line	625; main.c	DoRelay(i);
0047fa   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0047fc   6e15     movwf	0x15, 0            	MOVWF	r0x05
0047fe   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
004800   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004802   ec41     call	0x4e82, 0           	CALL	_DoRelay
004804   f027
004806   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           _00308_DS_:
                                           ;	.line	598; main.c	for ( i=0; i<MAX_RELAYS_NB; i++)
004808   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
00480a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00480c   2a14     incf	0x14, 0x1, 0        	INCF	r0x04, F
00480e   d72e     bra	0x466c               	BRA	_00306_DS_
                                           _00309_DS_:
                                           ;	.line	630; main.c	if ( ActiveRadioFound == 0 ) // No radio relay should be active
004810   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004812   1012     iorwf	0x12, 0, 0         	IORWF	r0x02, W
004814   e131     bnz	0x4878               	BNZ	_00303_DS_
                                           ;	.line	632; main.c	for ( i=0; i<MAX_RELAYS_NB; i++) // verify if one is active, then desactivate
004816   6a11     clrf	0x11, 0             	CLRF	r0x01
004818   6a12     clrf	0x12, 0             	CLRF	r0x02
                                           _00310_DS_:
00481a   0e00     movlw	0                  	MOVLW	0x00
00481c   5c12     subwf	0x12, 0, 0         	SUBWF	r0x02, W
00481e   e102     bnz	0x4824               	BNZ	_00359_DS_
004820   0e08     movlw	0x8                	MOVLW	0x08
004822   5c11     subwf	0x11, 0, 0         	SUBWF	r0x01, W
                                           _00359_DS_:
004824   e229     bc	0x4878                	BC	_00303_DS_
                                           ;	.line	634; main.c	if (( RelayMode[i] == Radio ) && (RelayState[i] == Active))
004826   0e90     movlw	0x90               	MOVLW	LOW(_RelayMode)
004828   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
00482a   6e13     movwf	0x13, 0            	MOVWF	r0x03
00482c   0e00     movlw	0                  	MOVLW	HIGH(_RelayMode)
00482e   2012     addwfc	0x12, 0, 0        	ADDWFC	r0x02, W
004830   6e14     movwf	0x14, 0            	MOVWF	r0x04
004832   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
004834   ffe1
004836   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
004838   ffe2
00483a   cfe7     movff	0xfe7, 0x13        	MOVFF	INDF0, r0x03
00483c   f013
00483e   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004840   0a01     xorlw	0x1                	XORLW	0x01
004842   e116     bnz	0x4870               	BNZ	_00312_DS_
004844   0e88     movlw	0x88               	MOVLW	LOW(_RelayState)
004846   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
004848   6e13     movwf	0x13, 0            	MOVWF	r0x03
00484a   0e00     movlw	0                  	MOVLW	HIGH(_RelayState)
00484c   2012     addwfc	0x12, 0, 0        	ADDWFC	r0x02, W
00484e   6e14     movwf	0x14, 0            	MOVWF	r0x04
004850   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
004852   ffe1
004854   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
004856   ffe2
004858   cfe7     movff	0xfe7, 0x13        	MOVFF	INDF0, r0x03
00485a   f013
00485c   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
00485e   0a01     xorlw	0x1                	XORLW	0x01
004860   e107     bnz	0x4870               	BNZ	_00312_DS_
                                           ;	.line	636; main.c	DoRelay(i);
004862   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004864   6e13     movwf	0x13, 0            	MOVWF	r0x03
004866   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004868   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00486a   ec41     call	0x4e82, 0           	CALL	_DoRelay
00486c   f027
00486e   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           _00312_DS_:
                                           ;	.line	632; main.c	for ( i=0; i<MAX_RELAYS_NB; i++) // verify if one is active, then desactivate
004870   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
004872   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004874   2a12     incf	0x12, 0x1, 0        	INCF	r0x02, F
004876   d7d1     bra	0x481a               	BRA	_00310_DS_
                                           _00303_DS_:
                                           ;	.line	642; main.c	FootLedsOff();
004878   ec0f     call	0x5e1e, 0           	CALL	_FootLedsOff
00487a   f02f
                                           ;	.line	643; main.c	for ( i=0; i<MAX_FOOTSWITCHES_NB; i++ )
00487c   6a11     clrf	0x11, 0             	CLRF	r0x01
00487e   6a12     clrf	0x12, 0             	CLRF	r0x02
                                           _00314_DS_:
004880   0e00     movlw	0                  	MOVLW	0x00
004882   5c12     subwf	0x12, 0, 0         	SUBWF	r0x02, W
004884   e102     bnz	0x488a               	BNZ	_00364_DS_
004886   0e04     movlw	0x4                	MOVLW	0x04
004888   5c11     subwf	0x11, 0, 0         	SUBWF	r0x01, W
                                           _00364_DS_:
00488a   e21a     bc	0x48c0                	BC	_00317_DS_
                                           ;	.line	645; main.c	if ( FootPreset[i] == preset_nb )
00488c   0ea0     movlw	0xa0               	MOVLW	LOW(_FootPreset)
00488e   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
004890   6e13     movwf	0x13, 0            	MOVWF	r0x03
004892   0e00     movlw	0                  	MOVLW	HIGH(_FootPreset)
004894   2012     addwfc	0x12, 0, 0        	ADDWFC	r0x02, W
004896   6e14     movwf	0x14, 0            	MOVWF	r0x04
004898   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
00489a   ffe1
00489c   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
00489e   ffe2
0048a0   cfe7     movff	0xfe7, 0x13        	MOVFF	INDF0, r0x03
0048a2   f013
0048a4   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0048a6   1810     xorwf	0x10, 0, 0         	XORWF	r0x00, W
0048a8   e107     bnz	0x48b8               	BNZ	_00316_DS_
                                           ;	.line	647; main.c	SetFootLed(i);
0048aa   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0048ac   6e13     movwf	0x13, 0            	MOVWF	r0x03
0048ae   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0048b0   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0048b2   ec63     call	0x5ac6, 0           	CALL	_SetFootLed
0048b4   f02d
0048b6   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           _00316_DS_:
                                           ;	.line	643; main.c	for ( i=0; i<MAX_FOOTSWITCHES_NB; i++ )
0048b8   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
0048ba   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0048bc   2a12     incf	0x12, 0x1, 0        	INCF	r0x02, F
0048be   d7e0     bra	0x4880               	BRA	_00314_DS_
                                           _00317_DS_:
                                           ;	.line	651; main.c	SetActivePreset(preset_nb);
0048c0   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0048c2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0048c4   ecc4     call	0x5d88, 0           	CALL	_SetActivePreset
0048c6   f02e
0048c8   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           _00318_DS_:
0048ca   cfec     movff	0xfec, 0x19        	MOVFF	PREINC1, r0x09
0048cc   f019
0048ce   cfec     movff	0xfec, 0x18        	MOVFF	PREINC1, r0x08
0048d0   f018
0048d2   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
0048d4   f017
0048d6   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
0048d8   f016
0048da   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
0048dc   f015
0048de   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
0048e0   f014
0048e2   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
0048e4   f013
0048e6   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
0048e8   f012
0048ea   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
0048ec   f011
0048ee   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
0048f0   f010
0048f2   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
0048f4   ffd9
0048f6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SetFootLed	code
                                           _SetFootLed:
                                           ;	.line	485; main.c	void SetFootLed ( unsigned char led_nb )
005ac6   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
005ac8   ffed
005aca   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
005acc   ffd9
005ace   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
005ad0   ffed
005ad2   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
005ad4   ffed
005ad6   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
005ad8   ffed
005ada   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
005adc   ffed
005ade   0e02     movlw	0x2                	MOVLW	0x02
005ae0   cfdb     movff	0xfdb, 0x10        	MOVFF	PLUSW2, r0x00
005ae2   f010
                                           ;	.line	489; main.c	DEBUG_MSG_SendHeader();
005ae4   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
005ae6   f02b
                                           ;	.line	490; main.c	DEBUG_MSG_SendCString("Footswitch Led: ");
005ae8   0e00     movlw	0                  	MOVLW	UPPER(__str_9)
005aea   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005aec   0e40     movlw	0x40               	MOVLW	HIGH(__str_9)
005aee   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005af0   0e64     movlw	0x64               	MOVLW	LOW(__str_9)
005af2   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
005af4   f02b
005af6   0e02     movlw	0x2                	MOVLW	0x02
005af8   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	491; main.c	DEBUG_MSG_SendBCD3(FootLedPin[led_nb]);
005afa   0eca     movlw	0xca               	MOVLW	LOW(_FootLedPin)
005afc   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
005afe   6e11     movwf	0x11, 0            	MOVWF	r0x01
005b00   6a12     clrf	0x12, 0             	CLRF	r0x02
005b02   0e3f     movlw	0x3f               	MOVLW	HIGH(_FootLedPin)
005b04   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
005b06   6a13     clrf	0x13, 0             	CLRF	r0x03
005b08   0e00     movlw	0                  	MOVLW	UPPER(_FootLedPin)
005b0a   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
005b0c   c011     movff	0x11, 0xff6        	MOVFF	r0x01, TBLPTRL
005b0e   fff6
005b10   c012     movff	0x12, 0xff7        	MOVFF	r0x02, TBLPTRH
005b12   fff7
005b14   c013     movff	0x13, 0xff8        	MOVFF	r0x03, TBLPTRU
005b16   fff8
005b18   0009     tblrd	*+                 	TBLRD*+	
005b1a   cff5     movff	0xff5, 0x11        	MOVFF	TABLAT, r0x01
005b1c   f011
005b1e   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
005b20   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
005b22   f02b
                                           ;	.line	492; main.c	DEBUG_MSG_SendChar(' ');
005b24   0e20     movlw	0x20               	MOVLW	0x20
005b26   ec5a     call	0x56b4, 0           	CALL	_DEBUG_MSG_SendChar
005b28   f02b
                                           ;	.line	493; main.c	DEBUG_MSG_SendCString(" On");
005b2a   0e00     movlw	0                  	MOVLW	UPPER(__str_10)
005b2c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005b2e   0e40     movlw	0x40               	MOVLW	HIGH(__str_10)
005b30   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005b32   0e76     movlw	0x76               	MOVLW	LOW(__str_10)
005b34   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
005b36   f02b
005b38   0e02     movlw	0x2                	MOVLW	0x02
005b3a   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	494; main.c	DEBUG_MSG_SendFooter();
005b3c   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
005b3e   f02b
                                           ;	.line	497; main.c	MIOS_DOUT_PinSet1(FootLedPin[led_nb]);
005b40   6a11     clrf	0x11, 0             	CLRF	r0x01
005b42   6a12     clrf	0x12, 0             	CLRF	r0x02
005b44   0eca     movlw	0xca               	MOVLW	LOW(_FootLedPin)
005b46   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
005b48   0e3f     movlw	0x3f               	MOVLW	HIGH(_FootLedPin)
005b4a   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
005b4c   0e00     movlw	0                  	MOVLW	UPPER(_FootLedPin)
005b4e   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
005b50   c010     movff	0x10, 0xff6        	MOVFF	r0x00, TBLPTRL
005b52   fff6
005b54   c011     movff	0x11, 0xff7        	MOVFF	r0x01, TBLPTRH
005b56   fff7
005b58   c012     movff	0x12, 0xff8        	MOVFF	r0x02, TBLPTRU
005b5a   fff8
005b5c   0009     tblrd	*+                 	TBLRD*+	
005b5e   cff5     movff	0xff5, 0x10        	MOVFF	TABLAT, r0x00
005b60   f010
005b62   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
005b64   ec64     call	0x2cc8, 0           	CALL	_MIOS_DOUT_PinSet1
005b66   f016
005b68   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
005b6a   f013
005b6c   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
005b6e   f012
005b70   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
005b72   f011
005b74   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
005b76   f010
005b78   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
005b7a   ffd9
005b7c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__FootLedsOff	code
                                           _FootLedsOff:
                                           ;	.line	467; main.c	void FootLedsOff ()
005e1e   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
005e20   ffed
005e22   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
005e24   ffed
005e26   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
005e28   ffed
005e2a   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
005e2c   ffed
005e2e   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
005e30   ffed
                                           ;	.line	472; main.c	for ( i=0; i<MAX_FOOTSWITCHES_NB; i++ )
005e32   6a10     clrf	0x10, 0             	CLRF	r0x00
005e34   6a11     clrf	0x11, 0             	CLRF	r0x01
                                           _00263_DS_:
005e36   0e00     movlw	0                  	MOVLW	0x00
005e38   5c11     subwf	0x11, 0, 0         	SUBWF	r0x01, W
005e3a   e102     bnz	0x5e40               	BNZ	_00272_DS_
005e3c   0e04     movlw	0x4                	MOVLW	0x04
005e3e   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
                                           _00272_DS_:
005e40   e21c     bc	0x5e7a                	BC	_00266_DS_
                                           ;	.line	474; main.c	MIOS_DOUT_PinSet(FootLedPin[i], 0);
005e42   0eca     movlw	0xca               	MOVLW	LOW(_FootLedPin)
005e44   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
005e46   6e12     movwf	0x12, 0            	MOVWF	r0x02
005e48   0e3f     movlw	0x3f               	MOVLW	HIGH(_FootLedPin)
005e4a   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x01, W
005e4c   6e13     movwf	0x13, 0            	MOVWF	r0x03
005e4e   6a14     clrf	0x14, 0             	CLRF	r0x04
005e50   0e00     movlw	0                  	MOVLW	UPPER(_FootLedPin)
005e52   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
005e54   c012     movff	0x12, 0xff6        	MOVFF	r0x02, TBLPTRL
005e56   fff6
005e58   c013     movff	0x13, 0xff7        	MOVFF	r0x03, TBLPTRH
005e5a   fff7
005e5c   c014     movff	0x14, 0xff8        	MOVFF	r0x04, TBLPTRU
005e5e   fff8
005e60   0009     tblrd	*+                 	TBLRD*+	
005e62   cff5     movff	0xff5, 0x12        	MOVFF	TABLAT, r0x02
005e64   f012
005e66   0e00     movlw	0                  	MOVLW	0x00
005e68   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005e6a   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
005e6c   ec59     call	0x62b2, 0           	CALL	_MIOS_DOUT_PinSet
005e6e   f031
005e70   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	472; main.c	for ( i=0; i<MAX_FOOTSWITCHES_NB; i++ )
005e72   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
005e74   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005e76   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
005e78   d7de     bra	0x5e36               	BRA	_00263_DS_
                                           _00266_DS_:
                                           ;	.line	477; main.c	DEBUG_MSG_SendHeader();
005e7a   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
005e7c   f02b
                                           ;	.line	478; main.c	DEBUG_MSG_SendCString("Footswitch Leds Off");
005e7e   0e00     movlw	0                  	MOVLW	UPPER(__str_8)
005e80   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005e82   0e40     movlw	0x40               	MOVLW	HIGH(__str_8)
005e84   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005e86   0e50     movlw	0x50               	MOVLW	LOW(__str_8)
005e88   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
005e8a   f02b
005e8c   0e02     movlw	0x2                	MOVLW	0x02
005e8e   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	479; main.c	DEBUG_MSG_SendFooter();
005e90   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
005e92   f02b
005e94   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
005e96   f014
005e98   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
005e9a   f013
005e9c   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
005e9e   f012
005ea0   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
005ea2   f011
005ea4   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
005ea6   f010
005ea8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SetActivePreset	code
                                           _SetActivePreset:
                                           ;	.line	437; main.c	void SetActivePreset ( unsigned char preset_nb )
005d88   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
005d8a   ffed
005d8c   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
005d8e   ffd9
005d90   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
005d92   ffed
005d94   0e02     movlw	0x2                	MOVLW	0x02
005d96   cfdb     movff	0xfdb, 0x10        	MOVFF	PLUSW2, r0x00
005d98   f010
                                           ;	.line	440; main.c	DEBUG_MSG_SendHeader();
005d9a   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
005d9c   f02b
                                           ;	.line	441; main.c	DEBUG_MSG_SendCString("Set Active preset");
005d9e   0e00     movlw	0                  	MOVLW	UPPER(__str_5)
005da0   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005da2   0e40     movlw	0x40               	MOVLW	HIGH(__str_5)
005da4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005da6   0e1a     movlw	0x1a               	MOVLW	LOW(__str_5)
005da8   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
005daa   f02b
005dac   0e02     movlw	0x2                	MOVLW	0x02
005dae   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	442; main.c	DEBUG_MSG_SendBCD3(preset_nb);
005db0   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
005db2   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
005db4   f02b
                                           ;	.line	443; main.c	DEBUG_MSG_SendFooter();
005db6   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
005db8   f02b
                                           ;	.line	447; main.c	CurrentPreset = preset_nb;
005dba   c010     movff	0x10, 0xa5         	MOVFF	r0x00, _CurrentPreset
005dbc   f0a5
005dbe   0100     movlb	0                  	BANKSEL	_CurrentPreset
                                           ;	.line	450; main.c	MIOS_EEPROM_Write(0x01,CurrentPreset);
005dc0   51a5     movf	0xa5, 0, 0x1        	MOVF	_CurrentPreset, W, B
005dc2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005dc4   0e01     movlw	0x1                	MOVLW	0x01
005dc6   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
005dc8   f031
005dca   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	454; main.c	MIOS_LCD_Clear();
005dcc   ec82     call	0x2d04, 0           	CALL	_MIOS_LCD_Clear
005dce   f016
                                           ;	.line	455; main.c	MIOS_LCD_CursorSet(0x00 + 0);
005dd0   0e00     movlw	0                  	MOVLW	0x00
005dd2   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
005dd4   f016
                                           ;	.line	456; main.c	MIOS_LCD_PrintCString("** Change to  **");
005dd6   0e00     movlw	0                  	MOVLW	UPPER(__str_6)
005dd8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005dda   0e40     movlw	0x40               	MOVLW	HIGH(__str_6)
005ddc   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005dde   0e2c     movlw	0x2c               	MOVLW	LOW(__str_6)
005de0   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
005de2   f02f
005de4   0e02     movlw	0x2                	MOVLW	0x02
005de6   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	457; main.c	MIOS_LCD_CursorSet(0x40 + 0);
005de8   0e40     movlw	0x40               	MOVLW	0x40
005dea   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
005dec   f016
                                           ;	.line	458; main.c	MIOS_LCD_PrintCString("** Preset     **");
005dee   0e00     movlw	0                  	MOVLW	UPPER(__str_7)
005df0   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005df2   0e40     movlw	0x40               	MOVLW	HIGH(__str_7)
005df4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005df6   0e3e     movlw	0x3e               	MOVLW	LOW(__str_7)
005df8   ece9     call	0x5fd2, 0           	CALL	_MIOS_LCD_PrintCString
005dfa   f02f
005dfc   0e02     movlw	0x2                	MOVLW	0x02
005dfe   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	459; main.c	MIOS_LCD_CursorSet(0x40 + 10);
005e00   0e4a     movlw	0x4a               	MOVLW	0x4a
005e02   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
005e04   f016
005e06   0100     movlb	0                  	BANKSEL	_CurrentPreset
                                           ;	.line	460; main.c	MIOS_LCD_PrintBCD3(CurrentPreset);
005e08   51a5     movf	0xa5, 0, 0x1        	MOVF	_CurrentPreset, W, B
005e0a   ec92     call	0x2d24, 0           	CALL	_MIOS_LCD_PrintBCD3
005e0c   f016
                                           ;	.line	461; main.c	MIOS_LCD_MessageStart(100);
005e0e   0e64     movlw	0x64               	MOVLW	0x64
005e10   ecfa     call	0x2df4, 0           	CALL	_MIOS_LCD_MessageStart
005e12   f016
005e14   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
005e16   f010
005e18   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
005e1a   ffd9
005e1c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SaveGlobalOptions	code
                                           _SaveGlobalOptions:
                                           ;	.line	367; main.c	void SaveGlobalOptions ()
0053ba   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
0053bc   ffed
0053be   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
0053c0   ffed
                                           ;	.line	377; main.c	eeprom_byte = MidiChannel & 0x0F;
0053c2   0e0f     movlw	0xf                	MOVLW	0x0f
0053c4   0100     movlb	0                  	BANKSEL	_MidiChannel
0053c6   15a4     andwf	0xa4, 0, 0x1       	ANDWF	_MidiChannel, W, B
0053c8   6e10     movwf	0x10, 0            	MOVWF	r0x00
0053ca   0100     movlb	0                  	BANKSEL	_SendMidiOnButtonChange
                                           ;	.line	378; main.c	eeprom_byte = eeprom_byte | SendMidiOnButtonChange<<4;
0053cc   39a6     swapf	0xa6, 0, 0x1       	SWAPF	_SendMidiOnButtonChange, W, B
0053ce   0bf0     andlw	0xf0               	ANDLW	0xf0
0053d0   6e11     movwf	0x11, 0            	MOVWF	r0x01
0053d2   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0053d4   1210     iorwf	0x10, 0x1, 0       	IORWF	r0x00, F
0053d6   0100     movlb	0                  	BANKSEL	_ReloadActivePreset
                                           ;	.line	379; main.c	eeprom_byte = eeprom_byte | ReloadActivePreset<<5;
0053d8   39a7     swapf	0xa7, 0, 0x1       	SWAPF	_ReloadActivePreset, W, B
0053da   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0053dc   0be0     andlw	0xe0               	ANDLW	0xe0
0053de   6e11     movwf	0x11, 0            	MOVWF	r0x01
0053e0   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0053e2   1210     iorwf	0x10, 0x1, 0       	IORWF	r0x00, F
0053e4   0100     movlb	0                  	BANKSEL	_ForceStartupPreset
                                           ;	.line	380; main.c	eeprom_byte = eeprom_byte | ForceStartupPreset<<6;
0053e6   41a8     rrncf	0xa8, 0, 0x1       	RRNCF	_ForceStartupPreset, W, B
0053e8   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0053ea   0bc0     andlw	0xc0               	ANDLW	0xc0
0053ec   6e11     movwf	0x11, 0            	MOVWF	r0x01
0053ee   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0053f0   1210     iorwf	0x10, 0x1, 0       	IORWF	r0x00, F
                                           ;	.line	381; main.c	MIOS_EEPROM_Write(0x00,eeprom_byte);
0053f2   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0053f4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0053f6   0e00     movlw	0                  	MOVLW	0x00
0053f8   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
0053fa   f031
0053fc   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
0053fe   0100     movlb	0                  	BANKSEL	_CurrentPreset
                                           ;	.line	385; main.c	MIOS_EEPROM_Write(0x01,CurrentPreset);
005400   51a5     movf	0xa5, 0, 0x1        	MOVF	_CurrentPreset, W, B
005402   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005404   0e01     movlw	0x1                	MOVLW	0x01
005406   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
005408   f031
00540a   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	388; main.c	eeprom_byte = RelayType[0];
00540c   c080     movff	0x80, 0x10         	MOVFF	_RelayType, r0x00
00540e   f010
005410   0100     movlb	0                  	BANKSEL	(_RelayType + 1)
                                           ;	.line	389; main.c	eeprom_byte = eeprom_byte | RelayType[1]<<1;
005412   4581     rlncf	0x81, 0, 0x1       	RLNCF	(_RelayType + 1), W, B
005414   0bfe     andlw	0xfe               	ANDLW	0xfe
005416   6e11     movwf	0x11, 0            	MOVWF	r0x01
005418   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00541a   1210     iorwf	0x10, 0x1, 0       	IORWF	r0x00, F
                                           ; removed redundant BANKSEL
                                           ;	.line	390; main.c	eeprom_byte = eeprom_byte | RelayType[2]<<2;
00541c   4582     rlncf	0x82, 0, 0x1       	RLNCF	(_RelayType + 2), W, B
00541e   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
005420   0bfc     andlw	0xfc               	ANDLW	0xfc
005422   6e11     movwf	0x11, 0            	MOVWF	r0x01
005424   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
005426   1210     iorwf	0x10, 0x1, 0       	IORWF	r0x00, F
                                           ; removed redundant BANKSEL
                                           ;	.line	391; main.c	eeprom_byte = eeprom_byte | RelayType[3]<<3;
005428   3983     swapf	0x83, 0, 0x1       	SWAPF	(_RelayType + 3), W, B
00542a   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
00542c   0bf8     andlw	0xf8               	ANDLW	0xf8
00542e   6e11     movwf	0x11, 0            	MOVWF	r0x01
005430   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
005432   1210     iorwf	0x10, 0x1, 0       	IORWF	r0x00, F
                                           ; removed redundant BANKSEL
                                           ;	.line	392; main.c	eeprom_byte = eeprom_byte | RelayType[4]<<4;
005434   3984     swapf	0x84, 0, 0x1       	SWAPF	(_RelayType + 4), W, B
005436   0bf0     andlw	0xf0               	ANDLW	0xf0
005438   6e11     movwf	0x11, 0            	MOVWF	r0x01
00543a   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00543c   1210     iorwf	0x10, 0x1, 0       	IORWF	r0x00, F
                                           ; removed redundant BANKSEL
                                           ;	.line	393; main.c	eeprom_byte = eeprom_byte | RelayType[5]<<5;
00543e   3985     swapf	0x85, 0, 0x1       	SWAPF	(_RelayType + 5), W, B
005440   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
005442   0be0     andlw	0xe0               	ANDLW	0xe0
005444   6e11     movwf	0x11, 0            	MOVWF	r0x01
005446   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
005448   1210     iorwf	0x10, 0x1, 0       	IORWF	r0x00, F
                                           ; removed redundant BANKSEL
                                           ;	.line	394; main.c	eeprom_byte = eeprom_byte | RelayType[6]<<6;
00544a   4186     rrncf	0x86, 0, 0x1       	RRNCF	(_RelayType + 6), W, B
00544c   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
00544e   0bc0     andlw	0xc0               	ANDLW	0xc0
005450   6e11     movwf	0x11, 0            	MOVWF	r0x01
005452   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
005454   1210     iorwf	0x10, 0x1, 0       	IORWF	r0x00, F
                                           ; removed redundant BANKSEL
                                           ;	.line	395; main.c	eeprom_byte = eeprom_byte | RelayType[7]<<7;
005456   4187     rrncf	0x87, 0, 0x1       	RRNCF	(_RelayType + 7), W, B
005458   0b80     andlw	0x80               	ANDLW	0x80
00545a   6e11     movwf	0x11, 0            	MOVWF	r0x01
00545c   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00545e   1210     iorwf	0x10, 0x1, 0       	IORWF	r0x00, F
                                           ;	.line	396; main.c	MIOS_EEPROM_Write(0x02,eeprom_byte);
005460   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
005462   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005464   0e02     movlw	0x2                	MOVLW	0x02
005466   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
005468   f031
00546a   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	399; main.c	eeprom_byte = RelayMode[0];
00546c   c090     movff	0x90, 0x10         	MOVFF	_RelayMode, r0x00
00546e   f010
005470   0100     movlb	0                  	BANKSEL	(_RelayMode + 1)
                                           ;	.line	400; main.c	eeprom_byte = eeprom_byte | RelayMode[1]<<1;
005472   4591     rlncf	0x91, 0, 0x1       	RLNCF	(_RelayMode + 1), W, B
005474   0bfe     andlw	0xfe               	ANDLW	0xfe
005476   6e11     movwf	0x11, 0            	MOVWF	r0x01
005478   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00547a   1210     iorwf	0x10, 0x1, 0       	IORWF	r0x00, F
                                           ; removed redundant BANKSEL
                                           ;	.line	401; main.c	eeprom_byte = eeprom_byte | RelayMode[2]<<2;
00547c   4592     rlncf	0x92, 0, 0x1       	RLNCF	(_RelayMode + 2), W, B
00547e   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
005480   0bfc     andlw	0xfc               	ANDLW	0xfc
005482   6e11     movwf	0x11, 0            	MOVWF	r0x01
005484   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
005486   1210     iorwf	0x10, 0x1, 0       	IORWF	r0x00, F
                                           ; removed redundant BANKSEL
                                           ;	.line	402; main.c	eeprom_byte = eeprom_byte | RelayMode[3]<<3;
005488   3993     swapf	0x93, 0, 0x1       	SWAPF	(_RelayMode + 3), W, B
00548a   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
00548c   0bf8     andlw	0xf8               	ANDLW	0xf8
00548e   6e11     movwf	0x11, 0            	MOVWF	r0x01
005490   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
005492   1210     iorwf	0x10, 0x1, 0       	IORWF	r0x00, F
                                           ; removed redundant BANKSEL
                                           ;	.line	403; main.c	eeprom_byte = eeprom_byte | RelayMode[4]<<4;
005494   3994     swapf	0x94, 0, 0x1       	SWAPF	(_RelayMode + 4), W, B
005496   0bf0     andlw	0xf0               	ANDLW	0xf0
005498   6e11     movwf	0x11, 0            	MOVWF	r0x01
00549a   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00549c   1210     iorwf	0x10, 0x1, 0       	IORWF	r0x00, F
                                           ; removed redundant BANKSEL
                                           ;	.line	404; main.c	eeprom_byte = eeprom_byte | RelayMode[5]<<5;
00549e   3995     swapf	0x95, 0, 0x1       	SWAPF	(_RelayMode + 5), W, B
0054a0   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0054a2   0be0     andlw	0xe0               	ANDLW	0xe0
0054a4   6e11     movwf	0x11, 0            	MOVWF	r0x01
0054a6   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0054a8   1210     iorwf	0x10, 0x1, 0       	IORWF	r0x00, F
                                           ; removed redundant BANKSEL
                                           ;	.line	405; main.c	eeprom_byte = eeprom_byte | RelayMode[6]<<6;
0054aa   4196     rrncf	0x96, 0, 0x1       	RRNCF	(_RelayMode + 6), W, B
0054ac   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0054ae   0bc0     andlw	0xc0               	ANDLW	0xc0
0054b0   6e11     movwf	0x11, 0            	MOVWF	r0x01
0054b2   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0054b4   1210     iorwf	0x10, 0x1, 0       	IORWF	r0x00, F
                                           ; removed redundant BANKSEL
                                           ;	.line	406; main.c	eeprom_byte = eeprom_byte | RelayMode[7]<<7;
0054b6   4197     rrncf	0x97, 0, 0x1       	RRNCF	(_RelayMode + 7), W, B
0054b8   0b80     andlw	0x80               	ANDLW	0x80
0054ba   6e11     movwf	0x11, 0            	MOVWF	r0x01
0054bc   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0054be   1210     iorwf	0x10, 0x1, 0       	IORWF	r0x00, F
                                           ;	.line	407; main.c	MIOS_EEPROM_Write(0x03,eeprom_byte);
0054c0   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0054c2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0054c4   0e03     movlw	0x3                	MOVLW	0x03
0054c6   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
0054c8   f031
0054ca   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	410; main.c	eeprom_byte = FootPreset[0];
0054cc   c0a0     movff	0xa0, 0x10         	MOVFF	_FootPreset, r0x00
0054ce   f010
                                           ;	.line	411; main.c	MIOS_EEPROM_Write(0x04,eeprom_byte);	
0054d0   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0054d2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0054d4   0e04     movlw	0x4                	MOVLW	0x04
0054d6   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
0054d8   f031
0054da   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	413; main.c	eeprom_byte = FootPreset[1];
0054dc   c0a1     movff	0xa1, 0x10         	MOVFF	(_FootPreset + 1), r0x00
0054de   f010
                                           ;	.line	414; main.c	MIOS_EEPROM_Write(0x05,eeprom_byte);	
0054e0   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0054e2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0054e4   0e05     movlw	0x5                	MOVLW	0x05
0054e6   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
0054e8   f031
0054ea   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	416; main.c	eeprom_byte = FootPreset[2];
0054ec   c0a2     movff	0xa2, 0x10         	MOVFF	(_FootPreset + 2), r0x00
0054ee   f010
                                           ;	.line	417; main.c	MIOS_EEPROM_Write(0x06,eeprom_byte);	
0054f0   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0054f2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0054f4   0e06     movlw	0x6                	MOVLW	0x06
0054f6   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
0054f8   f031
0054fa   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	419; main.c	eeprom_byte = FootPreset[3];
0054fc   c0a3     movff	0xa3, 0x10         	MOVFF	(_FootPreset + 3), r0x00
0054fe   f010
                                           ;	.line	420; main.c	MIOS_EEPROM_Write(0x07,eeprom_byte);	
005500   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
005502   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005504   0e07     movlw	0x7                	MOVLW	0x07
005506   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
005508   f031
00550a   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
00550c   0100     movlb	0                  	BANKSEL	_ThisStartupPreset
                                           ;	.line	423; main.c	MIOS_EEPROM_Write(0x08,ThisStartupPreset);	
00550e   51a9     movf	0xa9, 0, 0x1        	MOVF	_ThisStartupPreset, W, B
005510   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005512   0e08     movlw	0x8                	MOVLW	0x08
005514   ec89     call	0x6312, 0           	CALL	_MIOS_EEPROM_Write
005516   f031
005518   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
00551a   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
00551c   f011
00551e   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
005520   f010
005522   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__LoadGlobalOptions	code
                                           _LoadGlobalOptions:
                                           ;	.line	302; main.c	void LoadGlobalOptions ()
005074   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
005076   ffed
005078   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
00507a   ffed
                                           ;	.line	312; main.c	eeprom_byte = MIOS_EEPROM_Read(0x00);
00507c   0e00     movlw	0                  	MOVLW	0x00
00507e   ec9a     call	0x6334, 0           	CALL	_MIOS_EEPROM_Read
005080   f031
005082   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ;	.line	313; main.c	MidiChannel = eeprom_byte & 0x0F;
005084   0e0f     movlw	0xf                	MOVLW	0x0f
005086   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
005088   0100     movlb	0                  	BANKSEL	_MidiChannel
00508a   6fa4     movwf	0xa4, 0x1          	MOVWF	_MidiChannel, B
                                           ;	.line	314; main.c	SendMidiOnButtonChange = (eeprom_byte & 0x10)>>4;
00508c   0e10     movlw	0x10               	MOVLW	0x10
00508e   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
005090   6e11     movwf	0x11, 0            	MOVWF	r0x01
005092   3811     swapf	0x11, 0, 0         	SWAPF	r0x01, W
005094   0b0f     andlw	0xf                	ANDLW	0x0f
005096   0100     movlb	0                  	BANKSEL	_SendMidiOnButtonChange
005098   6fa6     movwf	0xa6, 0x1          	MOVWF	_SendMidiOnButtonChange, B
                                           ;	.line	315; main.c	ReloadActivePreset = (eeprom_byte & 0x20)>>5;
00509a   0e20     movlw	0x20               	MOVLW	0x20
00509c   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
00509e   6e11     movwf	0x11, 0            	MOVWF	r0x01
0050a0   3811     swapf	0x11, 0, 0         	SWAPF	r0x01, W
0050a2   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0050a4   0b07     andlw	0x7                	ANDLW	0x07
0050a6   0100     movlb	0                  	BANKSEL	_ReloadActivePreset
0050a8   6fa7     movwf	0xa7, 0x1          	MOVWF	_ReloadActivePreset, B
                                           ;	.line	316; main.c	ForceStartupPreset = (eeprom_byte & 0x40)>>6;
0050aa   0e40     movlw	0x40               	MOVLW	0x40
0050ac   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
0050ae   6e11     movwf	0x11, 0            	MOVWF	r0x01
0050b0   4411     rlncf	0x11, 0, 0         	RLNCF	r0x01, W
0050b2   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0050b4   0b03     andlw	0x3                	ANDLW	0x03
0050b6   0100     movlb	0                  	BANKSEL	_ForceStartupPreset
0050b8   6fa8     movwf	0xa8, 0x1          	MOVWF	_ForceStartupPreset, B
                                           ;	.line	320; main.c	CurrentPreset = MIOS_EEPROM_Read(0x01);
0050ba   0e01     movlw	0x1                	MOVLW	0x01
0050bc   ec9a     call	0x6334, 0           	CALL	_MIOS_EEPROM_Read
0050be   f031
0050c0   0100     movlb	0                  	BANKSEL	_CurrentPreset
0050c2   6fa5     movwf	0xa5, 0x1          	MOVWF	_CurrentPreset, B
                                           ;	.line	323; main.c	eeprom_byte = MIOS_EEPROM_Read(0x02);	
0050c4   0e02     movlw	0x2                	MOVLW	0x02
0050c6   ec9a     call	0x6334, 0           	CALL	_MIOS_EEPROM_Read
0050c8   f031
0050ca   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ;	.line	324; main.c	RelayType[0] = eeprom_byte & 0x01;
0050cc   0e01     movlw	0x1                	MOVLW	0x01
0050ce   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
0050d0   6e11     movwf	0x11, 0            	MOVWF	r0x01
0050d2   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0050d4   0100     movlb	0                  	BANKSEL	_RelayType
0050d6   6f80     movwf	0x80, 0x1          	MOVWF	_RelayType, B
                                           ;	.line	325; main.c	RelayType[1] = (eeprom_byte & 0x02)>>1;
0050d8   0e02     movlw	0x2                	MOVLW	0x02
0050da   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
0050dc   6e11     movwf	0x11, 0            	MOVWF	r0x01
0050de   4011     rrncf	0x11, 0, 0         	RRNCF	r0x01, W
0050e0   0b7f     andlw	0x7f               	ANDLW	0x7f
0050e2   6e11     movwf	0x11, 0            	MOVWF	r0x01
0050e4   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0050e6   6f81     movwf	0x81, 0x1          	MOVWF	(_RelayType + 1), B
                                           ;	.line	326; main.c	RelayType[2] = (eeprom_byte & 0x04)>>2;
0050e8   0e04     movlw	0x4                	MOVLW	0x04
0050ea   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
0050ec   6e11     movwf	0x11, 0            	MOVWF	r0x01
0050ee   4011     rrncf	0x11, 0, 0         	RRNCF	r0x01, W
0050f0   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0050f2   0b3f     andlw	0x3f               	ANDLW	0x3f
0050f4   6e11     movwf	0x11, 0            	MOVWF	r0x01
0050f6   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0050f8   6f82     movwf	0x82, 0x1          	MOVWF	(_RelayType + 2), B
                                           ;	.line	327; main.c	RelayType[3] = (eeprom_byte & 0x08)>>3;
0050fa   0e08     movlw	0x8                	MOVLW	0x08
0050fc   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
0050fe   6e11     movwf	0x11, 0            	MOVWF	r0x01
005100   3811     swapf	0x11, 0, 0         	SWAPF	r0x01, W
005102   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
005104   0b1f     andlw	0x1f               	ANDLW	0x1f
005106   6e11     movwf	0x11, 0            	MOVWF	r0x01
005108   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00510a   6f83     movwf	0x83, 0x1          	MOVWF	(_RelayType + 3), B
                                           ;	.line	328; main.c	RelayType[4] = (eeprom_byte & 0x10)>>4;
00510c   0e10     movlw	0x10               	MOVLW	0x10
00510e   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
005110   6e11     movwf	0x11, 0            	MOVWF	r0x01
005112   3811     swapf	0x11, 0, 0         	SWAPF	r0x01, W
005114   0b0f     andlw	0xf                	ANDLW	0x0f
005116   6e11     movwf	0x11, 0            	MOVWF	r0x01
005118   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00511a   6f84     movwf	0x84, 0x1          	MOVWF	(_RelayType + 4), B
                                           ;	.line	329; main.c	RelayType[5] = (eeprom_byte & 0x20)>>5;
00511c   0e20     movlw	0x20               	MOVLW	0x20
00511e   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
005120   6e11     movwf	0x11, 0            	MOVWF	r0x01
005122   3811     swapf	0x11, 0, 0         	SWAPF	r0x01, W
005124   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
005126   0b07     andlw	0x7                	ANDLW	0x07
005128   6e11     movwf	0x11, 0            	MOVWF	r0x01
00512a   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00512c   6f85     movwf	0x85, 0x1          	MOVWF	(_RelayType + 5), B
                                           ;	.line	330; main.c	RelayType[6] = (eeprom_byte & 0x40)>>6;
00512e   0e40     movlw	0x40               	MOVLW	0x40
005130   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
005132   6e11     movwf	0x11, 0            	MOVWF	r0x01
005134   4411     rlncf	0x11, 0, 0         	RLNCF	r0x01, W
005136   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
005138   0b03     andlw	0x3                	ANDLW	0x03
00513a   6e11     movwf	0x11, 0            	MOVWF	r0x01
00513c   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00513e   6f86     movwf	0x86, 0x1          	MOVWF	(_RelayType + 6), B
                                           ;	.line	331; main.c	RelayType[7] = (eeprom_byte & 0x80)>>7;
005140   0e80     movlw	0x80               	MOVLW	0x80
005142   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
005144   6e11     movwf	0x11, 0            	MOVWF	r0x01
005146   4411     rlncf	0x11, 0, 0         	RLNCF	r0x01, W
005148   0b01     andlw	0x1                	ANDLW	0x01
00514a   6e11     movwf	0x11, 0            	MOVWF	r0x01
00514c   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00514e   6f87     movwf	0x87, 0x1          	MOVWF	(_RelayType + 7), B
                                           ;	.line	334; main.c	eeprom_byte = MIOS_EEPROM_Read(0x03);	
005150   0e03     movlw	0x3                	MOVLW	0x03
005152   ec9a     call	0x6334, 0           	CALL	_MIOS_EEPROM_Read
005154   f031
005156   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ;	.line	335; main.c	RelayMode[0] = eeprom_byte & 0x01;
005158   0e01     movlw	0x1                	MOVLW	0x01
00515a   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
00515c   6e11     movwf	0x11, 0            	MOVWF	r0x01
00515e   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
005160   0100     movlb	0                  	BANKSEL	_RelayMode
005162   6f90     movwf	0x90, 0x1          	MOVWF	_RelayMode, B
                                           ;	.line	336; main.c	RelayMode[1] = (eeprom_byte & 0x02)>>1;
005164   0e02     movlw	0x2                	MOVLW	0x02
005166   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
005168   6e11     movwf	0x11, 0            	MOVWF	r0x01
00516a   4011     rrncf	0x11, 0, 0         	RRNCF	r0x01, W
00516c   0b7f     andlw	0x7f               	ANDLW	0x7f
00516e   6e11     movwf	0x11, 0            	MOVWF	r0x01
005170   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
005172   6f91     movwf	0x91, 0x1          	MOVWF	(_RelayMode + 1), B
                                           ;	.line	337; main.c	RelayMode[2] = (eeprom_byte & 0x04)>>2;
005174   0e04     movlw	0x4                	MOVLW	0x04
005176   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
005178   6e11     movwf	0x11, 0            	MOVWF	r0x01
00517a   4011     rrncf	0x11, 0, 0         	RRNCF	r0x01, W
00517c   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
00517e   0b3f     andlw	0x3f               	ANDLW	0x3f
005180   6e11     movwf	0x11, 0            	MOVWF	r0x01
005182   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
005184   6f92     movwf	0x92, 0x1          	MOVWF	(_RelayMode + 2), B
                                           ;	.line	338; main.c	RelayMode[3] = (eeprom_byte & 0x08)>>3;
005186   0e08     movlw	0x8                	MOVLW	0x08
005188   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
00518a   6e11     movwf	0x11, 0            	MOVWF	r0x01
00518c   3811     swapf	0x11, 0, 0         	SWAPF	r0x01, W
00518e   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
005190   0b1f     andlw	0x1f               	ANDLW	0x1f
005192   6e11     movwf	0x11, 0            	MOVWF	r0x01
005194   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
005196   6f93     movwf	0x93, 0x1          	MOVWF	(_RelayMode + 3), B
                                           ;	.line	339; main.c	RelayMode[4] = (eeprom_byte & 0x10)>>4;
005198   0e10     movlw	0x10               	MOVLW	0x10
00519a   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
00519c   6e11     movwf	0x11, 0            	MOVWF	r0x01
00519e   3811     swapf	0x11, 0, 0         	SWAPF	r0x01, W
0051a0   0b0f     andlw	0xf                	ANDLW	0x0f
0051a2   6e11     movwf	0x11, 0            	MOVWF	r0x01
0051a4   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0051a6   6f94     movwf	0x94, 0x1          	MOVWF	(_RelayMode + 4), B
                                           ;	.line	340; main.c	RelayMode[5] = (eeprom_byte & 0x20)>>5;
0051a8   0e20     movlw	0x20               	MOVLW	0x20
0051aa   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
0051ac   6e11     movwf	0x11, 0            	MOVWF	r0x01
0051ae   3811     swapf	0x11, 0, 0         	SWAPF	r0x01, W
0051b0   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0051b2   0b07     andlw	0x7                	ANDLW	0x07
0051b4   6e11     movwf	0x11, 0            	MOVWF	r0x01
0051b6   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0051b8   6f95     movwf	0x95, 0x1          	MOVWF	(_RelayMode + 5), B
                                           ;	.line	341; main.c	RelayMode[6] = (eeprom_byte & 0x40)>>6;
0051ba   0e40     movlw	0x40               	MOVLW	0x40
0051bc   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
0051be   6e11     movwf	0x11, 0            	MOVWF	r0x01
0051c0   4411     rlncf	0x11, 0, 0         	RLNCF	r0x01, W
0051c2   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0051c4   0b03     andlw	0x3                	ANDLW	0x03
0051c6   6e11     movwf	0x11, 0            	MOVWF	r0x01
0051c8   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0051ca   6f96     movwf	0x96, 0x1          	MOVWF	(_RelayMode + 6), B
                                           ;	.line	342; main.c	RelayMode[7] = (eeprom_byte & 0x80)>>7;
0051cc   0e80     movlw	0x80               	MOVLW	0x80
0051ce   1610     andwf	0x10, 0x1, 0       	ANDWF	r0x00, F
0051d0   4410     rlncf	0x10, 0, 0         	RLNCF	r0x00, W
0051d2   0b01     andlw	0x1                	ANDLW	0x01
0051d4   6e10     movwf	0x10, 0            	MOVWF	r0x00
0051d6   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
0051d8   6f97     movwf	0x97, 0x1          	MOVWF	(_RelayMode + 7), B
                                           ;	.line	345; main.c	FootPreset[0] = MIOS_EEPROM_Read(0x04);	
0051da   0e04     movlw	0x4                	MOVLW	0x04
0051dc   ec9a     call	0x6334, 0           	CALL	_MIOS_EEPROM_Read
0051de   f031
0051e0   6e10     movwf	0x10, 0            	MOVWF	r0x00
0051e2   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0051e4   0100     movlb	0                  	BANKSEL	_FootPreset
0051e6   6fa0     movwf	0xa0, 0x1          	MOVWF	_FootPreset, B
                                           ;	.line	347; main.c	FootPreset[1] = MIOS_EEPROM_Read(0x05);	
0051e8   0e05     movlw	0x5                	MOVLW	0x05
0051ea   ec9a     call	0x6334, 0           	CALL	_MIOS_EEPROM_Read
0051ec   f031
0051ee   6e10     movwf	0x10, 0            	MOVWF	r0x00
0051f0   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0051f2   0100     movlb	0                  	BANKSEL	(_FootPreset + 1)
0051f4   6fa1     movwf	0xa1, 0x1          	MOVWF	(_FootPreset + 1), B
                                           ;	.line	349; main.c	FootPreset[2] = MIOS_EEPROM_Read(0x06);	
0051f6   0e06     movlw	0x6                	MOVLW	0x06
0051f8   ec9a     call	0x6334, 0           	CALL	_MIOS_EEPROM_Read
0051fa   f031
0051fc   6e10     movwf	0x10, 0            	MOVWF	r0x00
0051fe   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
005200   0100     movlb	0                  	BANKSEL	(_FootPreset + 2)
005202   6fa2     movwf	0xa2, 0x1          	MOVWF	(_FootPreset + 2), B
                                           ;	.line	351; main.c	FootPreset[3] = MIOS_EEPROM_Read(0x07);	
005204   0e07     movlw	0x7                	MOVLW	0x07
005206   ec9a     call	0x6334, 0           	CALL	_MIOS_EEPROM_Read
005208   f031
00520a   6e10     movwf	0x10, 0            	MOVWF	r0x00
00520c   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00520e   0100     movlb	0                  	BANKSEL	(_FootPreset + 3)
005210   6fa3     movwf	0xa3, 0x1          	MOVWF	(_FootPreset + 3), B
                                           ;	.line	354; main.c	ThisStartupPreset = MIOS_EEPROM_Read(0x08);	
005212   0e08     movlw	0x8                	MOVLW	0x08
005214   ec9a     call	0x6334, 0           	CALL	_MIOS_EEPROM_Read
005216   f031
005218   0100     movlb	0                  	BANKSEL	_ThisStartupPreset
00521a   6fa9     movwf	0xa9, 0x1          	MOVWF	_ThisStartupPreset, B
00521c   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
00521e   f011
005220   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
005222   f010
005224   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__LoadTestPreset	code
                                           _LoadTestPreset:
                                           ;	.line	276; main.c	void LoadTestPreset()
0059d4   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
0059d6   ffed
0059d8   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
0059da   ffed
0059dc   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
0059de   ffed
0059e0   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
0059e2   ffed
0059e4   0100     movlb	0                  	BANKSEL	_MidiChannel
                                           ;	.line	282; main.c	MidiChannel = 0;
0059e6   6ba4     clrf	0xa4, 0x1           	CLRF	_MidiChannel, B
                                           ;	.line	283; main.c	CurrentPreset = 1;
0059e8   0e01     movlw	0x1                	MOVLW	0x01
0059ea   0100     movlb	0                  	BANKSEL	_CurrentPreset
0059ec   6fa5     movwf	0xa5, 0x1          	MOVWF	_CurrentPreset, B
0059ee   0100     movlb	0                  	BANKSEL	_SendMidiOnButtonChange
                                           ;	.line	284; main.c	SendMidiOnButtonChange = 0;
0059f0   6ba6     clrf	0xa6, 0x1           	CLRF	_SendMidiOnButtonChange, B
                                           ;	.line	285; main.c	for ( i=0; i<5; i++)
0059f2   6a10     clrf	0x10, 0             	CLRF	r0x00
0059f4   6a11     clrf	0x11, 0             	CLRF	r0x01
                                           _00229_DS_:
0059f6   0e00     movlw	0                  	MOVLW	0x00
0059f8   5c11     subwf	0x11, 0, 0         	SUBWF	r0x01, W
0059fa   e102     bnz	0x5a00               	BNZ	_00245_DS_
0059fc   0e05     movlw	0x5                	MOVLW	0x05
0059fe   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
                                           _00245_DS_:
005a00   e228     bc	0x5a52                	BC	_00232_DS_
                                           ;	.line	287; main.c	RelayType[i] = 0; //Toggle=0, Momentary=1
005a02   0e80     movlw	0x80               	MOVLW	LOW(_RelayType)
005a04   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
005a06   6e12     movwf	0x12, 0            	MOVWF	r0x02
005a08   0e00     movlw	0                  	MOVLW	HIGH(_RelayType)
005a0a   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x01, W
005a0c   6e13     movwf	0x13, 0            	MOVWF	r0x03
005a0e   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
005a10   ffe1
005a12   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
005a14   ffe2
005a16   0e00     movlw	0                  	MOVLW	0x00
005a18   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	288; main.c	RelayMode[i] = 0; //Free=0, radiogroup=1
005a1a   0e90     movlw	0x90               	MOVLW	LOW(_RelayMode)
005a1c   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
005a1e   6e12     movwf	0x12, 0            	MOVWF	r0x02
005a20   0e00     movlw	0                  	MOVLW	HIGH(_RelayMode)
005a22   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x01, W
005a24   6e13     movwf	0x13, 0            	MOVWF	r0x03
005a26   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
005a28   ffe1
005a2a   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
005a2c   ffe2
005a2e   0e00     movlw	0                  	MOVLW	0x00
005a30   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	289; main.c	RelayState[i] = 0; //Open/Inactive=0, Closed/Active=1
005a32   0e88     movlw	0x88               	MOVLW	LOW(_RelayState)
005a34   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
005a36   6e12     movwf	0x12, 0            	MOVWF	r0x02
005a38   0e00     movlw	0                  	MOVLW	HIGH(_RelayState)
005a3a   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x01, W
005a3c   6e13     movwf	0x13, 0            	MOVWF	r0x03
005a3e   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
005a40   ffe1
005a42   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
005a44   ffe2
005a46   0e00     movlw	0                  	MOVLW	0x00
005a48   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	285; main.c	for ( i=0; i<5; i++)
005a4a   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
005a4c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005a4e   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
005a50   d7d2     bra	0x59f6               	BRA	_00229_DS_
                                           _00232_DS_:
                                           ;	.line	291; main.c	for ( i=5; i<8; i++)
005a52   0e05     movlw	0x5                	MOVLW	0x05
005a54   6e10     movwf	0x10, 0            	MOVWF	r0x00
005a56   6a11     clrf	0x11, 0             	CLRF	r0x01
                                           _00233_DS_:
005a58   0e00     movlw	0                  	MOVLW	0x00
005a5a   5c11     subwf	0x11, 0, 0         	SUBWF	r0x01, W
005a5c   e102     bnz	0x5a62               	BNZ	_00246_DS_
005a5e   0e08     movlw	0x8                	MOVLW	0x08
005a60   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
                                           _00246_DS_:
005a62   e228     bc	0x5ab4                	BC	_00237_DS_
                                           ;	.line	293; main.c	RelayType[i] = 1; //Toggle=0, Momentary=1
005a64   0e80     movlw	0x80               	MOVLW	LOW(_RelayType)
005a66   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
005a68   6e12     movwf	0x12, 0            	MOVWF	r0x02
005a6a   0e00     movlw	0                  	MOVLW	HIGH(_RelayType)
005a6c   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x01, W
005a6e   6e13     movwf	0x13, 0            	MOVWF	r0x03
005a70   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
005a72   ffe1
005a74   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
005a76   ffe2
005a78   0e01     movlw	0x1                	MOVLW	0x01
005a7a   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	294; main.c	RelayMode[i] = 1; //Free=0, radiogroup=1
005a7c   0e90     movlw	0x90               	MOVLW	LOW(_RelayMode)
005a7e   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
005a80   6e12     movwf	0x12, 0            	MOVWF	r0x02
005a82   0e00     movlw	0                  	MOVLW	HIGH(_RelayMode)
005a84   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x01, W
005a86   6e13     movwf	0x13, 0            	MOVWF	r0x03
005a88   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
005a8a   ffe1
005a8c   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
005a8e   ffe2
005a90   0e01     movlw	0x1                	MOVLW	0x01
005a92   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	295; main.c	RelayState[i] = 0; //Open/Inactive=0, Closed/Active=1
005a94   0e88     movlw	0x88               	MOVLW	LOW(_RelayState)
005a96   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
005a98   6e12     movwf	0x12, 0            	MOVWF	r0x02
005a9a   0e00     movlw	0                  	MOVLW	HIGH(_RelayState)
005a9c   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x01, W
005a9e   6e13     movwf	0x13, 0            	MOVWF	r0x03
005aa0   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
005aa2   ffe1
005aa4   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
005aa6   ffe2
005aa8   0e00     movlw	0                  	MOVLW	0x00
005aaa   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	291; main.c	for ( i=5; i<8; i++)
005aac   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
005aae   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005ab0   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
005ab2   d7d2     bra	0x5a58               	BRA	_00233_DS_
                                           _00237_DS_:
005ab4   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
005ab6   f013
005ab8   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
005aba   f012
005abc   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
005abe   f011
005ac0   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
005ac2   f010
005ac4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MenuButton	code
                                           _MenuButton:
                                           ;	.line	260; main.c	unsigned char MenuButton ( unsigned char pin_number )
005b7e   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
005b80   ffed
005b82   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
005b84   ffd9
005b86   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
005b88   ffed
005b8a   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
005b8c   ffed
005b8e   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
005b90   ffed
005b92   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
005b94   ffed
005b96   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
005b98   ffed
005b9a   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
005b9c   ffed
005b9e   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
005ba0   ffed
005ba2   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
005ba4   ffed
005ba6   0e02     movlw	0x2                	MOVLW	0x02
005ba8   cfdb     movff	0xfdb, 0x10        	MOVFF	PLUSW2, r0x00
005baa   f010
                                           ;	.line	264; main.c	for ( i=0; i<MAX_MENU_BUTTONS_NB; i++ )
005bac   6a11     clrf	0x11, 0             	CLRF	r0x01
005bae   6a12     clrf	0x12, 0             	CLRF	r0x02
005bb0   6a13     clrf	0x13, 0             	CLRF	r0x03
005bb2   6a14     clrf	0x14, 0             	CLRF	r0x04
                                           _00213_DS_:
005bb4   0e00     movlw	0                  	MOVLW	0x00
005bb6   5c14     subwf	0x14, 0, 0         	SUBWF	r0x04, W
005bb8   e102     bnz	0x5bbe               	BNZ	_00222_DS_
005bba   0e04     movlw	0x4                	MOVLW	0x04
005bbc   5c13     subwf	0x13, 0, 0         	SUBWF	r0x03, W
                                           _00222_DS_:
005bbe   e222     bc	0x5c04                	BC	_00216_DS_
                                           ;	.line	266; main.c	if ( MenuButtonPin[i] == pin_number )
005bc0   0ed6     movlw	0xd6               	MOVLW	LOW(_MenuButtonPin)
005bc2   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
005bc4   6e15     movwf	0x15, 0            	MOVWF	r0x05
005bc6   0e3f     movlw	0x3f               	MOVLW	HIGH(_MenuButtonPin)
005bc8   2014     addwfc	0x14, 0, 0        	ADDWFC	r0x04, W
005bca   6e16     movwf	0x16, 0            	MOVWF	r0x06
005bcc   6a17     clrf	0x17, 0             	CLRF	r0x07
005bce   0e00     movlw	0                  	MOVLW	UPPER(_MenuButtonPin)
005bd0   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
005bd2   c015     movff	0x15, 0xff6        	MOVFF	r0x05, TBLPTRL
005bd4   fff6
005bd6   c016     movff	0x16, 0xff7        	MOVFF	r0x06, TBLPTRH
005bd8   fff7
005bda   c017     movff	0x17, 0xff8        	MOVFF	r0x07, TBLPTRU
005bdc   fff8
005bde   0009     tblrd	*+                 	TBLRD*+	
005be0   cff5     movff	0xff5, 0x15        	MOVFF	TABLAT, r0x05
005be2   f015
005be4   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
005be6   1810     xorwf	0x10, 0, 0         	XORWF	r0x00, W
005be8   e105     bnz	0x5bf4               	BNZ	_00215_DS_
                                           ;	.line	268; main.c	return i+1;
005bea   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
005bec   6e15     movwf	0x15, 0            	MOVWF	r0x05
005bee   2a15     incf	0x15, 0x1, 0        	INCF	r0x05, F
005bf0   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
005bf2   d009     bra	0x5c06               	BRA	_00217_DS_
                                           _00215_DS_:
                                           ;	.line	264; main.c	for ( i=0; i<MAX_MENU_BUTTONS_NB; i++ )
005bf4   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
005bf6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005bf8   2a14     incf	0x14, 0x1, 0        	INCF	r0x04, F
005bfa   c013     movff	0x13, 0x11         	MOVFF	r0x03, r0x01
005bfc   f011
005bfe   c014     movff	0x14, 0x12         	MOVFF	r0x04, r0x02
005c00   f012
005c02   d7d8     bra	0x5bb4               	BRA	_00213_DS_
                                           _00216_DS_:
                                           ;	.line	271; main.c	return 0;
005c04   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00217_DS_:
005c06   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
005c08   f017
005c0a   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
005c0c   f016
005c0e   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
005c10   f015
005c12   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
005c14   f014
005c16   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
005c18   f013
005c1a   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
005c1c   f012
005c1e   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
005c20   f011
005c22   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
005c24   f010
005c26   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
005c28   ffd9
005c2a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__RelayButton	code
                                           _RelayButton:
                                           ;	.line	243; main.c	unsigned char RelayButton ( unsigned char pin_number )
005c2c   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
005c2e   ffed
005c30   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
005c32   ffd9
005c34   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
005c36   ffed
005c38   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
005c3a   ffed
005c3c   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
005c3e   ffed
005c40   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
005c42   ffed
005c44   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
005c46   ffed
005c48   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
005c4a   ffed
005c4c   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
005c4e   ffed
005c50   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
005c52   ffed
005c54   0e02     movlw	0x2                	MOVLW	0x02
005c56   cfdb     movff	0xfdb, 0x10        	MOVFF	PLUSW2, r0x00
005c58   f010
                                           ;	.line	247; main.c	for ( i=0; i<MAX_RELAY_BUTTONS_NB; i++ )
005c5a   6a11     clrf	0x11, 0             	CLRF	r0x01
005c5c   6a12     clrf	0x12, 0             	CLRF	r0x02
005c5e   6a13     clrf	0x13, 0             	CLRF	r0x03
005c60   6a14     clrf	0x14, 0             	CLRF	r0x04
                                           _00195_DS_:
005c62   0e00     movlw	0                  	MOVLW	0x00
005c64   5c14     subwf	0x14, 0, 0         	SUBWF	r0x04, W
005c66   e102     bnz	0x5c6c               	BNZ	_00204_DS_
005c68   0e08     movlw	0x8                	MOVLW	0x08
005c6a   5c13     subwf	0x13, 0, 0         	SUBWF	r0x03, W
                                           _00204_DS_:
005c6c   e222     bc	0x5cb2                	BC	_00198_DS_
                                           ;	.line	249; main.c	if ( ButtonPin[i] == pin_number )
005c6e   0ece     movlw	0xce               	MOVLW	LOW(_ButtonPin)
005c70   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
005c72   6e15     movwf	0x15, 0            	MOVWF	r0x05
005c74   0e3f     movlw	0x3f               	MOVLW	HIGH(_ButtonPin)
005c76   2014     addwfc	0x14, 0, 0        	ADDWFC	r0x04, W
005c78   6e16     movwf	0x16, 0            	MOVWF	r0x06
005c7a   6a17     clrf	0x17, 0             	CLRF	r0x07
005c7c   0e00     movlw	0                  	MOVLW	UPPER(_ButtonPin)
005c7e   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
005c80   c015     movff	0x15, 0xff6        	MOVFF	r0x05, TBLPTRL
005c82   fff6
005c84   c016     movff	0x16, 0xff7        	MOVFF	r0x06, TBLPTRH
005c86   fff7
005c88   c017     movff	0x17, 0xff8        	MOVFF	r0x07, TBLPTRU
005c8a   fff8
005c8c   0009     tblrd	*+                 	TBLRD*+	
005c8e   cff5     movff	0xff5, 0x15        	MOVFF	TABLAT, r0x05
005c90   f015
005c92   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
005c94   1810     xorwf	0x10, 0, 0         	XORWF	r0x00, W
005c96   e105     bnz	0x5ca2               	BNZ	_00197_DS_
                                           ;	.line	251; main.c	return i+1;
005c98   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
005c9a   6e15     movwf	0x15, 0            	MOVWF	r0x05
005c9c   2a15     incf	0x15, 0x1, 0        	INCF	r0x05, F
005c9e   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
005ca0   d009     bra	0x5cb4               	BRA	_00199_DS_
                                           _00197_DS_:
                                           ;	.line	247; main.c	for ( i=0; i<MAX_RELAY_BUTTONS_NB; i++ )
005ca2   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
005ca4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005ca6   2a14     incf	0x14, 0x1, 0        	INCF	r0x04, F
005ca8   c013     movff	0x13, 0x11         	MOVFF	r0x03, r0x01
005caa   f011
005cac   c014     movff	0x14, 0x12         	MOVFF	r0x04, r0x02
005cae   f012
005cb0   d7d8     bra	0x5c62               	BRA	_00195_DS_
                                           _00198_DS_:
                                           ;	.line	254; main.c	return 0;
005cb2   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00199_DS_:
005cb4   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
005cb6   f017
005cb8   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
005cba   f016
005cbc   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
005cbe   f015
005cc0   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
005cc2   f014
005cc4   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
005cc6   f013
005cc8   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
005cca   f012
005ccc   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
005cce   f011
005cd0   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
005cd2   f010
005cd4   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
005cd6   ffd9
005cd8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__FootButton	code
                                           _FootButton:
                                           ;	.line	226; main.c	unsigned char FootButton ( unsigned char pin_number )
005cda   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
005cdc   ffed
005cde   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
005ce0   ffd9
005ce2   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
005ce4   ffed
005ce6   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
005ce8   ffed
005cea   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
005cec   ffed
005cee   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
005cf0   ffed
005cf2   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
005cf4   ffed
005cf6   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
005cf8   ffed
005cfa   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
005cfc   ffed
005cfe   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
005d00   ffed
005d02   0e02     movlw	0x2                	MOVLW	0x02
005d04   cfdb     movff	0xfdb, 0x10        	MOVFF	PLUSW2, r0x00
005d06   f010
                                           ;	.line	230; main.c	for ( i=0; i<MAX_FOOTSWITCHES_NB; i++ )
005d08   6a11     clrf	0x11, 0             	CLRF	r0x01
005d0a   6a12     clrf	0x12, 0             	CLRF	r0x02
005d0c   6a13     clrf	0x13, 0             	CLRF	r0x03
005d0e   6a14     clrf	0x14, 0             	CLRF	r0x04
                                           _00177_DS_:
005d10   0e00     movlw	0                  	MOVLW	0x00
005d12   5c14     subwf	0x14, 0, 0         	SUBWF	r0x04, W
005d14   e102     bnz	0x5d1a               	BNZ	_00186_DS_
005d16   0e04     movlw	0x4                	MOVLW	0x04
005d18   5c13     subwf	0x13, 0, 0         	SUBWF	r0x03, W
                                           _00186_DS_:
005d1a   e222     bc	0x5d60                	BC	_00180_DS_
                                           ;	.line	232; main.c	if ( FootButtonPin[i] == pin_number )
005d1c   0eda     movlw	0xda               	MOVLW	LOW(_FootButtonPin)
005d1e   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
005d20   6e15     movwf	0x15, 0            	MOVWF	r0x05
005d22   0e3f     movlw	0x3f               	MOVLW	HIGH(_FootButtonPin)
005d24   2014     addwfc	0x14, 0, 0        	ADDWFC	r0x04, W
005d26   6e16     movwf	0x16, 0            	MOVWF	r0x06
005d28   6a17     clrf	0x17, 0             	CLRF	r0x07
005d2a   0e00     movlw	0                  	MOVLW	UPPER(_FootButtonPin)
005d2c   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
005d2e   c015     movff	0x15, 0xff6        	MOVFF	r0x05, TBLPTRL
005d30   fff6
005d32   c016     movff	0x16, 0xff7        	MOVFF	r0x06, TBLPTRH
005d34   fff7
005d36   c017     movff	0x17, 0xff8        	MOVFF	r0x07, TBLPTRU
005d38   fff8
005d3a   0009     tblrd	*+                 	TBLRD*+	
005d3c   cff5     movff	0xff5, 0x15        	MOVFF	TABLAT, r0x05
005d3e   f015
005d40   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
005d42   1810     xorwf	0x10, 0, 0         	XORWF	r0x00, W
005d44   e105     bnz	0x5d50               	BNZ	_00179_DS_
                                           ;	.line	234; main.c	return i+1;
005d46   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
005d48   6e15     movwf	0x15, 0            	MOVWF	r0x05
005d4a   2a15     incf	0x15, 0x1, 0        	INCF	r0x05, F
005d4c   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
005d4e   d009     bra	0x5d62               	BRA	_00181_DS_
                                           _00179_DS_:
                                           ;	.line	230; main.c	for ( i=0; i<MAX_FOOTSWITCHES_NB; i++ )
005d50   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
005d52   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005d54   2a14     incf	0x14, 0x1, 0        	INCF	r0x04, F
005d56   c013     movff	0x13, 0x11         	MOVFF	r0x03, r0x01
005d58   f011
005d5a   c014     movff	0x14, 0x12         	MOVFF	r0x04, r0x02
005d5c   f012
005d5e   d7d8     bra	0x5d10               	BRA	_00177_DS_
                                           _00180_DS_:
                                           ;	.line	237; main.c	return 0;
005d60   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00181_DS_:
005d62   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
005d64   f017
005d66   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
005d68   f016
005d6a   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
005d6c   f015
005d6e   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
005d70   f014
005d72   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
005d74   f013
005d76   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
005d78   f012
005d7a   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
005d7c   f011
005d7e   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
005d80   f010
005d82   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
005d84   ffd9
005d86   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__DoRelay	code
                                           _DoRelay:
                                           ;	.line	176; main.c	void DoRelay(unsigned char relay_nb)
004e82   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
004e84   ffed
004e86   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
004e88   ffd9
004e8a   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
004e8c   ffed
004e8e   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
004e90   ffed
004e92   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
004e94   ffed
004e96   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
004e98   ffed
004e9a   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
004e9c   ffed
004e9e   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
004ea0   ffed
004ea2   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
004ea4   ffed
004ea6   0e02     movlw	0x2                	MOVLW	0x02
004ea8   cfdb     movff	0xfdb, 0x10        	MOVFF	PLUSW2, r0x00
004eaa   f010
                                           ;	.line	178; main.c	unsigned char Found = 0;
004eac   6a11     clrf	0x11, 0             	CLRF	r0x01
                                           ;	.line	181; main.c	if ( RelayMode[relay_nb] == Free )
004eae   0e90     movlw	0x90               	MOVLW	LOW(_RelayMode)
004eb0   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004eb2   6e12     movwf	0x12, 0            	MOVWF	r0x02
004eb4   6a13     clrf	0x13, 0             	CLRF	r0x03
004eb6   0e00     movlw	0                  	MOVLW	HIGH(_RelayMode)
004eb8   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
004eba   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
004ebc   ffe1
004ebe   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
004ec0   ffe2
004ec2   cfe7     movff	0xfe7, 0x12        	MOVFF	INDF0, r0x02
004ec4   f012
004ec6   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
004ec8   e106     bnz	0x4ed6               	BNZ	_00145_DS_
                                           ;	.line	184; main.c	toggle_dout(relay_nb);
004eca   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004ecc   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004ece   ec7c     call	0x48f8, 0           	CALL	_toggle_dout
004ed0   f024
004ed2   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
004ed4   d0be     bra	0x5052               	BRA	_00151_DS_
                                           _00145_DS_:
                                           ;	.line	186; main.c	else if ( RelayMode[relay_nb] == Radio )
004ed6   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
004ed8   0a01     xorlw	0x1                	XORLW	0x01
004eda   e001     bz	0x4ede                	BZ	_00163_DS_
004edc   d0ba     bra	0x5052               	BRA	_00151_DS_
                                           _00163_DS_:
                                           ;	.line	188; main.c	if ( RelayState[relay_nb] == Active )
004ede   0e88     movlw	0x88               	MOVLW	LOW(_RelayState)
004ee0   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004ee2   6e12     movwf	0x12, 0            	MOVWF	r0x02
004ee4   6a13     clrf	0x13, 0             	CLRF	r0x03
004ee6   0e00     movlw	0                  	MOVLW	HIGH(_RelayState)
004ee8   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
004eea   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
004eec   ffe1
004eee   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
004ef0   ffe2
004ef2   cfe7     movff	0xfe7, 0x12        	MOVFF	INDF0, r0x02
004ef4   f012
004ef6   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
004ef8   0a01     xorlw	0x1                	XORLW	0x01
004efa   e106     bnz	0x4f08               	BNZ	_00159_DS_
                                           ;	.line	191; main.c	toggle_dout(relay_nb);
004efc   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004efe   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004f00   ec7c     call	0x48f8, 0           	CALL	_toggle_dout
004f02   f024
004f04   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
004f06   d0a5     bra	0x5052               	BRA	_00151_DS_
                                           _00159_DS_:
                                           ;	.line	195; main.c	for ( i=0; i<MAX_RELAYS_NB; i++ )
004f08   6a12     clrf	0x12, 0             	CLRF	r0x02
004f0a   6a13     clrf	0x13, 0             	CLRF	r0x03
                                           _00147_DS_:
004f0c   0e00     movlw	0                  	MOVLW	0x00
004f0e   5c13     subwf	0x13, 0, 0         	SUBWF	r0x03, W
004f10   e102     bnz	0x4f16               	BNZ	_00166_DS_
004f12   0e08     movlw	0x8                	MOVLW	0x08
004f14   5c12     subwf	0x12, 0, 0         	SUBWF	r0x02, W
                                           _00166_DS_:
004f16   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004f18   d095     bra	0x5044               	BRA	_00150_DS_
                                           ;	.line	197; main.c	if ( (RelayMode[i] == Radio) && (RelayState[i] == Active) )
004f1a   0e90     movlw	0x90               	MOVLW	LOW(_RelayMode)
004f1c   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
004f1e   6e14     movwf	0x14, 0            	MOVWF	r0x04
004f20   0e00     movlw	0                  	MOVLW	HIGH(_RelayMode)
004f22   2013     addwfc	0x13, 0, 0        	ADDWFC	r0x03, W
004f24   6e15     movwf	0x15, 0            	MOVWF	r0x05
004f26   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
004f28   ffe1
004f2a   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
004f2c   ffe2
004f2e   cfe7     movff	0xfe7, 0x14        	MOVFF	INDF0, r0x04
004f30   f014
004f32   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
004f34   0a01     xorlw	0x1                	XORLW	0x01
004f36   e001     bz	0x4f3a                	BZ	_00168_DS_
004f38   d081     bra	0x503c               	BRA	_00149_DS_
                                           _00168_DS_:
004f3a   0e88     movlw	0x88               	MOVLW	LOW(_RelayState)
004f3c   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
004f3e   6e14     movwf	0x14, 0            	MOVWF	r0x04
004f40   0e00     movlw	0                  	MOVLW	HIGH(_RelayState)
004f42   2013     addwfc	0x13, 0, 0        	ADDWFC	r0x03, W
004f44   6e15     movwf	0x15, 0            	MOVWF	r0x05
004f46   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
004f48   ffe1
004f4a   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
004f4c   ffe2
004f4e   cfe7     movff	0xfe7, 0x14        	MOVFF	INDF0, r0x04
004f50   f014
004f52   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
004f54   0a01     xorlw	0x1                	XORLW	0x01
004f56   e001     bz	0x4f5a                	BZ	_00170_DS_
004f58   d071     bra	0x503c               	BRA	_00149_DS_
                                           _00170_DS_:
                                           ;	.line	201; main.c	MIOS_DOUT_PinSet0(RelayLedPin[i]);		
004f5a   0eba     movlw	0xba               	MOVLW	LOW(_RelayLedPin)
004f5c   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
004f5e   6e14     movwf	0x14, 0            	MOVWF	r0x04
004f60   0e3f     movlw	0x3f               	MOVLW	HIGH(_RelayLedPin)
004f62   2013     addwfc	0x13, 0, 0        	ADDWFC	r0x03, W
004f64   6e15     movwf	0x15, 0            	MOVWF	r0x05
004f66   6a16     clrf	0x16, 0             	CLRF	r0x06
004f68   0e00     movlw	0                  	MOVLW	UPPER(_RelayLedPin)
004f6a   2216     addwfc	0x16, 0x1, 0      	ADDWFC	r0x06, F
004f6c   c014     movff	0x14, 0xff6        	MOVFF	r0x04, TBLPTRL
004f6e   fff6
004f70   c015     movff	0x15, 0xff7        	MOVFF	r0x05, TBLPTRH
004f72   fff7
004f74   c016     movff	0x16, 0xff8        	MOVFF	r0x06, TBLPTRU
004f76   fff8
004f78   0009     tblrd	*+                 	TBLRD*+	
004f7a   cff5     movff	0xff5, 0x14        	MOVFF	TABLAT, r0x04
004f7c   f014
004f7e   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
004f80   ec62     call	0x2cc4, 0           	CALL	_MIOS_DOUT_PinSet0
004f82   f016
                                           ;	.line	203; main.c	MIOS_DOUT_PinSet1(RelayPin[relay_nb]);
004f84   0ec2     movlw	0xc2               	MOVLW	LOW(_RelayPin)
004f86   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004f88   6e14     movwf	0x14, 0            	MOVWF	r0x04
004f8a   6a15     clrf	0x15, 0             	CLRF	r0x05
004f8c   0e3f     movlw	0x3f               	MOVLW	HIGH(_RelayPin)
004f8e   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
004f90   6a16     clrf	0x16, 0             	CLRF	r0x06
004f92   0e00     movlw	0                  	MOVLW	UPPER(_RelayPin)
004f94   2216     addwfc	0x16, 0x1, 0      	ADDWFC	r0x06, F
004f96   c014     movff	0x14, 0xff6        	MOVFF	r0x04, TBLPTRL
004f98   fff6
004f9a   c015     movff	0x15, 0xff7        	MOVFF	r0x05, TBLPTRH
004f9c   fff7
004f9e   c016     movff	0x16, 0xff8        	MOVFF	r0x06, TBLPTRU
004fa0   fff8
004fa2   0009     tblrd	*+                 	TBLRD*+	
004fa4   cff5     movff	0xff5, 0x14        	MOVFF	TABLAT, r0x04
004fa6   f014
004fa8   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
004faa   ec64     call	0x2cc8, 0           	CALL	_MIOS_DOUT_PinSet1
004fac   f016
                                           ;	.line	204; main.c	MIOS_Delay(200);
004fae   0ec8     movlw	0xc8               	MOVLW	0xc8
004fb0   ecce     call	0x2d9c, 0           	CALL	_MIOS_Delay
004fb2   f016
                                           ;	.line	205; main.c	MIOS_DOUT_PinSet0(RelayPin[relay_nb]);			
004fb4   0ec2     movlw	0xc2               	MOVLW	LOW(_RelayPin)
004fb6   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004fb8   6e14     movwf	0x14, 0            	MOVWF	r0x04
004fba   6a15     clrf	0x15, 0             	CLRF	r0x05
004fbc   0e3f     movlw	0x3f               	MOVLW	HIGH(_RelayPin)
004fbe   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
004fc0   6a16     clrf	0x16, 0             	CLRF	r0x06
004fc2   0e00     movlw	0                  	MOVLW	UPPER(_RelayPin)
004fc4   2216     addwfc	0x16, 0x1, 0      	ADDWFC	r0x06, F
004fc6   c014     movff	0x14, 0xff6        	MOVFF	r0x04, TBLPTRL
004fc8   fff6
004fca   c015     movff	0x15, 0xff7        	MOVFF	r0x05, TBLPTRH
004fcc   fff7
004fce   c016     movff	0x16, 0xff8        	MOVFF	r0x06, TBLPTRU
004fd0   fff8
004fd2   0009     tblrd	*+                 	TBLRD*+	
004fd4   cff5     movff	0xff5, 0x14        	MOVFF	TABLAT, r0x04
004fd6   f014
004fd8   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
004fda   ec62     call	0x2cc4, 0           	CALL	_MIOS_DOUT_PinSet0
004fdc   f016
                                           ;	.line	207; main.c	MIOS_DOUT_PinSet1(RelayLedPin[relay_nb]);		
004fde   0eba     movlw	0xba               	MOVLW	LOW(_RelayLedPin)
004fe0   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004fe2   6e14     movwf	0x14, 0            	MOVWF	r0x04
004fe4   6a15     clrf	0x15, 0             	CLRF	r0x05
004fe6   0e3f     movlw	0x3f               	MOVLW	HIGH(_RelayLedPin)
004fe8   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
004fea   6a16     clrf	0x16, 0             	CLRF	r0x06
004fec   0e00     movlw	0                  	MOVLW	UPPER(_RelayLedPin)
004fee   2216     addwfc	0x16, 0x1, 0      	ADDWFC	r0x06, F
004ff0   c014     movff	0x14, 0xff6        	MOVFF	r0x04, TBLPTRL
004ff2   fff6
004ff4   c015     movff	0x15, 0xff7        	MOVFF	r0x05, TBLPTRH
004ff6   fff7
004ff8   c016     movff	0x16, 0xff8        	MOVFF	r0x06, TBLPTRU
004ffa   fff8
004ffc   0009     tblrd	*+                 	TBLRD*+	
004ffe   cff5     movff	0xff5, 0x14        	MOVFF	TABLAT, r0x04
005000   f014
005002   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
005004   ec64     call	0x2cc8, 0           	CALL	_MIOS_DOUT_PinSet1
005006   f016
                                           ;	.line	208; main.c	Found = 1;
005008   0e01     movlw	0x1                	MOVLW	0x01
00500a   6e11     movwf	0x11, 0            	MOVWF	r0x01
                                           ;	.line	210; main.c	RelayState[i] = Inactive;
00500c   0e88     movlw	0x88               	MOVLW	LOW(_RelayState)
00500e   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
005010   6e14     movwf	0x14, 0            	MOVWF	r0x04
005012   0e00     movlw	0                  	MOVLW	HIGH(_RelayState)
005014   2013     addwfc	0x13, 0, 0        	ADDWFC	r0x03, W
005016   6e15     movwf	0x15, 0            	MOVWF	r0x05
005018   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
00501a   ffe1
00501c   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
00501e   ffe2
005020   0e00     movlw	0                  	MOVLW	0x00
005022   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	211; main.c	RelayState[relay_nb] = Active;
005024   0e88     movlw	0x88               	MOVLW	LOW(_RelayState)
005026   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
005028   6e14     movwf	0x14, 0            	MOVWF	r0x04
00502a   6a15     clrf	0x15, 0             	CLRF	r0x05
00502c   0e00     movlw	0                  	MOVLW	HIGH(_RelayState)
00502e   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
005030   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
005032   ffe1
005034   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
005036   ffe2
005038   0e01     movlw	0x1                	MOVLW	0x01
00503a   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           _00149_DS_:
                                           ;	.line	195; main.c	for ( i=0; i<MAX_RELAYS_NB; i++ )
00503c   2a12     incf	0x12, 0x1, 0        	INCF	r0x02, F
00503e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005040   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
005042   d764     bra	0x4f0c               	BRA	_00147_DS_
                                           _00150_DS_:
                                           ;	.line	214; main.c	if ( Found == 0 )
005044   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
005046   e105     bnz	0x5052               	BNZ	_00151_DS_
                                           ;	.line	217; main.c	toggle_dout(relay_nb);
005048   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00504a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00504c   ec7c     call	0x48f8, 0           	CALL	_toggle_dout
00504e   f024
005050   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           _00151_DS_:
005052   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
005054   f016
005056   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
005058   f015
00505a   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
00505c   f014
00505e   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
005060   f013
005062   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
005064   f012
005066   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
005068   f011
00506a   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
00506c   f010
00506e   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
005070   ffd9
005072   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__toggle_dout	code
                                           _toggle_dout:
                                           ;	.line	115; main.c	void toggle_dout(unsigned char relay_nb)
0048f8   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
0048fa   ffed
0048fc   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
0048fe   ffd9
004900   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
004902   ffed
004904   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
004906   ffed
004908   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
00490a   ffed
00490c   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
00490e   ffed
004910   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
004912   ffed
004914   0e02     movlw	0x2                	MOVLW	0x02
004916   cfdb     movff	0xfdb, 0x10        	MOVFF	PLUSW2, r0x00
004918   f010
                                           ;	.line	117; main.c	if ( RelayType[relay_nb] == Toggle )
00491a   0e80     movlw	0x80               	MOVLW	LOW(_RelayType)
00491c   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
00491e   6e11     movwf	0x11, 0            	MOVWF	r0x01
004920   6a12     clrf	0x12, 0             	CLRF	r0x02
004922   0e00     movlw	0                  	MOVLW	HIGH(_RelayType)
004924   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
004926   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
004928   ffe1
00492a   c012     movff	0x12, 0xfe2        	MOVFF	r0x02, FSR0H
00492c   ffe2
00492e   cfe7     movff	0xfe7, 0x11        	MOVFF	INDF0, r0x01
004930   f011
004932   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004934   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
004936   d08d     bra	0x4a52               	BRA	_00111_DS_
                                           ;	.line	120; main.c	DEBUG_MSG_SendHeader();
004938   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
00493a   f02b
                                           ;	.line	121; main.c	DEBUG_MSG_SendCString("Relay");
00493c   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
00493e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004940   0e3f     movlw	0x3f               	MOVLW	HIGH(__str_0)
004942   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004944   0ede     movlw	0xde               	MOVLW	LOW(__str_0)
004946   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004948   f02b
00494a   0e02     movlw	0x2                	MOVLW	0x02
00494c   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	122; main.c	DEBUG_MSG_SendBCD3(relay_nb);
00494e   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004950   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004952   f02b
                                           ;	.line	123; main.c	DEBUG_MSG_SendCString(" original state");
004954   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
004956   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004958   0e3f     movlw	0x3f               	MOVLW	HIGH(__str_1)
00495a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00495c   0ee4     movlw	0xe4               	MOVLW	LOW(__str_1)
00495e   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004960   f02b
004962   0e02     movlw	0x2                	MOVLW	0x02
004964   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	124; main.c	DEBUG_MSG_SendBCD3(RelayState[relay_nb]);
004966   0e88     movlw	0x88               	MOVLW	LOW(_RelayState)
004968   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
00496a   6e12     movwf	0x12, 0            	MOVWF	r0x02
00496c   6a13     clrf	0x13, 0             	CLRF	r0x03
00496e   0e00     movlw	0                  	MOVLW	HIGH(_RelayState)
004970   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
004972   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
004974   ffe1
004976   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
004978   ffe2
00497a   cfe7     movff	0xfe7, 0x12        	MOVFF	INDF0, r0x02
00497c   f012
00497e   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
004980   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004982   f02b
                                           ;	.line	125; main.c	DEBUG_MSG_SendFooter();
004984   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
004986   f02b
                                           ;	.line	129; main.c	MIOS_DOUT_PinSet(RelayPin[relay_nb], RelayState[relay_nb] ? 0 : 1);
004988   0ec2     movlw	0xc2               	MOVLW	LOW(_RelayPin)
00498a   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
00498c   6e12     movwf	0x12, 0            	MOVWF	r0x02
00498e   6a13     clrf	0x13, 0             	CLRF	r0x03
004990   0e3f     movlw	0x3f               	MOVLW	HIGH(_RelayPin)
004992   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
004994   6a14     clrf	0x14, 0             	CLRF	r0x04
004996   0e00     movlw	0                  	MOVLW	UPPER(_RelayPin)
004998   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
00499a   c012     movff	0x12, 0xff6        	MOVFF	r0x02, TBLPTRL
00499c   fff6
00499e   c013     movff	0x13, 0xff7        	MOVFF	r0x03, TBLPTRH
0049a0   fff7
0049a2   c014     movff	0x14, 0xff8        	MOVFF	r0x04, TBLPTRU
0049a4   fff8
0049a6   0009     tblrd	*+                 	TBLRD*+	
0049a8   cff5     movff	0xff5, 0x12        	MOVFF	TABLAT, r0x02
0049aa   f012
0049ac   0e88     movlw	0x88               	MOVLW	LOW(_RelayState)
0049ae   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
0049b0   6e13     movwf	0x13, 0            	MOVWF	r0x03
0049b2   6a14     clrf	0x14, 0             	CLRF	r0x04
0049b4   0e00     movlw	0                  	MOVLW	HIGH(_RelayState)
0049b6   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
0049b8   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
0049ba   ffe1
0049bc   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
0049be   ffe2
0049c0   cfe7     movff	0xfe7, 0x13        	MOVFF	INDF0, r0x03
0049c2   f013
0049c4   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0049c6   e002     bz	0x49cc                	BZ	_00118_DS_
0049c8   6a13     clrf	0x13, 0             	CLRF	r0x03
0049ca   d002     bra	0x49d0               	BRA	_00119_DS_
                                           _00118_DS_:
0049cc   0e01     movlw	0x1                	MOVLW	0x01
0049ce   6e13     movwf	0x13, 0            	MOVWF	r0x03
                                           _00119_DS_:
0049d0   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0049d2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0049d4   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0049d6   ec59     call	0x62b2, 0           	CALL	_MIOS_DOUT_PinSet
0049d8   f031
0049da   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	131; main.c	MIOS_DOUT_PinSet(RelayLedPin[relay_nb], RelayState[relay_nb] ? 0 : 1);
0049dc   0eba     movlw	0xba               	MOVLW	LOW(_RelayLedPin)
0049de   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
0049e0   6e12     movwf	0x12, 0            	MOVWF	r0x02
0049e2   6a13     clrf	0x13, 0             	CLRF	r0x03
0049e4   0e3f     movlw	0x3f               	MOVLW	HIGH(_RelayLedPin)
0049e6   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
0049e8   6a14     clrf	0x14, 0             	CLRF	r0x04
0049ea   0e00     movlw	0                  	MOVLW	UPPER(_RelayLedPin)
0049ec   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
0049ee   c012     movff	0x12, 0xff6        	MOVFF	r0x02, TBLPTRL
0049f0   fff6
0049f2   c013     movff	0x13, 0xff7        	MOVFF	r0x03, TBLPTRH
0049f4   fff7
0049f6   c014     movff	0x14, 0xff8        	MOVFF	r0x04, TBLPTRU
0049f8   fff8
0049fa   0009     tblrd	*+                 	TBLRD*+	
0049fc   cff5     movff	0xff5, 0x12        	MOVFF	TABLAT, r0x02
0049fe   f012
004a00   0e88     movlw	0x88               	MOVLW	LOW(_RelayState)
004a02   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004a04   6e13     movwf	0x13, 0            	MOVWF	r0x03
004a06   6a14     clrf	0x14, 0             	CLRF	r0x04
004a08   0e00     movlw	0                  	MOVLW	HIGH(_RelayState)
004a0a   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
004a0c   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
004a0e   ffe1
004a10   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
004a12   ffe2
004a14   cfe7     movff	0xfe7, 0x13        	MOVFF	INDF0, r0x03
004a16   f013
004a18   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004a1a   e002     bz	0x4a20                	BZ	_00120_DS_
004a1c   6a13     clrf	0x13, 0             	CLRF	r0x03
004a1e   d002     bra	0x4a24               	BRA	_00121_DS_
                                           _00120_DS_:
004a20   0e01     movlw	0x1                	MOVLW	0x01
004a22   6e13     movwf	0x13, 0            	MOVWF	r0x03
                                           _00121_DS_:
004a24   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004a26   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004a28   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
004a2a   ec59     call	0x62b2, 0           	CALL	_MIOS_DOUT_PinSet
004a2c   f031
004a2e   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	134; main.c	DEBUG_MSG_SendHeader();
004a30   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
004a32   f02b
                                           ;	.line	135; main.c	DEBUG_MSG_SendCString("Toggled relay");
004a34   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
004a36   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004a38   0e3f     movlw	0x3f               	MOVLW	HIGH(__str_2)
004a3a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004a3c   0ef4     movlw	0xf4               	MOVLW	LOW(__str_2)
004a3e   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004a40   f02b
004a42   0e02     movlw	0x2                	MOVLW	0x02
004a44   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	136; main.c	DEBUG_MSG_SendBCD3(relay_nb);
004a46   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004a48   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004a4a   f02b
                                           ;	.line	137; main.c	DEBUG_MSG_SendFooter();
004a4c   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
004a4e   f02b
004a50   d07a     bra	0x4b46               	BRA	_00112_DS_
                                           _00111_DS_:
                                           ;	.line	140; main.c	else if ( RelayType[relay_nb] == Momentary )
004a52   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004a54   0a01     xorlw	0x1                	XORLW	0x01
004a56   e001     bz	0x4a5a                	BZ	_00129_DS_
004a58   d076     bra	0x4b46               	BRA	_00112_DS_
                                           _00129_DS_:
                                           ;	.line	143; main.c	MIOS_DOUT_PinSet1(RelayPin[relay_nb]);
004a5a   0ec2     movlw	0xc2               	MOVLW	LOW(_RelayPin)
004a5c   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004a5e   6e11     movwf	0x11, 0            	MOVWF	r0x01
004a60   6a12     clrf	0x12, 0             	CLRF	r0x02
004a62   0e3f     movlw	0x3f               	MOVLW	HIGH(_RelayPin)
004a64   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
004a66   6a13     clrf	0x13, 0             	CLRF	r0x03
004a68   0e00     movlw	0                  	MOVLW	UPPER(_RelayPin)
004a6a   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
004a6c   c011     movff	0x11, 0xff6        	MOVFF	r0x01, TBLPTRL
004a6e   fff6
004a70   c012     movff	0x12, 0xff7        	MOVFF	r0x02, TBLPTRH
004a72   fff7
004a74   c013     movff	0x13, 0xff8        	MOVFF	r0x03, TBLPTRU
004a76   fff8
004a78   0009     tblrd	*+                 	TBLRD*+	
004a7a   cff5     movff	0xff5, 0x11        	MOVFF	TABLAT, r0x01
004a7c   f011
004a7e   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004a80   ec64     call	0x2cc8, 0           	CALL	_MIOS_DOUT_PinSet1
004a82   f016
                                           ;	.line	144; main.c	MIOS_Delay(MOMENTARY_PUSH_LENGTH);
004a84   0ec8     movlw	0xc8               	MOVLW	0xc8
004a86   ecce     call	0x2d9c, 0           	CALL	_MIOS_Delay
004a88   f016
                                           ;	.line	145; main.c	MIOS_DOUT_PinSet0(RelayPin[relay_nb]);
004a8a   0ec2     movlw	0xc2               	MOVLW	LOW(_RelayPin)
004a8c   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004a8e   6e11     movwf	0x11, 0            	MOVWF	r0x01
004a90   6a12     clrf	0x12, 0             	CLRF	r0x02
004a92   0e3f     movlw	0x3f               	MOVLW	HIGH(_RelayPin)
004a94   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
004a96   6a13     clrf	0x13, 0             	CLRF	r0x03
004a98   0e00     movlw	0                  	MOVLW	UPPER(_RelayPin)
004a9a   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
004a9c   c011     movff	0x11, 0xff6        	MOVFF	r0x01, TBLPTRL
004a9e   fff6
004aa0   c012     movff	0x12, 0xff7        	MOVFF	r0x02, TBLPTRH
004aa2   fff7
004aa4   c013     movff	0x13, 0xff8        	MOVFF	r0x03, TBLPTRU
004aa6   fff8
004aa8   0009     tblrd	*+                 	TBLRD*+	
004aaa   cff5     movff	0xff5, 0x11        	MOVFF	TABLAT, r0x01
004aac   f011
004aae   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004ab0   ec62     call	0x2cc4, 0           	CALL	_MIOS_DOUT_PinSet0
004ab2   f016
                                           ;	.line	147; main.c	if ( RelayState[relay_nb] == Inactive )
004ab4   0e88     movlw	0x88               	MOVLW	LOW(_RelayState)
004ab6   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004ab8   6e11     movwf	0x11, 0            	MOVWF	r0x01
004aba   6a12     clrf	0x12, 0             	CLRF	r0x02
004abc   0e00     movlw	0                  	MOVLW	HIGH(_RelayState)
004abe   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
004ac0   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
004ac2   ffe1
004ac4   c012     movff	0x12, 0xfe2        	MOVFF	r0x02, FSR0H
004ac6   ffe2
004ac8   cfe7     movff	0xfe7, 0x11        	MOVFF	INDF0, r0x01
004aca   f011
004acc   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004ace   e116     bnz	0x4afc               	BNZ	_00106_DS_
                                           ;	.line	148; main.c	MIOS_DOUT_PinSet1(RelayLedPin[relay_nb]);
004ad0   0eba     movlw	0xba               	MOVLW	LOW(_RelayLedPin)
004ad2   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004ad4   6e11     movwf	0x11, 0            	MOVWF	r0x01
004ad6   6a12     clrf	0x12, 0             	CLRF	r0x02
004ad8   0e3f     movlw	0x3f               	MOVLW	HIGH(_RelayLedPin)
004ada   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
004adc   6a13     clrf	0x13, 0             	CLRF	r0x03
004ade   0e00     movlw	0                  	MOVLW	UPPER(_RelayLedPin)
004ae0   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
004ae2   c011     movff	0x11, 0xff6        	MOVFF	r0x01, TBLPTRL
004ae4   fff6
004ae6   c012     movff	0x12, 0xff7        	MOVFF	r0x02, TBLPTRH
004ae8   fff7
004aea   c013     movff	0x13, 0xff8        	MOVFF	r0x03, TBLPTRU
004aec   fff8
004aee   0009     tblrd	*+                 	TBLRD*+	
004af0   cff5     movff	0xff5, 0x11        	MOVFF	TABLAT, r0x01
004af2   f011
004af4   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004af6   ec64     call	0x2cc8, 0           	CALL	_MIOS_DOUT_PinSet1
004af8   f016
004afa   d015     bra	0x4b26               	BRA	_00107_DS_
                                           _00106_DS_:
                                           ;	.line	150; main.c	MIOS_DOUT_PinSet0(RelayLedPin[relay_nb]);
004afc   0eba     movlw	0xba               	MOVLW	LOW(_RelayLedPin)
004afe   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004b00   6e11     movwf	0x11, 0            	MOVWF	r0x01
004b02   6a12     clrf	0x12, 0             	CLRF	r0x02
004b04   0e3f     movlw	0x3f               	MOVLW	HIGH(_RelayLedPin)
004b06   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
004b08   6a13     clrf	0x13, 0             	CLRF	r0x03
004b0a   0e00     movlw	0                  	MOVLW	UPPER(_RelayLedPin)
004b0c   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
004b0e   c011     movff	0x11, 0xff6        	MOVFF	r0x01, TBLPTRL
004b10   fff6
004b12   c012     movff	0x12, 0xff7        	MOVFF	r0x02, TBLPTRH
004b14   fff7
004b16   c013     movff	0x13, 0xff8        	MOVFF	r0x03, TBLPTRU
004b18   fff8
004b1a   0009     tblrd	*+                 	TBLRD*+	
004b1c   cff5     movff	0xff5, 0x11        	MOVFF	TABLAT, r0x01
004b1e   f011
004b20   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004b22   ec62     call	0x2cc4, 0           	CALL	_MIOS_DOUT_PinSet0
004b24   f016
                                           _00107_DS_:
                                           ;	.line	153; main.c	DEBUG_MSG_SendHeader();
004b26   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
004b28   f02b
                                           ;	.line	154; main.c	DEBUG_MSG_SendCString("Pushed relay");
004b2a   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
004b2c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004b2e   0e40     movlw	0x40               	MOVLW	HIGH(__str_3)
004b30   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004b32   0e02     movlw	0x2                	MOVLW	LOW(__str_3)
004b34   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004b36   f02b
004b38   0e02     movlw	0x2                	MOVLW	0x02
004b3a   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	155; main.c	DEBUG_MSG_SendBCD3(relay_nb);
004b3c   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004b3e   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004b40   f02b
                                           ;	.line	156; main.c	DEBUG_MSG_SendFooter();
004b42   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
004b44   f02b
                                           _00112_DS_:
                                           ;	.line	161; main.c	if ( RelayState[relay_nb] )
004b46   0e88     movlw	0x88               	MOVLW	LOW(_RelayState)
004b48   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004b4a   6e11     movwf	0x11, 0            	MOVWF	r0x01
004b4c   6a12     clrf	0x12, 0             	CLRF	r0x02
004b4e   0e00     movlw	0                  	MOVLW	HIGH(_RelayState)
004b50   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
004b52   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
004b54   ffe1
004b56   c012     movff	0x12, 0xfe2        	MOVFF	r0x02, FSR0H
004b58   ffe2
004b5a   cfe7     movff	0xfe7, 0x13        	MOVFF	INDF0, r0x03
004b5c   f013
004b5e   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004b60   e007     bz	0x4b70                	BZ	_00114_DS_
                                           ;	.line	162; main.c	{ RelayState[relay_nb] = 0;	}
004b62   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
004b64   ffe1
004b66   c012     movff	0x12, 0xfe2        	MOVFF	r0x02, FSR0H
004b68   ffe2
004b6a   0e00     movlw	0                  	MOVLW	0x00
004b6c   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
004b6e   d006     bra	0x4b7c               	BRA	_00115_DS_
                                           _00114_DS_:
                                           ;	.line	164; main.c	{ RelayState[relay_nb] = 1; }
004b70   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
004b72   ffe1
004b74   c012     movff	0x12, 0xfe2        	MOVFF	r0x02, FSR0H
004b76   ffe2
004b78   0e01     movlw	0x1                	MOVLW	0x01
004b7a   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           _00115_DS_:
                                           ;	.line	167; main.c	DEBUG_MSG_SendHeader();
004b7c   ec3c     call	0x5678, 0           	CALL	_DEBUG_MSG_SendHeader
004b7e   f02b
                                           ;	.line	168; main.c	DEBUG_MSG_SendCString(" to state");
004b80   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
004b82   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004b84   0e40     movlw	0x40               	MOVLW	HIGH(__str_4)
004b86   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004b88   0e10     movlw	0x10               	MOVLW	LOW(__str_4)
004b8a   ecbb     call	0x5776, 0           	CALL	_DEBUG_MSG_SendCString
004b8c   f02b
004b8e   0e02     movlw	0x2                	MOVLW	0x02
004b90   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	169; main.c	DEBUG_MSG_SendBCD3(RelayState[relay_nb]);
004b92   6a11     clrf	0x11, 0             	CLRF	r0x01
004b94   0e88     movlw	0x88               	MOVLW	LOW(_RelayState)
004b96   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
004b98   0e00     movlw	0                  	MOVLW	HIGH(_RelayState)
004b9a   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004b9c   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
004b9e   ffe1
004ba0   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
004ba2   ffe2
004ba4   cfe7     movff	0xfe7, 0x10        	MOVFF	INDF0, r0x00
004ba6   f010
004ba8   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004baa   ec88     call	0x5710, 0           	CALL	_DEBUG_MSG_SendBCD3
004bac   f02b
                                           ;	.line	170; main.c	DEBUG_MSG_SendFooter();
004bae   ec56     call	0x56ac, 0           	CALL	_DEBUG_MSG_SendFooter
004bb0   f02b
004bb2   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
004bb4   f014
004bb6   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
004bb8   f013
004bba   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
004bbc   f012
004bbe   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
004bc0   f011
004bc2   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
004bc4   f010
004bc6   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004bc8   ffd9
004bca   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _RelayLedPin:
003fba   0100     movlb	0                  	DB	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
003fbc   0302     mulwf	0x2, 0x1           
003fbe   0504     decf	0x4, 0, 0x1         
003fc0   0706     decf	0x6, 0x1, 0x1       
                                           ; ; Starting pCode block for Ival
                                           _RelayPin:
003fc2   0908     iorlw	0x8                	DB	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
003fc4   0b0a     andlw	0xa                
003fc6   0d0c     mullw	0xc                
003fc8   0f0e     addlw	0xe                
                                           ; ; Starting pCode block for Ival
                                           _FootLedPin:
003fca   1617     andwf	0x17, 0x1, 0       	DB	0x17, 0x16, 0x15, 0x14
003fcc   1415     andwf	0x15, 0, 0         
                                           ; ; Starting pCode block for Ival
                                           _ButtonPin:
003fce   0100     movlb	0                  	DB	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
003fd0   0302     mulwf	0x2, 0x1           
003fd2   0504     decf	0x4, 0, 0x1         
003fd4   0706     decf	0x6, 0x1, 0x1       
                                           ; ; Starting pCode block for Ival
                                           _MenuButtonPin:
003fd6   0a0b     xorlw	0xb                	DB	0x0b, 0x0a, 0x08, 0x09
003fd8   0908     iorlw	0x8                
                                           ; ; Starting pCode block for Ival
                                           _FootButtonPin:
003fda   0f0e     addlw	0xe                	DB	0x0e, 0x0f, 0x0d, 0x0c
003fdc   0c0d     retlw	0xd                
                                           ; ; Starting pCode block
                                           __str_0:
003fde   6552     cpfsgt	0x52, 0x1         	DB	0x52, 0x65, 0x6c, 0x61, 0x79, 0x00
003fe0   616c     cpfslt	0x6c, 0x1         
003fe2   0079     dw	0x79  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_1:
003fe4   6f20     movwf	0x20, 0x1          	DB	0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x74
003fe6   6972     setf	0x72, 0x1           
003fe8   6967     setf	0x67, 0x1           
003fea   616e     cpfslt	0x6e, 0x1         
003fec   206c     addwfc	0x6c, 0, 0        
003fee   7473     btg	0x73, 0x2, 0         
003ff0   7461     btg	0x61, 0x2, 0         	DB	0x61, 0x74, 0x65, 0x00
003ff2   0065     dw	0x65  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_2:
003ff4   6f54     movwf	0x54, 0x1          	DB	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x64, 0x20, 0x72, 0x65, 0x6c, 0x61
003ff6   6767     tstfsz	0x67, 0x1         
003ff8   656c     cpfsgt	0x6c, 0x1         
003ffa   2064     addwfc	0x64, 0, 0        
003ffc   6572     cpfsgt	0x72, 0x1         
003ffe   616c     cpfslt	0x6c, 0x1         
004000   0079     dw	0x79  ;unknown opcode 	DB	0x79, 0x00
                                           ; ; Starting pCode block
                                           __str_3:
004002   7550     btg	0x50, 0x2, 0x1       	DB	0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x79
004004   6873     setf	0x73, 0             
004006   6465     cpfsgt	0x65, 0           
004008   7220     btg	0x20, 0x1, 0         
00400a   6c65     negf	0x65, 0             
00400c   7961     btg	0x61, 0x4, 0x1       
00400e   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_4:
004010   7420     btg	0x20, 0x2, 0         	DB	0x20, 0x74, 0x6f, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x00
004012   206f     addwfc	0x6f, 0, 0        
004014   7473     btg	0x73, 0x2, 0         
004016   7461     btg	0x61, 0x2, 0         
004018   0065     dw	0x65  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_5:
00401a   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x74, 0x20, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x70
00401c   2074     addwfc	0x74, 0, 0        
00401e   6341     cpfseq	0x41, 0x1         
004020   6974     setf	0x74, 0x1           
004022   6576     cpfsgt	0x76, 0x1         
004024   7020     btg	0x20, 0, 0           
004026   6572     cpfsgt	0x72, 0x1         	DB	0x72, 0x65, 0x73, 0x65, 0x74, 0x00
004028   6573     cpfsgt	0x73, 0x1         
00402a   0074     dw	0x74  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_6:
00402c   2a2a     incf	0x2a, 0x1, 0        	DB	0x2a, 0x2a, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x74, 0x6f
00402e   4320     rrncf	0x20, 0x1, 0x1     
004030   6168     cpfslt	0x68, 0x1         
004032   676e     tstfsz	0x6e, 0x1         
004034   2065     addwfc	0x65, 0, 0        
004036   6f74     movwf	0x74, 0x1          
004038   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x2a, 0x2a, 0x00
00403a   2a2a     incf	0x2a, 0x1, 0        
00403c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_7:
00403e   2a2a     incf	0x2a, 0x1, 0        	DB	0x2a, 0x2a, 0x20, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x20, 0x20
004040   5020     movf	0x20, 0, 0          
004042   6572     cpfsgt	0x72, 0x1         
004044   6573     cpfsgt	0x73, 0x1         
004046   2074     addwfc	0x74, 0, 0        
004048   2020     addwfc	0x20, 0, 0        
00404a   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x2a, 0x2a, 0x00
00404c   2a2a     incf	0x2a, 0x1, 0        
00404e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_8:
004050   6f46     movwf	0x46, 0x1          	DB	0x46, 0x6f, 0x6f, 0x74, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x20, 0x4c
004052   746f     btg	0x6f, 0x2, 0         
004054   7773     btg	0x73, 0x3, 0x1       
004056   7469     btg	0x69, 0x2, 0         
004058   6863     setf	0x63, 0             
00405a   4c20     dcfsnz	0x20, 0, 0        
00405c   6465     cpfsgt	0x65, 0           	DB	0x65, 0x64, 0x73, 0x20, 0x4f, 0x66, 0x66, 0x00
00405e   2073     addwfc	0x73, 0, 0        
004060   664f     tstfsz	0x4f, 0           
004062   0066     dw	0x66  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_9:
004064   6f46     movwf	0x46, 0x1          	DB	0x46, 0x6f, 0x6f, 0x74, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x20, 0x4c
004066   746f     btg	0x6f, 0x2, 0         
004068   7773     btg	0x73, 0x3, 0x1       
00406a   7469     btg	0x69, 0x2, 0         
00406c   6863     setf	0x63, 0             
00406e   4c20     dcfsnz	0x20, 0, 0        
004070   6465     cpfsgt	0x65, 0           	DB	0x65, 0x64, 0x3a, 0x20, 0x00
004072   203a     addwfc	0x3a, 0, 0        
004074   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_10:
004076   4f20     dcfsnz	0x20, 0x1, 0x1    	DB	0x20, 0x4f, 0x6e, 0x00
004078   006e     dw	0x6e  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_11:
00407a   6552     cpfsgt	0x52, 0x1         	DB	0x52, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x63
00407c   6f4c     movwf	0x4c, 0x1          
00407e   6461     cpfsgt	0x61, 0           
004080   6e69     movwf	0x69, 0            
004082   2067     addwfc	0x67, 0, 0        
004084   6361     cpfseq	0x61, 0x1         
004086   6974     setf	0x74, 0x1           	DB	0x74, 0x69, 0x76, 0x65, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x00
004088   6576     cpfsgt	0x76, 0x1         
00408a   7020     btg	0x20, 0, 0           
00408c   6572     cpfsgt	0x72, 0x1         
00408e   6573     cpfsgt	0x73, 0x1         
004090   0074     dw	0x74  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_12:
004092   4f4e     dcfsnz	0x4e, 0x1, 0x1    	DB	0x4e, 0x4f, 0x54, 0x20, 0x52, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e
004094   2054     addwfc	0x54, 0, 0        
004096   6552     cpfsgt	0x52, 0x1         
004098   6f4c     movwf	0x4c, 0x1          
00409a   6461     cpfsgt	0x61, 0           
00409c   6e69     movwf	0x69, 0            
00409e   2067     addwfc	0x67, 0, 0        	DB	0x67, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x70, 0x72, 0x65
0040a0   6361     cpfseq	0x61, 0x1         
0040a2   6974     setf	0x74, 0x1           
0040a4   6576     cpfsgt	0x76, 0x1         
0040a6   7020     btg	0x20, 0, 0           
0040a8   6572     cpfsgt	0x72, 0x1         
0040aa   6573     cpfsgt	0x73, 0x1         	DB	0x73, 0x65, 0x74, 0x00
0040ac   0074     dw	0x74  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_13:
0040ae   6f4c     movwf	0x4c, 0x1          	DB	0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x72, 0x65, 0x73
0040b0   6461     cpfsgt	0x61, 0           
0040b2   6e69     movwf	0x69, 0            
0040b4   2067     addwfc	0x67, 0, 0        
0040b6   7270     btg	0x70, 0x1, 0         
0040b8   7365     btg	0x65, 0x1, 0x1       
0040ba   7465     btg	0x65, 0x2, 0         	DB	0x65, 0x74, 0x20, 0x00
0040bc   0020     dw	0x20  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_14:
0040be   6944     setf	0x44, 0x1           	DB	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x20, 0x6c, 0x6f
0040c0   6373     cpfseq	0x73, 0x1         
0040c2   7261     btg	0x61, 0x1, 0         
0040c4   6564     cpfsgt	0x64, 0x1         
0040c6   2064     addwfc	0x64, 0, 0        
0040c8   6f6c     movwf	0x6c, 0x1          
0040ca   6461     cpfsgt	0x61, 0           	DB	0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74
0040cc   6e69     movwf	0x69, 0            
0040ce   2067     addwfc	0x67, 0, 0        
0040d0   7270     btg	0x70, 0x1, 0         
0040d2   7365     btg	0x65, 0x1, 0x1       
0040d4   7465     btg	0x65, 0x2, 0         
0040d6   0020     dw	0x20  ;unknown opcode 	DB	0x20, 0x00
                                           ; ; Starting pCode block
                                           __str_15:
0040d8   6552     cpfsgt	0x52, 0x1         	DB	0x52, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65
0040da   616c     cpfslt	0x6c, 0x1         
0040dc   7379     btg	0x79, 0x1, 0x1       
0040de   7320     btg	0x20, 0x1, 0x1       
0040e0   6174     cpfslt	0x74, 0x1         
0040e2   6574     cpfsgt	0x74, 0x1         
0040e4   6220     cpfseq	0x20, 0           	DB	0x20, 0x62, 0x79, 0x74, 0x65, 0x20, 0x3a, 0x20, 0x00
0040e6   7479     btg	0x79, 0x2, 0         
0040e8   2065     addwfc	0x65, 0, 0        
0040ea   203a     addwfc	0x3a, 0, 0        
0040ec   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_16:
0040ee   6553     cpfsgt	0x53, 0x1         	DB	0x53, 0x65, 0x6e, 0x64, 0x20, 0x6d, 0x69, 0x64, 0x69, 0x20, 0x3f, 0x00
0040f0   646e     cpfsgt	0x6e, 0           
0040f2   6d20     negf	0x20, 0x1           
0040f4   6469     cpfsgt	0x69, 0           
0040f6   2069     addwfc	0x69, 0, 0        
0040f8   003f     dw	0x3f  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_17:
0040fa   6d20     negf	0x20, 0x1           	DB	0x20, 0x6d, 0x69, 0x64, 0x69, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67
0040fc   6469     cpfsgt	0x69, 0           
0040fe   2069     addwfc	0x69, 0, 0        
004100   656d     cpfsgt	0x6d, 0x1         
004102   7373     btg	0x73, 0x1, 0x1       
004104   6761     tstfsz	0x61, 0x1         
004106   2065     addwfc	0x65, 0, 0        	DB	0x65, 0x20, 0x3a, 0x00
004108   003a     dw	0x3a  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_18:
00410a   6f44     movwf	0x44, 0x1          	DB	0x44, 0x6f, 0x6e, 0x27, 0x74, 0x20, 0x70, 0x75, 0x73, 0x68, 0x20, 0x61
00410c   276e     addwf	0x6e, 0x1, 0x1     
00410e   2074     addwfc	0x74, 0, 0        
004110   7570     btg	0x70, 0x2, 0x1       
004112   6873     setf	0x73, 0             
004114   6120     cpfslt	0x20, 0x1         
004116   206e     addwfc	0x6e, 0, 0        	DB	0x6e, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x61, 0x63
004118   6c61     negf	0x61, 0             
00411a   6572     cpfsgt	0x72, 0x1         
00411c   6461     cpfsgt	0x61, 0           
00411e   2079     addwfc	0x79, 0, 0        
004120   6361     cpfseq	0x61, 0x1         
004122   6974     setf	0x74, 0x1           	DB	0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x20, 0x72
004124   6576     cpfsgt	0x76, 0x1         
004126   7220     btg	0x20, 0x1, 0         
004128   6461     cpfsgt	0x61, 0           
00412a   6f69     movwf	0x69, 0x1          
00412c   7220     btg	0x20, 0x1, 0         
00412e   6c65     negf	0x65, 0             	DB	0x65, 0x6c, 0x61, 0x79, 0x00
004130   7961     btg	0x61, 0x4, 0x1       
004132   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_19:
004134   6143     cpfslt	0x43, 0x1         	DB	0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x53, 0x61, 0x76, 0x65, 0x20
004136   6e6e     movwf	0x6e, 0            
004138   746f     btg	0x6f, 0x2, 0         
00413a   5320     movf	0x20, 0x1, 0x1      
00413c   7661     btg	0x61, 0x3, 0         
00413e   2065     addwfc	0x65, 0, 0        
004140   6f74     movwf	0x74, 0x1          	DB	0x74, 0x6f, 0x00
004142   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_20:
004144   7250     btg	0x50, 0x1, 0         	DB	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x30, 0x00
004146   7365     btg	0x65, 0x1, 0x1       
004148   7465     btg	0x65, 0x2, 0         
00414a   3020     rrcf	0x20, 0, 0          
00414c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_21:
00414e   6944     setf	0x44, 0x1           	DB	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x20, 0x73, 0x61
004150   6373     cpfseq	0x73, 0x1         
004152   7261     btg	0x61, 0x1, 0         
004154   6564     cpfsgt	0x64, 0x1         
004156   2064     addwfc	0x64, 0, 0        
004158   6173     cpfslt	0x73, 0x1         
00415a   6976     setf	0x76, 0x1           	DB	0x76, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20
00415c   676e     tstfsz	0x6e, 0x1         
00415e   7020     btg	0x20, 0, 0           
004160   6572     cpfsgt	0x72, 0x1         
004162   6573     cpfsgt	0x73, 0x1         
004164   2074     addwfc	0x74, 0, 0        
004166   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_22:
004168   2a2a     incf	0x2a, 0x1, 0        	DB	0x2a, 0x2a, 0x20, 0x20, 0x53, 0x41, 0x56, 0x45, 0x44, 0x20, 0x74, 0x6f
00416a   2020     addwfc	0x20, 0, 0        
00416c   4153     rrncf	0x53, 0, 0x1       
00416e   4556     rlncf	0x56, 0, 0x1       
004170   2044     addwfc	0x44, 0, 0        
004172   6f74     movwf	0x74, 0x1          
004174   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x2a, 0x2a, 0x00
004176   2a2a     incf	0x2a, 0x1, 0        
004178   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_23:
00417a   6749     tstfsz	0x49, 0x1         	DB	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x2c, 0x20, 0x61, 0x6c, 0x72
00417c   6f6e     movwf	0x6e, 0x1          
00417e   6572     cpfsgt	0x72, 0x1         
004180   2c64     decfsz	0x64, 0, 0        
004182   6120     cpfslt	0x20, 0x1         
004184   726c     btg	0x6c, 0x1, 0         
004186   6165     cpfslt	0x65, 0x1         	DB	0x65, 0x61, 0x64, 0x79, 0x20, 0x61, 0x74, 0x20, 0x68, 0x69, 0x67, 0x68
004188   7964     btg	0x64, 0x4, 0x1       
00418a   6120     cpfslt	0x20, 0x1         
00418c   2074     addwfc	0x74, 0, 0        
00418e   6968     setf	0x68, 0x1           
004190   6867     setf	0x67, 0             
004192   7365     btg	0x65, 0x1, 0x1       	DB	0x65, 0x73, 0x74, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x00
004194   2074     addwfc	0x74, 0, 0        
004196   7270     btg	0x70, 0x1, 0         
004198   7365     btg	0x65, 0x1, 0x1       
00419a   7465     btg	0x65, 0x2, 0         
00419c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_24:
00419e   6749     tstfsz	0x49, 0x1         	DB	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x2c, 0x20, 0x61, 0x6c, 0x72
0041a0   6f6e     movwf	0x6e, 0x1          
0041a2   6572     cpfsgt	0x72, 0x1         
0041a4   2c64     decfsz	0x64, 0, 0        
0041a6   6120     cpfslt	0x20, 0x1         
0041a8   726c     btg	0x6c, 0x1, 0         
0041aa   6165     cpfslt	0x65, 0x1         	DB	0x65, 0x61, 0x64, 0x79, 0x20, 0x61, 0x74, 0x20, 0x6c, 0x6f, 0x77, 0x65
0041ac   7964     btg	0x64, 0x4, 0x1       
0041ae   6120     cpfslt	0x20, 0x1         
0041b0   2074     addwfc	0x74, 0, 0        
0041b2   6f6c     movwf	0x6c, 0x1          
0041b4   6577     cpfsgt	0x77, 0x1         
0041b6   7473     btg	0x73, 0x2, 0         	DB	0x73, 0x74, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x00
0041b8   7020     btg	0x20, 0, 0           
0041ba   6572     cpfsgt	0x72, 0x1         
0041bc   6573     cpfsgt	0x73, 0x1         
0041be   0074     dw	0x74  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_25:
0041c0   6146     cpfslt	0x46, 0x1         	DB	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x52, 0x65, 0x73, 0x65
0041c2   7463     btg	0x63, 0x2, 0         
0041c4   726f     btg	0x6f, 0x1, 0         
0041c6   2079     addwfc	0x79, 0, 0        
0041c8   6552     cpfsgt	0x52, 0x1         
0041ca   6573     cpfsgt	0x73, 0x1         
0041cc   0074     dw	0x74  ;unknown opcode 	DB	0x74, 0x00
                                           ; ; Starting pCode block
                                           __str_26:
0041ce   5453     subfwb	0x53, 0, 0        	DB	0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x20, 0x50, 0x52, 0x45, 0x53
0041d0   5241     movf	0x41, 0x1, 0        
0041d2   5554     subfwb	0x54, 0, 0x1      
0041d4   2050     addwfc	0x50, 0, 0        
0041d6   5250     movf	0x50, 0x1, 0        
0041d8   5345     movf	0x45, 0x1, 0x1      
0041da   5445     subfwb	0x45, 0, 0        	DB	0x45, 0x54, 0x00
0041dc   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_27:
0041de   7041     btg	0x41, 0, 0           	DB	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20
0041e0   6c70     negf	0x70, 0             
0041e2   6369     cpfseq	0x69, 0x1         
0041e4   7461     btg	0x61, 0x2, 0         
0041e6   6f69     movwf	0x69, 0x1          
0041e8   206e     addwfc	0x6e, 0, 0        
0041ea   6572     cpfsgt	0x72, 0x1         	DB	0x72, 0x65, 0x61, 0x64, 0x79, 0x2e, 0x00
0041ec   6461     cpfsgt	0x61, 0           
0041ee   2e79     decfsz	0x79, 0x1, 0      
0041f0   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_28:
0041f2   4153     rrncf	0x53, 0, 0x1       	DB	0x53, 0x41, 0x56, 0x45, 0x00
0041f4   4556     rlncf	0x56, 0, 0x1       
0041f6   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_29:
0041f8   4142     rrncf	0x42, 0, 0x1       	DB	0x42, 0x41, 0x43, 0x4b, 0x00
0041fa   4b43     infsnz	0x43, 0x1, 0x1    
0041fc   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_30:
0041fe   6f74     movwf	0x74, 0x1          	DB	0x74, 0x6f, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x00
004200   7020     btg	0x20, 0, 0           
004202   6572     cpfsgt	0x72, 0x1         
004204   6573     cpfsgt	0x73, 0x1         
004206   2074     addwfc	0x74, 0, 0        
004208   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_31:
00420a   003e     dw	0x3e  ;unknown opcode 	DB	0x3e, 0x00
                                           ; ; Starting pCode block
                                           __str_32:
00420c   0051     dw	0x51  ;unknown opcode 	DB	0x51, 0x00
                                           ; ; Starting pCode block
                                           __str_33:
00420e   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x46, 0x6f, 0x6f, 0x74, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68
004210   6f46     movwf	0x46, 0x1          
004212   746f     btg	0x6f, 0x2, 0         
004214   7773     btg	0x73, 0x3, 0x1       
004216   7469     btg	0x69, 0x2, 0         
004218   6863     setf	0x63, 0             
00421a   3120     rrcf	0x20, 0, 0x1        	DB	0x20, 0x31, 0x20, 0x20, 0x00
00421c   2020     addwfc	0x20, 0, 0        
00421e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_34:
004220   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x20, 0x20, 0x20
004222   7250     btg	0x50, 0x1, 0         
004224   7365     btg	0x65, 0x1, 0x1       
004226   7465     btg	0x65, 0x2, 0         
004228   2020     addwfc	0x20, 0, 0        
00422a   2020     addwfc	0x20, 0, 0        
00422c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x00
00422e   2020     addwfc	0x20, 0, 0        
004230   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_35:
004232   2a2a     incf	0x2a, 0x1, 0        	DB	0x2a, 0x2a, 0x20, 0x20, 0x20, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67
004234   2020     addwfc	0x20, 0, 0        
004236   4e20     dcfsnz	0x20, 0x1, 0      
004238   746f     btg	0x6f, 0x2, 0         
00423a   6968     setf	0x68, 0x1           
00423c   676e     tstfsz	0x6e, 0x1         
00423e   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x2a, 0x2a, 0x00
004240   2a2a     incf	0x2a, 0x1, 0        
004242   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_36:
004244   2a2a     incf	0x2a, 0x1, 0        	DB	0x2a, 0x2a, 0x20, 0x20, 0x20, 0x20, 0x53, 0x61, 0x76, 0x65, 0x64, 0x20
004246   2020     addwfc	0x20, 0, 0        
004248   2020     addwfc	0x20, 0, 0        
00424a   6153     cpfslt	0x53, 0x1         
00424c   6576     cpfsgt	0x76, 0x1         
00424e   2064     addwfc	0x64, 0, 0        
004250   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x2a, 0x2a, 0x00
004252   2a2a     incf	0x2a, 0x1, 0        
004254   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_37:
004256   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x46, 0x6f, 0x6f, 0x74, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68
004258   6f46     movwf	0x46, 0x1          
00425a   746f     btg	0x6f, 0x2, 0         
00425c   7773     btg	0x73, 0x3, 0x1       
00425e   7469     btg	0x69, 0x2, 0         
004260   6863     setf	0x63, 0             
004262   3220     rrcf	0x20, 0x1, 0        	DB	0x20, 0x32, 0x20, 0x20, 0x00
004264   2020     addwfc	0x20, 0, 0        
004266   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_38:
004268   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x46, 0x6f, 0x6f, 0x74, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68
00426a   6f46     movwf	0x46, 0x1          
00426c   746f     btg	0x6f, 0x2, 0         
00426e   7773     btg	0x73, 0x3, 0x1       
004270   7469     btg	0x69, 0x2, 0         
004272   6863     setf	0x63, 0             
004274   3320     rrcf	0x20, 0x1, 0x1      	DB	0x20, 0x33, 0x20, 0x20, 0x00
004276   2020     addwfc	0x20, 0, 0        
004278   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_39:
00427a   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x46, 0x6f, 0x6f, 0x74, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68
00427c   6f46     movwf	0x46, 0x1          
00427e   746f     btg	0x6f, 0x2, 0         
004280   7773     btg	0x73, 0x3, 0x1       
004282   7469     btg	0x69, 0x2, 0         
004284   6863     setf	0x63, 0             
004286   3420     rlcf	0x20, 0, 0          	DB	0x20, 0x34, 0x20, 0x20, 0x00
004288   2020     addwfc	0x20, 0, 0        
00428a   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_40:
00428c   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x4d, 0x49, 0x44, 0x49, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e
00428e   494d     infsnz	0x4d, 0, 0x1      
004290   4944     infsnz	0x44, 0, 0x1      
004292   6320     cpfseq	0x20, 0x1         
004294   6168     cpfslt	0x68, 0x1         
004296   6e6e     movwf	0x6e, 0            
004298   6c65     negf	0x65, 0             	DB	0x65, 0x6c, 0x20, 0x20, 0x00
00429a   2020     addwfc	0x20, 0, 0        
00429c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_41:
00429e   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
0042a0   2020     addwfc	0x20, 0, 0        
0042a2   2020     addwfc	0x20, 0, 0        
0042a4   2020     addwfc	0x20, 0, 0        
0042a6   2020     addwfc	0x20, 0, 0        
0042a8   2020     addwfc	0x20, 0, 0        
0042aa   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x00
0042ac   2020     addwfc	0x20, 0, 0        
0042ae   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_42:
0042b0   5320     movf	0x20, 0x1, 0x1      	DB	0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x20, 0x50, 0x72, 0x65
0042b2   6174     cpfslt	0x74, 0x1         
0042b4   7472     btg	0x72, 0x2, 0         
0042b6   7075     btg	0x75, 0, 0           
0042b8   5020     movf	0x20, 0, 0          
0042ba   6572     cpfsgt	0x72, 0x1         
0042bc   6573     cpfsgt	0x73, 0x1         	DB	0x73, 0x65, 0x74, 0x20, 0x00
0042be   2074     addwfc	0x74, 0, 0        
0042c0   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_43:
0042c2   2a20     incf	0x20, 0x1, 0        	DB	0x20, 0x2a, 0x2a, 0x20, 0x4c, 0x61, 0x73, 0x74, 0x20, 0x55, 0x73, 0x65
0042c4   202a     addwfc	0x2a, 0, 0        
0042c6   614c     cpfslt	0x4c, 0x1         
0042c8   7473     btg	0x73, 0x2, 0         
0042ca   5520     subfwb	0x20, 0, 0x1      
0042cc   6573     cpfsgt	0x73, 0x1         
0042ce   2064     addwfc	0x64, 0, 0        	DB	0x64, 0x20, 0x2a, 0x2a, 0x00
0042d0   2a2a     incf	0x2a, 0x1, 0        
0042d2   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_44:
0042d4   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x53, 0x65, 0x6e, 0x64, 0x20, 0x4d, 0x49, 0x44, 0x49, 0x20
0042d6   6553     cpfsgt	0x53, 0x1         
0042d8   646e     cpfsgt	0x6e, 0           
0042da   4d20     dcfsnz	0x20, 0, 0x1      
0042dc   4449     rlncf	0x49, 0, 0         
0042de   2049     addwfc	0x49, 0, 0        
0042e0   203f     addwfc	0x3f, 0, 0        	DB	0x3f, 0x20, 0x20, 0x20, 0x00
0042e2   2020     addwfc	0x20, 0, 0        
0042e4   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_45:
0042e6   6559     cpfsgt	0x59, 0x1         	DB	0x59, 0x65, 0x73, 0x00
0042e8   0073     dw	0x73  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_46:
0042ea   6f4e     movwf	0x4e, 0x1          	DB	0x4e, 0x6f, 0x00
0042ec   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_47:
0042ee   5220     movf	0x20, 0x1, 0        	DB	0x20, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x41, 0x63, 0x74, 0x69
0042f0   6c65     negf	0x65, 0             
0042f2   616f     cpfslt	0x6f, 0x1         
0042f4   2064     addwfc	0x64, 0, 0        
0042f6   6341     cpfseq	0x41, 0x1         
0042f8   6974     setf	0x74, 0x1           
0042fa   6576     cpfsgt	0x76, 0x1         	DB	0x76, 0x65, 0x20, 0x3f, 0x00
0042fc   3f20     incfsz	0x20, 0x1, 0x1    
0042fe   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_48:
004300   4f20     dcfsnz	0x20, 0x1, 0x1    	DB	0x20, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x20, 0x20, 0x74, 0x79
004302   7475     btg	0x75, 0x2, 0         
004304   7570     btg	0x70, 0x2, 0x1       
004306   2074     addwfc	0x74, 0, 0        
004308   2020     addwfc	0x20, 0, 0        
00430a   7974     btg	0x74, 0x4, 0x1       
00430c   6570     cpfsgt	0x70, 0x1         	DB	0x70, 0x65, 0x20, 0x00
00430e   0020     dw	0x20  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_49:
004310   6f4d     movwf	0x4d, 0x1          	DB	0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x00
004312   656d     cpfsgt	0x6d, 0x1         
004314   746e     btg	0x6e, 0x2, 0         
004316   7261     btg	0x61, 0x1, 0         
004318   0079     dw	0x79  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_50:
00431a   6f54     movwf	0x54, 0x1          	DB	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x00
00431c   6767     tstfsz	0x67, 0x1         
00431e   656c     cpfsgt	0x6c, 0x1         
004320   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_51:
004322   4f20     dcfsnz	0x20, 0x1, 0x1    	DB	0x20, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x20, 0x20, 0x6d, 0x6f
004324   7475     btg	0x75, 0x2, 0         
004326   7570     btg	0x70, 0x2, 0x1       
004328   2074     addwfc	0x74, 0, 0        
00432a   2020     addwfc	0x20, 0, 0        
00432c   6f6d     movwf	0x6d, 0x1          
00432e   6564     cpfsgt	0x64, 0x1         	DB	0x64, 0x65, 0x20, 0x00
004330   0020     dw	0x20  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_52:
004332   6152     cpfslt	0x52, 0x1         	DB	0x52, 0x61, 0x64, 0x69, 0x6f, 0x00
004334   6964     setf	0x64, 0x1           
004336   006f     dw	0x6f  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_53:
004338   7246     btg	0x46, 0x1, 0         	DB	0x46, 0x72, 0x65, 0x65, 0x00
00433a   6565     cpfsgt	0x65, 0x1         
00433c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_54:
00433e   2a2a     incf	0x2a, 0x1, 0        	DB	0x2a, 0x2a, 0x20, 0x20, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73
004340   2020     addwfc	0x20, 0, 0        
004342   4f20     dcfsnz	0x20, 0x1, 0x1    
004344   7470     btg	0x70, 0x2, 0         
004346   6f69     movwf	0x69, 0x1          
004348   736e     btg	0x6e, 0x1, 0x1       
00434a   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x2a, 0x2a, 0x00
00434c   2a2a     incf	0x2a, 0x1, 0        
00434e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_55:
004350   6c41     negf	0x41, 0             	DB	0x41, 0x6c, 0x6c, 0x00
004352   006c     dw	0x6c  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_56:
004354   5250     movf	0x50, 0x1, 0        	DB	0x50, 0x52, 0x4f, 0x47, 0x00
004356   474f     rlncf	0x4f, 0x1, 0x1     
004358   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_57:
00435a   504f     movf	0x4f, 0, 0          	DB	0x4f, 0x50, 0x54, 0x53, 0x00
00435c   5354     movf	0x54, 0x1, 0x1      
00435e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_58:
004360   7250     btg	0x50, 0x1, 0         	DB	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x00
004362   7365     btg	0x65, 0x1, 0x1       
004364   7465     btg	0x65, 0x2, 0         
004366   0020     dw	0x20  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_59:
004368   6552     cpfsgt	0x52, 0x1         	DB	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x4d, 0x69, 0x64
00436a   6563     cpfsgt	0x63, 0x1         
00436c   7669     btg	0x69, 0x3, 0         
00436e   6465     cpfsgt	0x65, 0           
004370   4d20     dcfsnz	0x20, 0, 0x1      
004372   6469     cpfsgt	0x69, 0           
004374   2069     addwfc	0x69, 0, 0        	DB	0x69, 0x20, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x3a, 0x20
004376   654d     cpfsgt	0x4d, 0x1         
004378   7373     btg	0x73, 0x1, 0x1       
00437a   6761     tstfsz	0x61, 0x1         
00437c   2065     addwfc	0x65, 0, 0        
00437e   203a     addwfc	0x3a, 0, 0        
004380   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_60:
004382   6749     tstfsz	0x49, 0x1         	DB	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x2c, 0x20, 0x42, 0x61, 0x64
004384   6f6e     movwf	0x6e, 0x1          
004386   6572     cpfsgt	0x72, 0x1         
004388   2c64     decfsz	0x64, 0, 0        
00438a   4220     rrncf	0x20, 0x1, 0       
00438c   6461     cpfsgt	0x61, 0           
00438e   4d20     dcfsnz	0x20, 0, 0x1      	DB	0x20, 0x4d, 0x49, 0x44, 0x49, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65
004390   4449     rlncf	0x49, 0, 0         
004392   2049     addwfc	0x49, 0, 0        
004394   6863     setf	0x63, 0             
004396   6e61     movwf	0x61, 0            
004398   656e     cpfsgt	0x6e, 0x1         
00439a   006c     dw	0x6c  ;unknown opcode 	DB	0x6c, 0x00
                                           ; ; Starting pCode block
                                           __str_61:
00439c   6749     tstfsz	0x49, 0x1         	DB	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x2c, 0x20, 0x6e, 0x6f, 0x74
00439e   6f6e     movwf	0x6e, 0x1          
0043a0   6572     cpfsgt	0x72, 0x1         
0043a2   2c64     decfsz	0x64, 0, 0        
0043a4   6e20     movwf	0x20, 0            
0043a6   746f     btg	0x6f, 0x2, 0         
0043a8   6120     cpfslt	0x20, 0x1         	DB	0x20, 0x61, 0x20, 0x50, 0x43, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67
0043aa   5020     movf	0x20, 0, 0          
0043ac   2043     addwfc	0x43, 0, 0        
0043ae   656d     cpfsgt	0x6d, 0x1         
0043b0   7373     btg	0x73, 0x1, 0x1       
0043b2   6761     tstfsz	0x61, 0x1         
0043b4   0065     dw	0x65  ;unknown opcode 	DB	0x65, 0x00
                                           ; ; Starting pCode block
                                           __str_62:
0043b6   4350     rrncf	0x50, 0x1, 0x1     	DB	0x50, 0x43, 0x00
0043b8   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_63:
0043ba   3a20     swapf	0x20, 0x1, 0       	DB	0x20, 0x3a, 0x20, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x70
0043bc   4c20     dcfsnz	0x20, 0, 0        
0043be   616f     cpfslt	0x6f, 0x1         
0043c0   6964     setf	0x64, 0x1           
0043c2   676e     tstfsz	0x6e, 0x1         
0043c4   7020     btg	0x20, 0, 0           
0043c6   6572     cpfsgt	0x72, 0x1         	DB	0x72, 0x65, 0x73, 0x65, 0x74, 0x00
0043c8   6573     cpfsgt	0x73, 0x1         
0043ca   0074     dw	0x74  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_64:
0043cc   3a20     swapf	0x20, 0x1, 0       	DB	0x20, 0x3a, 0x20, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x20, 0x52, 0x65
0043ce   5420     subfwb	0x20, 0, 0        
0043d0   676f     tstfsz	0x6f, 0x1         
0043d2   6c67     negf	0x67, 0             
0043d4   2065     addwfc	0x65, 0, 0        
0043d6   6552     cpfsgt	0x52, 0x1         
0043d8   616c     cpfslt	0x6c, 0x1         	DB	0x6c, 0x61, 0x79, 0x00
0043da   0079     dw	0x79  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_65:
0043dc   5320     movf	0x20, 0x1, 0x1      	DB	0x20, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x00
0043de   6174     cpfslt	0x74, 0x1         
0043e0   7574     btg	0x74, 0x2, 0x1       
0043e2   0073     dw	0x73  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_66:
0043e4   4350     rrncf	0x50, 0x1, 0x1     	DB	0x50, 0x43, 0x31, 0x30, 0x39, 0x20, 0x3a, 0x20, 0x55, 0x70, 0x20, 0x6f
0043e6   3031     rrcf	0x31, 0, 0          
0043e8   2039     addwfc	0x39, 0, 0        
0043ea   203a     addwfc	0x3a, 0, 0        
0043ec   7055     btg	0x55, 0, 0           
0043ee   6f20     movwf	0x20, 0x1          
0043f0   656e     cpfsgt	0x6e, 0x1         	DB	0x6e, 0x65, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x00
0043f2   7020     btg	0x20, 0, 0           
0043f4   6572     cpfsgt	0x72, 0x1         
0043f6   6573     cpfsgt	0x73, 0x1         
0043f8   0074     dw	0x74  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_67:
0043fa   7266     btg	0x66, 0x1, 0         	DB	0x66, 0x72, 0x6f, 0x6d, 0x00
0043fc   6d6f     negf	0x6f, 0x1           
0043fe   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_68:
004400   6f74     movwf	0x74, 0x1          	DB	0x74, 0x6f, 0x00
004402   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_69:
004404   6749     tstfsz	0x49, 0x1         	DB	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x4d, 0x69, 0x64, 0x69
004406   6f6e     movwf	0x6e, 0x1          
004408   6572     cpfsgt	0x72, 0x1         
00440a   2064     addwfc	0x64, 0, 0        
00440c   694d     setf	0x4d, 0x1           
00440e   6964     setf	0x64, 0x1           
004410   4920     infsnz	0x20, 0, 0x1      	DB	0x20, 0x49, 0x6e, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a
004412   206e     addwfc	0x6e, 0, 0        
004414   656d     cpfsgt	0x6d, 0x1         
004416   7373     btg	0x73, 0x1, 0x1       
004418   6761     tstfsz	0x61, 0x1         
00441a   3a65     swapf	0x65, 0x1, 0       
00441c   0020     dw	0x20  ;unknown opcode 	DB	0x20, 0x00
                                           ; ; Starting pCode block
                                           __str_70:
00441e   4350     rrncf	0x50, 0x1, 0x1     	DB	0x50, 0x43, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f
004420   6e20     movwf	0x20, 0            
004422   6d75     negf	0x75, 0x1           
004424   6562     cpfsgt	0x62, 0x1         
004426   2072     addwfc	0x72, 0, 0        
004428   6f74     movwf	0x74, 0x1          
00442a   206f     addwfc	0x6f, 0, 0        	DB	0x6f, 0x20, 0x68, 0x69, 0x67, 0x68, 0x00
00442c   6968     setf	0x68, 0x1           
00442e   6867     setf	0x67, 0             
004430   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_71:
004432   6f46     movwf	0x46, 0x1          	DB	0x46, 0x6f, 0x6f, 0x74, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x3a, 0x20
004434   746f     btg	0x6f, 0x2, 0         
004436   7773     btg	0x73, 0x3, 0x1       
004438   7469     btg	0x69, 0x2, 0         
00443a   6863     setf	0x63, 0             
00443c   203a     addwfc	0x3a, 0, 0        
00443e   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_72:
004440   6564     cpfsgt	0x64, 0x1         	DB	0x64, 0x65, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x00
004442   7270     btg	0x70, 0x1, 0         
004444   7365     btg	0x65, 0x1, 0x1       
004446   6573     cpfsgt	0x73, 0x1         
004448   0064     dw	0x64  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_73:
00444a   7270     btg	0x70, 0x1, 0         	DB	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x00
00444c   7365     btg	0x65, 0x1, 0x1       
00444e   6573     cpfsgt	0x73, 0x1         
004450   0064     dw	0x64  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_74:
004452   7542     btg	0x42, 0x2, 0x1       	DB	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x3a, 0x20, 0x00
004454   7474     btg	0x74, 0x2, 0         
004456   6e6f     movwf	0x6f, 0            
004458   203a     addwfc	0x3a, 0, 0        
00445a   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_75:
00445c   4f4e     dcfsnz	0x4e, 0x1, 0x1    	DB	0x4e, 0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x20, 0x54, 0x4f, 0x20, 0x44
00445e   4854     infsnz	0x54, 0, 0        
004460   4e49     dcfsnz	0x49, 0x1, 0      
004462   2047     addwfc	0x47, 0, 0        
004464   4f54     dcfsnz	0x54, 0x1, 0x1    
004466   4420     rlncf	0x20, 0, 0         
004468   204f     addwfc	0x4f, 0, 0        	DB	0x4f, 0x20, 0x49, 0x4e, 0x20, 0x44, 0x49, 0x4e, 0x20, 0x4e, 0x4f, 0x54
00446a   4e49     dcfsnz	0x49, 0x1, 0      
00446c   4420     rlncf	0x20, 0, 0         
00446e   4e49     dcfsnz	0x49, 0x1, 0      
004470   4e20     dcfsnz	0x20, 0x1, 0      
004472   544f     subfwb	0x4f, 0, 0        
004474   4649     rlncf	0x49, 0x1, 0       	DB	0x49, 0x46, 0x59, 0x00
004476   0059     dw	0x59  ;unknown opcode 
                                           
                                           
                                           ; Statistics:
                                           ; code size:	10182 (0x27c6) bytes ( 7.77%)
                                           ;           	 5091 (0x13e3) words
                                           ; udata size:	   46 (0x002e) bytes ( 3.59%)
                                           ; access size:	   10 (0x000a) bytes
                                           
                                           
                                           	end
                                           ; $Id: debug_msg.asm 626 2009-01-19 21:36:33Z tk $
                                           ;
                                           ;  Wrapper for debug_msg.inc
                                           ;  To be used for relocatable programs
                                           ;
                                           
                                           ; ==========================================================================
                                           
                                           	radix	dec
                                           #include <mios.h>
                                           ; $Id: mios.h 822 2009-09-17 18:39:53Z tk $
                                           ;
                                           ; MIOS Definitions file
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2008 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  Include basic defines which characterize the derivative to
                                           ;;  simplify dependencies within MIOS source code
                                           ;; ==========================================================================
                                           #include <hw_flags.h>
                                           
                                           #ifndef _HW_FLAGS_H
                                           #define _HW_FLAGS_H
                                           
                                           #ifdef __18F452
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		0
                                           #define PIC_DERIVATIVE_CMCON_INIT	0
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4620
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x10000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xf80
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	1
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4682
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x14000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #ifdef __18F4685
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x18000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #endif
                                            
                                           ;; ==========================================================================
                                           ;;  Assembler directives & device specific include file
                                           ;;
                                           ;;  Natively supported devices are listed here.
                                           ;; ==========================================================================
                                           
                                           #ifdef __18F452
                                           	LIST R=DEC
                                           #include <p18f452.inc>
                                                   LIST
                                           ; P18F452.INC  Standard Header File, Version 1.4   Microchip Technology, Inc.
                                                   NOLIST
                                           #endif
                                           
                                           #ifdef __18F4620
                                           	LIST R=DEC
                                           #include <p18f4620.inc>
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           	LIST R=DEC
                                           #include <p18f4520.inc>
                                           #endif
                                           
                                           #ifdef __18F4682
                                           	LIST R=DEC
                                           #include <p18f4682.inc>
                                           #endif
                                           
                                           #ifdef __18F4685
                                           	LIST R=DEC
                                           #include <p18f4685.inc>
                                           #endif
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  General constants
                                           ;; ==========================================================================
                                           
                                           ;; used by MIOS_MIDI_Interface*
                                           MIOS_MIDI_INTERFACE_COMMON	EQU	0x00
                                           MIOS_MIDI_INTERFACE_TO_HOST	EQU	0x01
                                           
                                           ;; used by MIOS_MIDI_Merger*
                                           MIOS_MIDI_MERGER_DISABLED	EQU	0x00
                                           MIOS_MIDI_MERGER_ENABLED	EQU	0x01
                                           MIOS_MIDI_MERGER_MBLINK_EP	EQU	0x02
                                           MIOS_MIDI_MERGER_MBLINK_FP	EQU	0x03
                                           
                                           ;; used by MIOS_ENC_PIN_TABLE
                                           #ifdef MIOS_OLD_ENCODER_MODES
                                           MIOS_ENC_MODE_NON_DETENTED	EQU	0x00
                                           MIOS_ENC_MODE_DETENTED		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED1		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED2		EQU	0x81
                                           MIOS_ENC_MODE_DETENTED3		EQU	0x82
                                           #else
                                           ;; new encoder modes: each bit of MIOS_ENC_MODE_xx tells, if an INC / DEC is 
                                           ;; being triggered on the corresponding edge. 
                                           ;; Bit      7   6   5   4  
                                           ;; DEC     <-  <-  <-  <-
                                           ;; Pin A ___|-------|_______
                                           ;; Pin B _______|-------|___
                                           ;; INC      ->  ->  ->  ->
                                           ;; Bit      0   1   2   3
                                           ;; Ex.:          Bit  76543210
                                           ;;      DETENTED2 = 0b00100010 = 0x22
                                           ;;      -> INC will be triggered on edge 1, DEC on edge 5
                                           MIOS_ENC_MODE_NON_DETENTED	EQU	0xff
                                           MIOS_ENC_MODE_DETENTED		EQU	0xaa
                                           MIOS_ENC_MODE_DETENTED1		EQU	0xaa
                                           MIOS_ENC_MODE_DETENTED2		EQU	0x22
                                           MIOS_ENC_MODE_DETENTED3		EQU	0x88
                                           MIOS_ENC_MODE_DETENTED4		EQU	0xa5
                                           MIOS_ENC_MODE_DETENTED5		EQU	0x5a
                                           #endif
                                           
                                           ;; used by MIOS_ENC_Speed*
                                           MIOS_ENC_SPEED_SLOW		EQU	0
                                           MIOS_ENC_SPEED_NORMAL		EQU	1
                                           MIOS_ENC_SPEED_FAST		EQU	2
                                           
                                           ;; used by MIOS_LCD_Type*
                                           MIOS_LCD_TYPE_CLCD		EQU	0x00
                                           MIOS_LCD_TYPE_GLCD0		EQU	0x01
                                           MIOS_LCD_TYPE_GLCD1		EQU	0x02
                                           MIOS_LCD_TYPE_GLCD2		EQU	0x03
                                           MIOS_LCD_TYPE_GLCD3		EQU	0x04
                                           MIOS_LCD_TYPE_GLCD4		EQU	0x05
                                           MIOS_LCD_TYPE_MLCD		EQU	0x06
                                           MIOS_LCD_TYPE_GLCD_CUSTOM	EQU	0x07
                                           
                                           ;; location of default 5x8 font for graphical displays
                                           MIOS_GLCD_FONT			EQU	0x7cfc
                                           
                                           ;; general config flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_CFG0_LCD_TYPE0		EQU 0	; selects LCD type, bit 0
                                           MIOS_BOX_CFG0_LCD_TYPE1		EQU 1	; selects LCD type, bit 1
                                           MIOS_BOX_CFG0_LCD_TYPE2		EQU 2	; selects LCD type, bit 2
                                           MIOS_BOX_CFG0_USE_GLCD		EQU 3	; if 1, graphical LCD is connected
                                           MIOS_BOX_CFG0_MERGER		EQU 4	; if 1, MIDI merger is enabled
                                           MIOS_BOX_CFG0_MBLINK		EQU 5	; if 1, MIDIbox Link is enabled
                                           MIOS_BOX_CFG0_TO_HOST		EQU 6	; if 1, MIDI interface will run with 38400 baud instead of 31250
                                           MIOS_BOX_CFG0_20MHz		EQU 7	; if 1, it is assumed that box is running with 20 MHz, else with 40 MHz
                                           
                                           MIOS_BOX_CFG1_BS_A0		EQU 0	; A0 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A1		EQU 1	; A1 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A2		EQU 2	; A2 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_DIS_VERIFY	EQU 3	; if 1, writes to the BankStick will not be verified
                                           MIOS_BOX_CFG1_IIC_STRETCH_CLK	EQU 4	; if 1, IIC clock stretching enabled
                                           
                                           ;; general status flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_STAT_BS_AVAILABLE	EQU 0	; if 1, BankStick is available
                                           MIOS_BOX_STAT_MBLINK_TUNNEL_PASS EQU 1  ; if 1, a MBLinked event will be tunnled
                                           MIOS_BOX_STAT_SUSPEND_ALL       EQU 2   ; if 1, all system and user tasks are suspended
                                           MIOS_BOX_STAT_SUSPEND_USER      EQU 3   ; if 1, all user tasks are suspended
                                           MIOS_BOX_STAT_AUTOREPEAT	EQU 4	; if 1, start the auto-repeat handler
                                           MIOS_BOX_STAT_MLCD_TRANSFER	EQU 5	; if 1, a transfer to the MLCD has been started
                                           MIOS_BOX_STAT_FERR		EQU 6	; if 1, a frame error happened during MIDI receive
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS Special Function Registers
                                           ;; ==========================================================================
                                           
                                           MIOS_BOX_CFG0	EQU	0x000
                                           MIOS_BOX_CFG1	EQU	0x001
                                           MIOS_BOX_STAT	EQU	0x002
                                           MIOS_PARAMETER1	EQU	0x003
                                           MIOS_PARAMETER2	EQU	0x004
                                           MIOS_PARAMETER3	EQU	0x005
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for main programs
                                           ;; ==========================================================================
                                           TMP1		EQU	0x006
                                           TMP2		EQU	0x007
                                           TMP3		EQU	0x008
                                           TMP4		EQU	0x009
                                           TMP5		EQU	0x00a
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for IRQs
                                           ;; ==========================================================================
                                           IRQ_TMP1	EQU	0x00b
                                           IRQ_TMP2	EQU	0x00c
                                           IRQ_TMP3	EQU	0x00d
                                           IRQ_TMP4	EQU	0x00e
                                           IRQ_TMP5	EQU	0x00f
                                           
                                           ;; ==========================================================================
                                           ;;  free memory space for user application:
                                           ;; ==========================================================================
                                           	;; 0x010-0x37f
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers -- not defined here -- 
                                           ;;  never use these memory locations!
                                           ;; ==========================================================================
                                           	;; 0x380-0x6ff
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers for custom LCD driver
                                           ;; ==========================================================================
                                           MIOS_GLCD_BUFFER	EQU	0x570	; note: the buffer must be located at ...0-...7
                                           MIOS_LCD_OPTION1	EQU	0x578	; contains the first LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_OPTION2	EQU	0x579	; contains the second LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_CURSOR_POS	EQU	0x57a	; the current cursor pos of characters (GLCD: multiplied by width)
                                           MIOS_GLCD_GCURSOR_X	EQU	0x57b	; for GLCDs: the current X position of graphical cursor
                                           MIOS_GLCD_GCURSOR_Y	EQU	0x57c	; for GLCDs: the current Y position of graphical cursor
                                           MIOS_GLCD_FONT_WIDTH	EQU	0x57d	; for GLCDs: the fontwidth given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_HEIGHT	EQU	0x57e	; for GLCDs: the fontheight given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_X0	EQU	0x57f	; for GLCDs: the first byte within a char entry
                                           MIOS_GLCD_FONT_OFFSET	EQU	0x580	; for GLCDs: the byte offset between the characters
                                           MIOS_GLCD_FONT_PTRL	EQU	0x581	; for GLCDs: pointer to the character table, low-byte
                                           MIOS_GLCD_FONT_PTRH	EQU	0x582	; for GLCDs: pointer to the character table, high-byte
                                           MIOS_LCD_TIMEOUT0	EQU	0x583   ; can be used for timeout loops
                                           MIOS_LCD_TIMEOUT1	EQU	0x584   ; can be used for timeout loops
                                           MIOS_GLCD_TMP1		EQU	0x585   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP2		EQU	0x586   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP3		EQU	0x587   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP4		EQU	0x588   ; can be used as temporary buffer
                                           MIOS_LCD_Y0_OFFSET	EQU	0x589   ; Y0 offset of LCD
                                           MIOS_LCD_Y1_OFFSET	EQU	0x58a   ; Y1 offset of LCD
                                           MIOS_LCD_Y2_OFFSET	EQU	0x58b   ; Y2 offset of LCD
                                           MIOS_LCD_Y3_OFFSET	EQU	0x58c   ; Y3 offset of LCD
                                           MIOS_LCD_CURSOR_POS_REAL EQU	0x58d	; unmapped cursor position which has been set with MIOS_LCD_CursorSet
                                           MIOS_GLCD_FONT_PTRU	EQU	0x58e	; for GLCDs: pointer to the character table, upper-byte (>64k flash derivatives only)
                                           #include <mios_vectors.inc>
                                           ; $Id: mios_vectors.inc 49 2008-01-30 21:47:31Z tk $
                                           
                                           MIOS_MIDI_BeginStream                   EQU	0x2c00
                                           MIOS_MIDI_DeviceIDAutoSet               EQU	0x2c04
                                           MIOS_MIDI_DeviceIDGet                   EQU	0x2c08
                                           MIOS_MIDI_DeviceIDSet                   EQU	0x2c0c
                                           MIOS_MIDI_EndStream                     EQU	0x2c10
                                           MIOS_MIDI_Init                          EQU	0x2c14
                                           MIOS_MIDI_InterfaceAutoSet              EQU	0x2c18
                                           MIOS_MIDI_InterfaceGet                  EQU	0x2c1c
                                           MIOS_MIDI_InterfaceSet                  EQU	0x2c20
                                           MIOS_MIDI_MergerGet                     EQU	0x2c24
                                           MIOS_MIDI_MergerSet                     EQU	0x2c28
                                           MIOS_MIDI_RxBufferFree                  EQU	0x2c2c
                                           MIOS_MIDI_RxBufferGet                   EQU	0x2c30
                                           MIOS_MIDI_RxBufferPut                   EQU	0x2c34
                                           MIOS_MIDI_RxBufferUsed                  EQU	0x2c38
                                           MIOS_MIDI_TxBufferFlush                 EQU	0x2c3c
                                           MIOS_MIDI_TxBufferFree                  EQU	0x2c40
                                           MIOS_MIDI_TxBufferGet                   EQU	0x2c44
                                           MIOS_MIDI_TxBufferPut                   EQU	0x2c48
                                           MIOS_MIDI_TxBufferUsed                  EQU	0x2c4c
                                           MIOS_MPROC_MergerDisable                EQU	0x2c50
                                           MIOS_MPROC_MergerEnable                 EQU	0x2c54
                                           MIOS_MPROC_MergerGet                    EQU	0x2c58
                                           MIOS_AIN_DeadbandGet                    EQU	0x2c5c
                                           MIOS_AIN_DeadbandSet                    EQU	0x2c60
                                           MIOS_AIN_Muxed                          EQU	0x2c64
                                           MIOS_AIN_NumberGet                      EQU	0x2c68
                                           MIOS_AIN_NumberSet                      EQU	0x2c6c
                                           MIOS_AIN_Pin7bitGet                     EQU	0x2c70
                                           MIOS_AIN_PinGet                         EQU	0x2c74
                                           MIOS_AIN_PinLSBGet                      EQU	0x2c78
                                           MIOS_AIN_PinMSBGet                      EQU	0x2c7c
                                           MIOS_AIN_UnMuxed                        EQU	0x2c80
                                           MIOS_MF_PWM_DutyCycleDownGet            EQU	0x2c84
                                           MIOS_MF_PWM_DutyCycleDownSet            EQU	0x2c88
                                           MIOS_MF_PWM_DutyCycleUpGet              EQU	0x2c8c
                                           MIOS_MF_PWM_DutyCycleUpSet              EQU	0x2c90
                                           MIOS_MF_DeadbandGet                     EQU	0x2c94
                                           MIOS_MF_DeadbandSet                     EQU	0x2c98
                                           MIOS_MF_Disable                         EQU	0x2c9c
                                           MIOS_MF_Enable                          EQU	0x2ca0
                                           MIOS_MF_FaderMove                       EQU	0x2ca4
                                           MIOS_MF_SuspendDisable                  EQU	0x2ca8
                                           MIOS_MF_SuspendEnable                   EQU	0x2cac
                                           MIOS_MF_SuspendGet                      EQU	0x2cb0
                                           MIOS_DIN_PinGet                         EQU	0x2cb4
                                           MIOS_DIN_SRGet                          EQU	0x2cb8
                                           MIOS_DOUT_PinGet                        EQU	0x2cbc
                                           MIOS_DOUT_PinSet                        EQU	0x2cc0
                                           MIOS_DOUT_PinSet0                       EQU	0x2cc4
                                           MIOS_DOUT_PinSet1                       EQU	0x2cc8
                                           MIOS_DOUT_SRGet                         EQU	0x2ccc
                                           MIOS_DOUT_SRSet                         EQU	0x2cd0
                                           MIOS_ENC_Abs7bitAdd                     EQU	0x2cd4
                                           MIOS_ENC_Abs7bitGet                     EQU	0x2cd8
                                           MIOS_ENC_Abs7bitSet                     EQU	0x2cdc
                                           MIOS_ENC_NumberGet                      EQU	0x2ce0
                                           MIOS_ENC_SpeedGet                       EQU	0x2ce4
                                           MIOS_ENC_SpeedSet                       EQU	0x2ce8
                                           MIOS_SRIO_NumberGet                     EQU	0x2cec
                                           MIOS_SRIO_NumberSet                     EQU	0x2cf0
                                           MIOS_SRIO_TS_SensitivityGet             EQU	0x2cf4
                                           MIOS_SRIO_TS_SensitivitySet             EQU	0x2cf8
                                           MIOS_SRIO_UpdateFrqGet                  EQU	0x2cfc
                                           MIOS_SRIO_UpdateFrqSet                  EQU	0x2d00
                                           MIOS_LCD_Clear                          EQU	0x2d04
                                           MIOS_LCD_Cmd                            EQU	0x2d08
                                           MIOS_LCD_CursorGet                      EQU	0x2d0c
                                           MIOS_LCD_CursorSet                      EQU	0x2d10
                                           MIOS_LCD_Data                           EQU	0x2d14
                                           MIOS_LCD_Init                           EQU	0x2d18
                                           MIOS_LCD_PrintBCD1	                EQU	0x2d1c
                                           MIOS_LCD_PrintBCD2                      EQU	0x2d20
                                           MIOS_LCD_PrintBCD3                      EQU	0x2d24
                                           MIOS_LCD_PrintChar	                EQU	0x2d28
                                           MIOS_LCD_PrintHex1	                EQU	0x2d2c
                                           MIOS_LCD_PrintHex2                      EQU	0x2d30
                                           MIOS_LCD_PrintMessage                   EQU	0x2d34
                                           MIOS_LCD_PrintPreconfString             EQU	0x2d38
                                           MIOS_LCD_PrintString                    EQU	0x2d3c
                                           MIOS_LCD_TypeAutoSet                    EQU	0x2d40
                                           MIOS_LCD_TypeGet                        EQU	0x2d44
                                           MIOS_LCD_TypeSet                        EQU	0x2d48
                                           MIOS_LCD_YAddressGet                    EQU	0x2d4c
                                           MIOS_LCD_YAddressSet                    EQU	0x2d50
                                           MIOS_GLCD_FontInit                      EQU	0x2d54
                                           MIOS_GLCD_GCursorGet                    EQU	0x2d58
                                           MIOS_GLCD_GCursorSet                    EQU	0x2d5c
                                           MIOS_EEPROM_Read                        EQU	0x2d60
                                           MIOS_EEPROM_Write                       EQU	0x2d64
                                           MIOS_FLASH_Read                         EQU	0x2d68
                                           MIOS_FLASH_Write                        EQU	0x2d6c
                                           MIOS_BANKSTICK_Read                     EQU	0x2d70
                                           MIOS_BANKSTICK_Write                    EQU	0x2d74
                                           MIOS_TIMER_Init                         EQU	0x2d78
                                           MIOS_TIMER_Start                        EQU	0x2d7c
                                           MIOS_TIMER_Stop                         EQU	0x2d80
                                           MIOS_HLP_AddressFromTable               EQU	0x2d84
                                           MIOS_HLP_GetBitANDMask                  EQU	0x2d88
                                           MIOS_HLP_GetBitORMask                   EQU	0x2d8c
                                           MIOS_HLP_GetIndex_2bytes                EQU	0x2d90
                                           MIOS_HLP_GetIndex_4bytes                EQU	0x2d94
                                           MIOS_HLP_IndirectJump                   EQU	0x2d98
                                           MIOS_Delay                              EQU	0x2d9c
                                           MIOS_GPCounterGet                       EQU	0x2da0
                                           MIOS_Reset                              EQU	0x2da4
                                           MIOS_SystemResume                       EQU	0x2da8
                                           MIOS_SystemSuspend                      EQU	0x2dac
                                           MIOS_UserResume                         EQU	0x2db0
                                           MIOS_UserSuspend                        EQU	0x2db4
                                           MIOS_HLP_16bitAddSaturate		EQU	0x2db8
                                           MIOS_DIN_PinAutoRepeatEnable		EQU	0x2dbc
                                           MIOS_DIN_PinAutoRepeatDisable		EQU	0x2dc0
                                           MIOS_DIN_PinAutoRepeatGet		EQU	0x2dc4
                                           MIOS_CLCD_SpecialCharInit		EQU	0x2dc8
                                           MIOS_CLCD_SpecialCharsInit		EQU	0x2dcc
                                           MIOS_AIN_DynamicPrioSet			EQU	0x2dd0
                                           MIOS_AIN_DynamicPrioGet			EQU	0x2dd4
                                           MIOS_AIN_LastPinsGet			EQU	0x2dd8
                                           MIOS_BANKSTICK_CtrlSet			EQU	0x2ddc
                                           MIOS_BANKSTICK_CtrlGet			EQU	0x2de0
                                           MIOS_BANKSTICK_WritePage		EQU	0x2de4
                                           MIOS_HLP_Dec2BCD			EQU	0x2de8
                                           MIOS_LCD_PrintBCD4			EQU	0x2dec
                                           MIOS_LCD_PrintBCD5                      EQU	0x2df0
                                           MIOS_LCD_MessageStart			EQU	0x2df4
                                           MIOS_LCD_MessageStop			EQU	0x2df8
                                           MIOS_MF_PWM_PeriodGet                   EQU	0x2dfc
                                           MIOS_MF_PWM_PeriodSet                   EQU	0x2e00
                                           MIOS_IIC_Start				EQU	0x2e04
                                           MIOS_IIC_Stop				EQU	0x2e08
                                           MIOS_IIC_ByteSend			EQU	0x2e0c
                                           MIOS_IIC_ByteReceive			EQU	0x2e10
                                           MIOS_IIC_AckSend			EQU	0x2e14
                                           MIOS_IIC_NakSend			EQU	0x2e18
                                           MIOS_IIC_CtrlSet			EQU	0x2e1c
                                           MIOS_IIC_CtrlGet			EQU	0x2e20
                                           MIOS_SRIO_DebounceSet			EQU	0x2e24
                                           MIOS_SRIO_DebounceGet			EQU	0x2e28
                                           MIOS_MF_TouchDetectionReset		EQU	0x2e2c
                                           MIOS_BANKSTICK_ReadPage			EQU	0x2e30
                                           MIOS_EEPROM_ReadPage			EQU	0x2e34
                                           MIOS_EEPROM_WritePage			EQU	0x2e38
                                           MIOS_TIMER_ReInit			EQU	0x2e3c
                                           MIOS_RESERVED_144                       EQU	0x2e40
                                           MIOS_RESERVED_145                       EQU	0x2e44
                                           MIOS_RESERVED_146                       EQU	0x2e48
                                           MIOS_RESERVED_147                       EQU	0x2e4c
                                           MIOS_RESERVED_148                       EQU	0x2e50
                                           MIOS_RESERVED_149                       EQU	0x2e54
                                           MIOS_RESERVED_150                       EQU	0x2e58
                                           MIOS_RESERVED_151                       EQU	0x2e5c
                                           MIOS_RESERVED_152                       EQU	0x2e60
                                           MIOS_RESERVED_153                       EQU	0x2e64
                                           MIOS_RESERVED_154                       EQU	0x2e68
                                           MIOS_RESERVED_155                       EQU	0x2e6c
                                           MIOS_RESERVED_156                       EQU	0x2e70
                                           MIOS_RESERVED_157                       EQU	0x2e74
                                           MIOS_RESERVED_158                       EQU	0x2e78
                                           MIOS_RESERVED_159                       EQU	0x2e7c
                                           MIOS_RESERVED_160                       EQU	0x2e80
                                           MIOS_RESERVED_161                       EQU	0x2e84
                                           MIOS_RESERVED_162                       EQU	0x2e88
                                           MIOS_RESERVED_163                       EQU	0x2e8c
                                           MIOS_RESERVED_164                       EQU	0x2e90
                                           MIOS_RESERVED_165                       EQU	0x2e94
                                           MIOS_RESERVED_166                       EQU	0x2e98
                                           MIOS_RESERVED_167                       EQU	0x2e9c
                                           MIOS_RESERVED_168                       EQU	0x2ea0
                                           MIOS_RESERVED_169                       EQU	0x2ea4
                                           MIOS_RESERVED_170                       EQU	0x2ea8
                                           MIOS_RESERVED_171                       EQU	0x2eac
                                           MIOS_RESERVED_172                       EQU	0x2eb0
                                           MIOS_RESERVED_173                       EQU	0x2eb4
                                           MIOS_RESERVED_174                       EQU	0x2eb8
                                           MIOS_RESERVED_175                       EQU	0x2ebc
                                           MIOS_RESERVED_176                       EQU	0x2ec0
                                           MIOS_RESERVED_177                       EQU	0x2ec4
                                           MIOS_RESERVED_178                       EQU	0x2ec8
                                           MIOS_RESERVED_179                       EQU	0x2ecc
                                           MIOS_RESERVED_180                       EQU	0x2ed0
                                           MIOS_RESERVED_181                       EQU	0x2ed4
                                           MIOS_RESERVED_182                       EQU	0x2ed8
                                           MIOS_RESERVED_183                       EQU	0x2edc
                                           MIOS_RESERVED_184                       EQU	0x2ee0
                                           MIOS_RESERVED_185                       EQU	0x2ee4
                                           MIOS_RESERVED_186                       EQU	0x2ee8
                                           MIOS_RESERVED_187                       EQU	0x2eec
                                           MIOS_RESERVED_188                       EQU	0x2ef0
                                           MIOS_RESERVED_189                       EQU	0x2ef4
                                           MIOS_RESERVED_190                       EQU	0x2ef8
                                           MIOS_RESERVED_191                       EQU	0x2efc
                                           MIOS_RESERVED_192                       EQU	0x2f00
                                           MIOS_RESERVED_193                       EQU	0x2f04
                                           MIOS_RESERVED_194                       EQU	0x2f08
                                           MIOS_RESERVED_195                       EQU	0x2f0c
                                           MIOS_RESERVED_196                       EQU	0x2f10
                                           MIOS_RESERVED_197                       EQU	0x2f14
                                           MIOS_RESERVED_198                       EQU	0x2f18
                                           MIOS_RESERVED_199                       EQU	0x2f1c
                                           MIOS_RESERVED_200                       EQU	0x2f20
                                           MIOS_RESERVED_201                       EQU	0x2f24
                                           MIOS_RESERVED_202                       EQU	0x2f28
                                           MIOS_RESERVED_203                       EQU	0x2f2c
                                           MIOS_RESERVED_204                       EQU	0x2f30
                                           MIOS_RESERVED_205                       EQU	0x2f34
                                           MIOS_RESERVED_206                       EQU	0x2f38
                                           MIOS_RESERVED_207                       EQU	0x2f3c
                                           MIOS_RESERVED_208                       EQU	0x2f40
                                           MIOS_RESERVED_209                       EQU	0x2f44
                                           MIOS_RESERVED_210                       EQU	0x2f48
                                           MIOS_RESERVED_211                       EQU	0x2f4c
                                           MIOS_RESERVED_212                       EQU	0x2f50
                                           MIOS_RESERVED_213                       EQU	0x2f54
                                           MIOS_RESERVED_214                       EQU	0x2f58
                                           MIOS_RESERVED_215                       EQU	0x2f5c
                                           MIOS_RESERVED_216                       EQU	0x2f60
                                           MIOS_RESERVED_217                       EQU	0x2f64
                                           MIOS_RESERVED_218                       EQU	0x2f68
                                           MIOS_RESERVED_219                       EQU	0x2f6c
                                           MIOS_RESERVED_220                       EQU	0x2f70
                                           MIOS_RESERVED_221                       EQU	0x2f74
                                           MIOS_RESERVED_222                       EQU	0x2f78
                                           MIOS_RESERVED_223                       EQU	0x2f7c
                                           MIOS_RESERVED_224                       EQU	0x2f80
                                           MIOS_RESERVED_225                       EQU	0x2f84
                                           MIOS_RESERVED_226                       EQU	0x2f88
                                           MIOS_RESERVED_227                       EQU	0x2f8c
                                           MIOS_RESERVED_228                       EQU	0x2f90
                                           MIOS_RESERVED_229                       EQU	0x2f94
                                           MIOS_RESERVED_230                       EQU	0x2f98
                                           MIOS_RESERVED_231                       EQU	0x2f9c
                                           MIOS_RESERVED_232                       EQU	0x2fa0
                                           MIOS_RESERVED_233                       EQU	0x2fa4
                                           MIOS_RESERVED_234                       EQU	0x2fa8
                                           MIOS_RESERVED_235                       EQU	0x2fac
                                           MIOS_RESERVED_236                       EQU	0x2fb0
                                           MIOS_RESERVED_237                       EQU	0x2fb4
                                           MIOS_RESERVED_238                       EQU	0x2fb8
                                           MIOS_RESERVED_239                       EQU	0x2fbc
                                           MIOS_RESERVED_240                       EQU	0x2fc0
                                           MIOS_RESERVED_241                       EQU	0x2fc4
                                           MIOS_RESERVED_242                       EQU	0x2fc8
                                           MIOS_RESERVED_243                       EQU	0x2fcc
                                           MIOS_RESERVED_244                       EQU	0x2fd0
                                           MIOS_RESERVED_245                       EQU	0x2fd4
                                           MIOS_RESERVED_246                       EQU	0x2fd8
                                           MIOS_RESERVED_247                       EQU	0x2fdc
                                           MIOS_RESERVED_248                       EQU	0x2fe0
                                           MIOS_RESERVED_249                       EQU	0x2fe4
                                           MIOS_RESERVED_250                       EQU	0x2fe8
                                           MIOS_RESERVED_251                       EQU	0x2fec
                                           MIOS_RESERVED_252                       EQU	0x2ff0
                                           MIOS_RESERVED_253                       EQU	0x2ff4
                                           MIOS_RESERVED_254                       EQU	0x2ff8
                                           MIOS_RESERVED_255                       EQU	0x2ffc
                                           #include <macros.h>
                                           ; $Id: macros.h 49 2008-01-30 21:47:31Z tk $
                                           ;
                                           ; Macro Definitions
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           BRA_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	bra	label
                                           	ENDM
                                           
                                           
                                           BRA_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	bra	label
                                           	ENDM
                                           
                                           GOTO_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	goto	label
                                           	ENDM
                                           
                                           
                                           GOTO_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	goto	label
                                           	ENDM
                                           
                                           CALL_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	call	label
                                           	ENDM
                                           
                                           
                                           CALL_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	call	label
                                           	ENDM
                                           
                                           RCALL_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	rcall	label
                                           	ENDM
                                           
                                           
                                           RCALL_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	rcall	label
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           IRQ_DISABLE MACRO
0056e0   9ef2     bcf	0xf2, 0x7, 0                 bcf     INTCON, GIE
                                                   ENDM
                                           
                                           IRQ_ENABLE MACRO
0056ee   8ef2     bsf	0xf2, 0x7, 0                 bsf     INTCON, GIE
                                                   ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           TABLE_ADDR_FULL MACRO addr
                                           	movlw   LOW(addr)		; store Lo Byte
                                                   movwf   TBLPTRL
                                                   movlw   HIGH(addr)		; store Hi Byte
                                                   movwf   TBLPTRH
                                                   movlw   UPPER(addr)		; store upper Byte
                                                   movwf   TBLPTRU
                                                   ENDM
                                                   
                                           TABLE_ADDR MACRO addr
                                                   movlw   LOW(addr)		; store Lo Byte
                                                   movwf   TBLPTRL
                                                   movlw   HIGH(addr)		; store Hi Byte
                                                   movwf   TBLPTRH
                                           #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                                                   movlw   UPPER(addr)		; store Upper Byte
                                                   movwf   TBLPTRU
                                           #endif
                                                   ENDM
                                                   
                                           TABLE_H MACRO   addr
                                                   movlw   HIGH(addr)		; store Hi Byte
                                                   movwf   TBLPTRH
                                                   ENDM
                                           
                                           TABLE_L MACRO   addr
                                                   movlw   LOW(addr)		; store Lo Byte
                                                   movwf   TBLPTRL
                                                   ENDM
                                           
                                           TABLE_ADD_W MACRO
                                           	addwf	TBLPTRL, F
                                           	movlw	0x00
                                           	addwfc	TBLPTRH, F
                                           #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                                           	movlw	0x00
                                           	addwfc	TBLPTRU, F
                                           #endif
                                                   ENDM
                                           
                                           TABLE_ADDR_MUL_W MACRO addr, multiplicator
                                           	mullw	multiplicator
                                           	movlw	LOW(addr)
                                           	addwf	PRODL, W
                                           	movwf	TBLPTRL
                                           	movlw	HIGH(addr)
                                           	addwfc	PRODH, W
                                           	movwf	TBLPTRH
                                           #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                                           	clrf    TBLPTRU
                                                   movlw   UPPER(addr)
                                           	addwfc	TBLPTRU, F
                                           #endif
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           JUMPTABLE_2BYTES MACRO max_value
                                           	addlw	-(max_value)	; ensure that jump index is not greater than (max_value-1)
                                           	skpnc
                                           	movlw	-(max_value)
                                           	addlw	max_value
                                           	call	MIOS_HLP_GetIndex_2bytes
                                           	ENDM
                                           
                                           JUMPTABLE_2BYTES_UNSECURE MACRO
                                           	call	MIOS_HLP_GetIndex_2bytes
                                           	ENDM
                                           
                                           JUMPTABLE_4BYTES MACRO max_value
                                           	addlw	-(max_value)	; ensure that jump index is not greater than (max_value-1)
                                           	skpnc
                                           	return
                                           	addlw	(max_value)
                                           	call	MIOS_HLP_GetIndex_4bytes
                                           	ENDM
                                           
                                           JUMPTABLE_4BYTES_UNSECURE MACRO
                                           	call	MIOS_HLP_GetIndex_4bytes
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           TWOBYTE_ENTRY MACRO low_byte, high_byte
                                                   dw      (high_byte << 8) | (low_byte)
                                                   ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           #define skpnz	btfsc	STATUS, Z 
                                           #define skpz	btfss	STATUS, Z 
                                           #define skpndc	btfsc	STATUS, DC 
                                           #define skpdc	btfss	STATUS, DC
                                           #define skpnc	btfsc	STATUS, C
                                           #define skpc	btfss	STATUS, C
                                           #define clrc	bcf	STATUS, C
                                           #define setc	bsf	STATUS, C
                                           #define clrz	bcf	STATUS, Z
                                           #define setz	bsf	STATUS, Z
                                           #define rrf	rrcf	
                                           #define rlf	rlcf
                                           
                                           rgoto   MACRO   label
0056ce   d7fb     bra	0x56c6                       bra     label
                                                   ENDM
                                           
                                           SET_BSR MACRO   reg
                                                   movlb   HIGH(reg)
                                                   ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           FONT_ENTRY MACRO width, height, x0, char_offset
                                           	dw	((height) << 8) | (width), ((char_offset) << 8) | (x0)
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           STRING MACRO length, pos, str
                                           	da	((length) << 8) | (pos), str
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           ; ==========================================================================
                                           
                                           	;; export lables
                                           	global	DEBUG_MSG_SendHeader
                                           	global	DEBUG_MSG_SendFooter
                                           	global	DEBUG_MSG_SendChar
                                           	;;  global	DEBUG_MSG_SendCString  ; not available for ASM-only version as TMP registers are overwritten
                                           	;; for assembly programs, use DEBUG_MSG_SendASMString instead, which is optimized for this use model!
                                           	global	DEBUG_MSG_SendBCD1
                                           	global	DEBUG_MSG_SendBCD2
                                           	global	DEBUG_MSG_SendBCD3
                                           	global	DEBUG_MSG_SendBCD4
                                           	global	DEBUG_MSG_SendBCD5
                                           	global	DEBUG_MSG_SendHex1
                                           	global	DEBUG_MSG_SendHex2
                                           
                                           	global	_DEBUG_MSG_SendHeader
                                           	global	_DEBUG_MSG_SendFooter
                                           	global	_DEBUG_MSG_SendChar
                                           	global	_DEBUG_MSG_SendCString
                                           	global	_DEBUG_MSG_SendBCD1
                                           	global	_DEBUG_MSG_SendBCD2
                                           	global	_DEBUG_MSG_SendBCD3
                                           	global	_DEBUG_MSG_SendBCD4
                                           	global	_DEBUG_MSG_SendBCD5
                                           	global	_DEBUG_MSG_SendHex1
                                           	global	_DEBUG_MSG_SendHex2
                                           
                                           
                                           ; ==========================================================================
                                           ;  Declare variables 
                                           ; ==========================================================================
                                           
                                           ; ==========================================================================
                                           DEBUG_MSG code
                                           #include <debug_msg.inc>
                                           ; $Id: debug_msg.inc 626 2009-01-19 21:36:33Z tk $
                                           ;
                                           ;  Help functions to send debug messages to MIOS Terminal via SysEx
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 2009 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: DEBUG_MSG_SendHeader
                                           ;;  DESCRIPTION: sends the SysEx header
                                           ;;  IN:	  -
                                           ;;  OUT:  -
                                           ;;  USES: BSR, FSR1
                                           ;; --------------------------------------------------------------------------
                                           _DEBUG_MSG_SendHeader	; for C
                                           DEBUG_MSG_SendHeader
                                           	;; this SysEx command will be parsed by MIOS Terminal to print out text messages
005678   0ef0     movlw	0xf0               	movlw	0xf0
00567a   ec24     call	0x2c48, 0           	call	MIOS_MIDI_TxBufferPut
00567c   f016
00567e   0e00     movlw	0                  	movlw	0x00
005680   ec24     call	0x2c48, 0           	call	MIOS_MIDI_TxBufferPut
005682   f016
005684   0e00     movlw	0                  	movlw	0x00
005686   ec24     call	0x2c48, 0           	call	MIOS_MIDI_TxBufferPut
005688   f016
00568a   0e7e     movlw	0x7e               	movlw	0x7e
00568c   ec24     call	0x2c48, 0           	call	MIOS_MIDI_TxBufferPut
00568e   f016
005690   0e32     movlw	0x32               	movlw	0x32
005692   ec24     call	0x2c48, 0           	call	MIOS_MIDI_TxBufferPut
005694   f016
005696   ec04     call	0x2c08, 0           	call	MIOS_MIDI_DeviceIDGet
005698   f016
00569a   ec24     call	0x2c48, 0           	call	MIOS_MIDI_TxBufferPut
00569c   f016
00569e   0e0d     movlw	0xd                	movlw	0x0d
0056a0   ec24     call	0x2c48, 0           	call	MIOS_MIDI_TxBufferPut
0056a2   f016
0056a4   0e40     movlw	0x40               	movlw	0x40
0056a6   ec24     call	0x2c48, 0           	call	MIOS_MIDI_TxBufferPut
0056a8   f016
                                           
                                           	;; following characters will be print on terminal
0056aa   0012     return	0                 	return
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: DEBUG_MSG_SendFooter
                                           ;;  DESCRIPTION: sends the SysEx footer
                                           ;;  IN:	  -
                                           ;;  OUT:  -
                                           ;;  USES: BSR, FSR1
                                           ;; --------------------------------------------------------------------------
                                           _DEBUG_MSG_SendFooter	; for C
                                           DEBUG_MSG_SendFooter
                                           	;; finish SysEx stream - MIOS Terminal will print the received characters now
0056ac   0ef7     movlw	0xf7               	movlw	0xf7
0056ae   ec24     call	0x2c48, 0           	call	MIOS_MIDI_TxBufferPut
0056b0   f016
0056b2   0012     return	0                 	return
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: DEBUG_MSG_SendChar
                                           ;;  DESCRIPTION: sends a single character
                                           ;;  IN:	  Character in WREG
                                           ;;  OUT:  -
                                           ;;  USES: BSR, FSR1
                                           ;; --------------------------------------------------------------------------
                                           _DEBUG_MSG_SendChar	; for C
                                           DEBUG_MSG_SendChar
0056b4   0b7f     andlw	0x7f               	andlw	0x7f	; ensure that MSB is cleared, otherwise we would violate the MIDI protocol
0056b6   ef24     goto	0x2c48              	goto	MIOS_MIDI_TxBufferPut
0056b8   f016
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: DEBUG_MSG_SendASMString
                                           ;;  DESCRIPTION: used in assembly programs to send a string
                                           ;;               see example in README.txt for usage
                                           ;;  IN:	  zero-terminated string after call instruction
                                           ;;  OUT:  -
                                           ;;  USES: BSR, FSR1, TBLPTR[LHU], TABLAT
                                           ;; --------------------------------------------------------------------------
                                           DEBUG_MSG_SendASMString
                                           	;; we expect that the zero-terminated string is located behind the "call" instruction
                                           	;; transfer pointer to TBLPTR[LHU]
0056ba   cffd     movff	0xffd, 0xff6               movff   TOSL, TBLPTRL
0056bc   fff6
0056be   cffe     movff	0xffe, 0xff7               movff   TOSH, TBLPTRH
0056c0   fff7
0056c2   cfff     movff	0xfff, 0xff8               movff   TOSU, TBLPTRU
0056c4   fff8
                                           
                                           	;; print until zero is read
                                           DEBUG_MSG_SendASMStringLoop
0056c6   0009     tblrd	*+                 	tblrd*+
0056c8   50f5     movf	0xf5, 0, 0          	movf	TABLAT, W
0056ca   e002     bz	0x56d0                	bz	DEBUG_MSG_SendASMStringLoop_End
0056cc   dff3     rcall	0x56b4             	rcall	DEBUG_MSG_SendChar
                                           	rgoto	DEBUG_MSG_SendASMStringLoop
                                           DEBUG_MSG_SendASMStringLoop_End
                                           
                                                   ;; return pointer now in TBLPTR[LH]
                                           
                                           	;; ensure that it is aligned to next instruction
0056d0   50f6     movf	0xf6, 0, 0          	movf	TBLPTRL, W
0056d2   0b01     andlw	0x1                	andlw	0x01
0056d4   e005     bz	0x56e0                	bz	DEBUG_MSG_SendASMString_NoIAlign
0056d6   2af6     incf	0xf6, 0x1, 0        	incf	TBLPTRL, F
0056d8   b4d8     btfsc	0xd8, 0x2, 0       	skpnz
0056da   2af7     incf	0xf7, 0x1, 0        	incf	TBLPTRH, F
0056dc   b4d8     btfsc	0xd8, 0x2, 0       	skpnz
0056de   2af8     incf	0xf8, 0x1, 0        	incf	TBLPTRU, F
                                           DEBUG_MSG_SendASMString_NoIAlign
                                           
                                                   IRQ_DISABLE
0056e2   50f6     movf	0xf6, 0, 0                  movf    TBLPTRL, W
0056e4   6efd     movwf	0xfd, 0                    movwf   TOSL
0056e6   50f7     movf	0xf7, 0, 0                  movf    TBLPTRH, W
0056e8   6efe     movwf	0xfe, 0                    movwf   TOSH
0056ea   50f8     movf	0xf8, 0, 0                  movf    TBLPTRU, W
0056ec   6eff     movwf	0xff, 0                    movwf   TOSU
                                                   IRQ_ENABLE
0056f0   0012     return	0                         return
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: DEBUG_MSG_SendBCD1
                                           ;;  DESCRIPTION: sends a 8-bit value as BCD (decimal value) -- one digit only
                                           ;;  IN:	  Value in WREG
                                           ;;  OUT:  -
                                           ;;  USES: BSR, FSR1
                                           ;; --------------------------------------------------------------------------
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: DEBUG_MSG_SendHex1
                                           ;;  DESCRIPTION: sends a 4-bit hex value
                                           ;;  IN:	  Value in WREG
                                           ;;  OUT:  -
                                           ;;  USES: BSR, FSR1
                                           ;; --------------------------------------------------------------------------
                                           _DEBUG_MSG_SendBCD1	; for C
                                           DEBUG_MSG_SendBCD1
                                           _DEBUG_MSG_SendHex1	; for C
                                           DEBUG_MSG_SendHex1
0056f2   0b0f     andlw	0xf                	andlw	0x0f
0056f4   0ff6     addlw	0xf6               	addlw	-0x0a
0056f6   b0d8     btfsc	0xd8, 0, 0         	skpnc
0056f8   0f07     addlw	0x7                	addlw	0x07
0056fa   0f3a     addlw	0x3a               	addlw	0x3a
                                           	rgoto	DEBUG_MSG_SendChar
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: DEBUG_MSG_SendHex2
                                           ;;  DESCRIPTION: sends a 8-bit hex value
                                           ;;  IN:	  Value in WREG
                                           ;;  OUT:  -
                                           ;;  USES: BSR, FSR1, PRODL (!)
                                           ;; --------------------------------------------------------------------------
                                           _DEBUG_MSG_SendHex2	; for C
                                           DEBUG_MSG_SendHex2
0056fe   6ef3     movwf	0xf3, 0            	movwf	PRODL
005700   38f3     swapf	0xf3, 0, 0         	swapf	PRODL, W
005702   dff7     rcall	0x56f2             	rcall	DEBUG_MSG_SendBCD1
005704   50f3     movf	0xf3, 0, 0          	movf	PRODL, W
                                           	rgoto	DEBUG_MSG_SendBCD1
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: DEBUG_MSG_SendBCD2
                                           ;;  DESCRIPTION: prints a 8-bit value as BCD (decimal value) -- two digits only
                                           ;;  IN:	  Value in WREG
                                           ;;  OUT:  -
                                           ;;  USES: BSR, FSR1
                                           ;; --------------------------------------------------------------------------
                                           _DEBUG_MSG_SendBCD2	; for C
                                           DEBUG_MSG_SendBCD2
005708   6a03     clrf	0x3, 0              	clrf	MIOS_PARAMETER1
00570a   ecf4     call	0x2de8, 0           	call	MIOS_HLP_Dec2BCD
00570c   f016
                                           	rgoto	DEBUG_MSG_SendBCD2_Cont
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: DEBUG_MSG_SendBCD3
                                           ;;  DESCRIPTION: prints a 8-bit value as BCD (decimal value) -- all three digits
                                           ;;  IN:	  Value in WREG
                                           ;;  OUT:  -
                                           ;;  USES: BSR, FSR1
                                           ;; --------------------------------------------------------------------------
                                           _DEBUG_MSG_SendBCD3	; for C
                                           DEBUG_MSG_SendBCD3
005710   6a03     clrf	0x3, 0              	clrf	MIOS_PARAMETER1
005712   ecf4     call	0x2de8, 0           	call	MIOS_HLP_Dec2BCD
005714   f016
                                           	rgoto	DEBUG_MSG_SendBCD3_Cont
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: DEBUG_MSG_SendBCD4
                                           ;;  DESCRIPTION: prints a 16-bit as BCD (decimal value) -- four digits
                                           ;;  IN:   Low-byte in WREG, High-byte in MIOS_PARAMETER1
                                           ;;  IN:	  Value in WREG
                                           ;;  OUT:  -
                                           ;;  USES: BSR, FSR1, MIOS_PARAMETER[123]
                                           ;; --------------------------------------------------------------------------
                                           ;_DEBUG_MSG_SendBCD4	; "unsigned int" parameter converted in debug_msg.asm
                                           DEBUG_MSG_SendBCD4
005718   ecf4     call	0x2de8, 0           	call	MIOS_HLP_Dec2BCD
00571a   f016
                                           	rgoto	DEBUG_MSG_SendBCD4_Cont
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: DEBUG_MSG_SendBCD5
                                           ;;  DESCRIPTION: prints a 16-bit as BCD (decimal value) -- five digits
                                           ;;  IN:   Low-byte in WREG, High-byte in MIOS_PARAMETER1
                                           ;;  IN:	  Value in WREG
                                           ;;  OUT:  -
                                           ;;  USES: BSR, FSR1, MIOS_PARAMETER[123]
                                           ;; --------------------------------------------------------------------------
                                           ;_DEBUG_MSG_SendBCD5	; "unsigned int" parameter converted in debug_msg.asm
                                           DEBUG_MSG_SendBCD5
00571e   ecf4     call	0x2de8, 0           	call	MIOS_HLP_Dec2BCD
005720   f016
                                           
                                           ;; -----------------
                                           DEBUG_MSG_SendBCD5_Cont
005722   5005     movf	0x5, 0, 0           	movf	MIOS_PARAMETER3, W
005724   0b0f     andlw	0xf                	andlw	0x0f
005726   e112     bnz	0x574c               	bnz	DEBUG_MSG_SendBCD_D5
                                           
005728   0e20     movlw	0x20               	movlw	' '
00572a   dfc4     rcall	0x56b4             	rcall	DEBUG_MSG_SendChar
                                           
                                           DEBUG_MSG_SendBCD4_Cont
00572c   3804     swapf	0x4, 0, 0          	swapf	MIOS_PARAMETER2, W
00572e   0b0f     andlw	0xf                	andlw	0x0f
005730   e10e     bnz	0x574e               	bnz	DEBUG_MSG_SendBCD_D4
                                           
005732   0e20     movlw	0x20               	movlw	' '
005734   dfbf     rcall	0x56b4             	rcall	DEBUG_MSG_SendChar
                                           
                                           DEBUG_MSG_SendBCD3_Cont
005736   5004     movf	0x4, 0, 0           	movf	MIOS_PARAMETER2, W
005738   0b0f     andlw	0xf                	andlw	0x0f
00573a   e10b     bnz	0x5752               	bnz	DEBUG_MSG_SendBCD_D3
                                           
00573c   0e20     movlw	0x20               	movlw	' '
00573e   dfba     rcall	0x56b4             	rcall	DEBUG_MSG_SendChar
                                           
                                           DEBUG_MSG_SendBCD2_Cont
005740   3803     swapf	0x3, 0, 0          	swapf	MIOS_PARAMETER1, W
005742   0b0f     andlw	0xf                	andlw	0x0f
005744   e108     bnz	0x5756               	bnz	DEBUG_MSG_SendBCD_D2
                                           
005746   0e20     movlw	0x20               	movlw	' '
005748   dfb5     rcall	0x56b4             	rcall	DEBUG_MSG_SendChar
                                           
                                           DEBUG_MSG_SendBCD1_Cont
                                           	rgoto	DEBUG_MSG_SendBCD_D1
                                           	
                                           
                                           	;; ---
                                           DEBUG_MSG_SendBCD_D5
00574c   dfd2     rcall	0x56f2             	rcall	DEBUG_MSG_SendBCD1
                                           DEBUG_MSG_SendBCD_D4
00574e   3804     swapf	0x4, 0, 0          	swapf	MIOS_PARAMETER2, W
005750   dfd0     rcall	0x56f2             	rcall	DEBUG_MSG_SendBCD1
                                           DEBUG_MSG_SendBCD_D3
005752   5004     movf	0x4, 0, 0           	movf	MIOS_PARAMETER2, W
005754   dfce     rcall	0x56f2             	rcall	DEBUG_MSG_SendBCD1
                                           DEBUG_MSG_SendBCD_D2
005756   3803     swapf	0x3, 0, 0          	swapf	MIOS_PARAMETER1, W
005758   dfcc     rcall	0x56f2             	rcall	DEBUG_MSG_SendBCD1
                                           DEBUG_MSG_SendBCD_D1
00575a   5003     movf	0x3, 0, 0           	movf	MIOS_PARAMETER1, W
                                           	rgoto	DEBUG_MSG_SendBCD1
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: DEBUG_MSG_SendCString
                                           ;;  C_DECLARATION: void DEBUG_MSG_SendCString(char *str)
                                           ;;  DESCRIPTION: sends a 0-terminated string --- only provided by the C Wrapper!
                                           ;;  C_IN: Pointer to 0-terminated String in <str>
                                           ;;  USES: BSR, FSR1
                                           ;; --------------------------------------------------------------------------
                                           
                                           ; ==========================================================================
                                           	;; C function wrappers
                                           
                                           	;; functions which get no or only a single argument are not listed here
                                           	;; (no parameter conversion required)
                                           
                                           _DEBUG_MSG_SendBCD4
00575e   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005760   ffd9
005762   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
005764   f003
005766   ef8c     goto	0x5718              	goto	DEBUG_MSG_SendBCD4
005768   f02b
                                           
                                           _DEBUG_MSG_SendBCD5
00576a   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00576c   ffd9
00576e   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
005770   f003
005772   ef8f     goto	0x571e              	goto	DEBUG_MSG_SendBCD5
005774   f02b
                                           
                                           
                                           _DEBUG_MSG_SendCString
                                           	;; transfer pointer into TBLPTR[LHU]
005776   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
005778   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00577a   ffd9
00577c   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
00577e   fff7
005780   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
                                           
                                           	;; SDCC passes a 24bit pointer, the MSB (now in WREG) bit 6 and 7 tells us, where the data is located:
                                           	;; 00 -> code
                                           	;; 01 -> EEPROM (not supported by DEBUG_MSG_PrintCString yet)
                                           	;; 10 -> data
                                           	;; 11 -> unimplemented
                                           
005782   bee8     btfsc	0xe8, 0x7, 0       	btfsc	WREG, 7
005784   d008     bra	0x5796               	bra	_DEBUG_MSG_SendCString_RAM
                                           _DEBUG_MSG_SendCString_Code
005786   6ef8     movwf	0xf8, 0            	movwf	TBLPTRU
                                           _DEBUG_MSG_SendCStringLoop_Code
005788   0009     tblrd	*+                 	tblrd*+
00578a   50f5     movf	0xf5, 0, 0          	movf	TABLAT, W
00578c   e003     bz	0x5794                	bz	_DEBUG_MSG_SendCString_Code_End
00578e   ec5a     call	0x56b4, 0           	call	DEBUG_MSG_SendChar
005790   f02b
005792   d7fa     bra	0x5788               	bra	_DEBUG_MSG_SendCStringLoop_Code
                                           _DEBUG_MSG_SendCString_Code_End
005794   0012     return	0                 	return
                                           
                                           _DEBUG_MSG_SendCString_RAM
                                           	;; using FSR2 as temporary pointer - store current FSR2 into TMP[12]
005796   cfd9     movff	0xfd9, 0x6         	movff	FSR2L, TMP1
005798   f006
00579a   cfda     movff	0xfda, 0x7         	movff	FSR2H, TMP2
00579c   f007
00579e   cff6     movff	0xff6, 0xfd9       	movff	TBLPTRL, FSR2L
0057a0   ffd9
0057a2   cff7     movff	0xff7, 0xfda       	movff	TBLPTRH, FSR2H
0057a4   ffda
                                           _DEBUG_MSG_SendCStringLoop_RAM
0057a6   50de     movf	0xde, 0, 0          	movf	POSTINC2, W
0057a8   e003     bz	0x57b0                	bz	_DEBUG_MSG_SendCString_RAM_End
0057aa   ec5a     call	0x56b4, 0           	call	DEBUG_MSG_SendChar
0057ac   f02b
0057ae   d7fb     bra	0x57a6               	bra	_DEBUG_MSG_SendCStringLoop_RAM
                                           _DEBUG_MSG_SendCString_RAM_End
                                           	;; restore FSR2
0057b0   c006     movff	0x6, 0xfd9         	movff	TMP1, FSR2L
0057b2   ffd9
0057b4   c007     movff	0x7, 0xfda         	movff	TMP2, FSR2H
0057b6   ffda
0057b8   0012     return	0                 	return
                                           
                                           
                                           ; ==========================================================================
                                           	END
